#+TITLE: My emacs configure
#+KEYWORDS: emacs configure, org-mode

  This is my version of an configuration file for GNU Emacs.

* Package management
The first part of the configuration is to prepare the package management. I am using =use-package= as
the central tool to deal with configuration of the packages.

** Emacs package configuration
In this section, we are configuring the repositories and emacs internal package management. The only
specificity here is that the TLS algorithm is specific for 26.2.1.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (when (and (= emacs-major-version 26)
             (= emacs-minor-version 2)
             (= emacs-build-number 1))
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

  (setq package-enable-at-startup nil
        package-check-signature nil
        package-archives '(("gnu" . "http://mirrors.ustc.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")
                           ("org" . "http://mirrors.ustc.edu.cn/elpa/org/"))

        package-archive-priorities  '(("org"      . 15)
                                      ("melpa"        . 10)
                                      ("gnu"     . 5))
        package-check-signature nil)

  (package-initialize)
#+END_SRC

** Load use-package
Here, we are initializing =use-package= in the classic way.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (eval-and-compile
      ;;(setq use-package-always-ensure t)
      ;;(setq use-package-always-defer t)
      (setq use-package-always-demand nil)
      (setq use-package-expand-minimally t)
      (setq use-package-verbose t))

#+END_SRC
** Quelpa
Quelpa is super useful for developer package management. Adding the adaptation for the use-package
makes it configuration file proof.

 #+begin_src emacs-lisp
   (use-package quelpa-use-package
     :ensure t
     :init
     (setq quelpa-update-melpa-p nil))
 #+end_src
** Hydra
I use hydra a lot so it is easier to add its support directly in the use-package configuration part.

#+BEGIN_SRC emacs-lisp
  (use-package hydra :ensure t)
  (use-package use-package-hydra
    :ensure t
    :functions
    (hydra-default-pre
     hydra-keyboard-quit
     hydra--call-interactively-remap-maybe
     hydra-show-hint
     hydra-set-transient-map))
#+END_SRC
** General
I introduce general to configure the key management. It is not really used yet, but it will be more and and more.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)
#+END_SRC

** Paradox to enhance package list management
Finally, I use paradox to enhance the package listing experience.
#+BEGIN_SRC emacs-lisp
  ;; A modern Packages Menu
  (use-package paradox
    :ensure t
    :init
    (setq paradox-execute-asynchronously t)
    (setq paradox-github-token t)
    (setq paradox-display-star-count nil))
#+END_SRC


* Helpers
I need to define some helpers to be able to facilitate the configuration. This mainly introduce
user/password management.

** Define some important variables
#+BEGIN_SRC emacs-lisp
  ;; Define root directory and add the plugins
  (defvar default-plugin-dir (format "%s/plugins" user-emacs-directory)
    "The plugins directory")
  (add-to-list 'load-path default-plugin-dir)
  (add-to-list 'load-path "~/.emacs.d/site-lisp/")

  ;; Don't screw up my files with custom
  (setq custom-file (format "%s/custom.el" user-emacs-directory))
  (load custom-file 'noerror)

  ;; Give focus to new help windows
  (setq help-window-select t)
  ;; Put apropos in current buffer so it can be read and exited with minimum effort
  (add-to-list 'display-buffer-alist
              '("*Apropos*" display-buffer-same-window)
              '("*Info*" display-buffer-same-window))

  ;; Add /usr/local/bin to the path
  (setq exec-path (append exec-path '("/usr/local/bin")))

  ;; Y or n is enough for me
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Silence!!!!!!
  (setq save-abbrevs 'silently
    ad-redefinition-action 'accept
    ;; Garbage collection (see https://github.com/jethrokuan/.emacs.d/blob/master/config.org)
    gc-cons-threshold 50000000
    large-file-warning-threshold 100000000)

#+END_SRC
** Identification helper
Easy use wrapper around auth-* authentification emacs utils.

#+begin_src emacs-lisp
(cl-defun my:auth-source-get-user (&rest spec &allow-other-keys)
  "Helper to get the user given the SPEC from authsource."
  (let ((founds (apply 'auth-source-search spec)))
    (when founds
      (plist-get (nth 0 founds) :user))))

(cl-defun my:auth-source-get-passwd (&rest spec &allow-other-keys)
  "Helper to get the password given the SPEC from authsource."
  (let ((founds (apply 'auth-source-search spec)))
    (when founds
      (funcall (plist-get (nth 0 founds) :secret)))))
#+end_src

** Helpers
I define here some global helpers used either in the rest of the file, either available to use at runtime

*** Editing as root
Defining a simple helper to edit file as root using tramp

#+begin_src emacs-lisp
  (defun edit-current-file-as-root ()
    "Edit the file that is associated with the current buffer as root"
    (interactive)
    (if (buffer-file-name)
        (find-file (concat "/sudo:localhost:" (buffer-file-name)))
      (message "Current buffer does not have an associated file.")))
#+end_src
** Helper Keybinding
#+begin_src emacs-lisp
  (defhydra hydra-main (:color teal :hint nil)
    "
    Main helper

    Org. related          Help                Zooming        bookmarks          other helpers     completion
    ------------------------------------------------------------------------------------------------------------------
    _c_: org-capture        _f_: function doc.    _+_: zoom in     _b_: list bookmarks  _p_: prodigy        _y_: ivy-yasnippet
    _g_: org-web-get-url    _v_: variable doc.    _-_: zoom out    _B_: bookmark file   _m_: new mail

    Backups                       Feed
    ------------------------------------------------------------------------------------------------------------------
    _s_: list backups             _e_: elfeed
    _S_: snapshot timemachine

    "
    ("B" bookmark-set)
    ("b" list-bookmarks)
    ("c" counsel-org-capture)
    ("f" describe-function)
    ("e" elfeed)
    ("g" org-web-tools-read-url-as-org)
    ("m" mu4e-compose-new)
    ("p" prodigy)
    ("s" snapshot-timeline)
    ("S" snapshot-timemachine)
    ("v" describe-variable)
    ("y" ivy-yasnippet)
    ("+" text-scale-increase :color pink)
    ("-" text-scale-decrease :color pink)
    ("<ESC>" nil "quit" :color blue)
    ("q"   nil "cancel" :color blue))

  (global-set-key (kbd "<f1>") 'hydra-main/body)
#+end_src
* emacs concept
** coding system
#+begin_src emacs-lisp
  (prefer-coding-system 'gb2312)
  (prefer-coding-system 'utf-8)
#+end_src
** theme and mode line
#+begin_src emacs-lisp
  (use-package srcery-theme
    :ensure t
    :config
    (load-theme 'srcery t)
  )
  ;; Modeline
  (use-package doom-modeline
    :ensure t
    :custom
    (doom-modeline-buffer-file-name-style 'truncate-with-project)
    (doom-modeline-buffer-name t)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-minor-modes nil)
    (doom-modeline-height 15)
    ; use unicode as a fallback (instead of ASCII) when not using icons
    (setq doom-modeline-unicode-fallback t)
    ; don't display the buffer encoding
    (setq doom-modeline-buffer-encoding nil)
    :config
    (set-cursor-color "cyan")
    (line-number-mode 0)
    (column-number-mode 0)
    :init (doom-modeline-mode 1))

  (use-package hide-mode-line
    :ensure t
    :hook
    ((neotree-mode imenu-list-minor-mode minimap-mode) . hide-mode-line-mode))
#+end_src
** Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)

(use-package all-the-icons-dired
  :ensure t
  :config (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

(use-package all-the-icons-ivy
  :ensure t
  :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+end_src
** Fonts
#+begin_src shell :tangle no
sudo pacman -S ttf-fira-code
sudo pacman -S nerd-fonts-fira-code
#+end_src
#+begin_src emacs-lisp
(require 'dash)
  (defun set-icon-fonts (CODE-FONT-ALIST)
    "Utility to associate many unicode points with specified fonts."
    (--each CODE-FONT-ALIST
      (-let (((font . codes) it))
        (--each codes
          (set-fontset-font t `(,it . ,it) font)))))

  (defun load-default-fonts ()

    ;;(set-fontset-font "fontset-default" 'unicode "Dejavu Sans Mono")
    (set-fontset-font "fontset-default" 'unicode "Fira Code Nerd Font")

    ;; The icons you see are not the correct icons until this is evaluated!
    (set-icon-fonts
     '(("fontawesome"
        ;; ÔÅº   ÔÉâ     ÔÉÑ     ÔÇõ      ÔÄó     ÔÑÅ
        #xf07c #xf0c9 #xf0c4 #xf0cb #xf017 #xf101)

       ("all-the-icons"
        ;; Ó§á   Ó§®
        #xe907 #xe928)

       ("github-octicons"
        ;; ÔÇë   ÔÅô     ÔÅ∂     ÔÅµ     ÔÄñ     ÔÄä
        #xf091 #xf059 #xf076 #xf075 #xf016 #xf00a)

       ("Symbola"
        ;; ùïä    ‚®Ç      ‚àÖ      ‚üª    ‚üº     ‚äô      ùïã       ùîΩ
        #x1d54a #x2a02 #x2205 #x27fb #x27fc #x2299 #x1d54b #x1d53d
        ;; ùîπ    ùîá       ùîó
        #x1d539 #x1d507 #x1d517))))


  (defun load-fonts (frame)
    (select-frame frame)
    (load-default-fonts))

  (if (daemonp)
      (add-hook 'after-make-frame-functions #'load-fonts)
    (load-default-fonts))
#+end_src
** frame
*** Title
#+begin_src emacs-lisp
(defun frame-title-format ()
  "Return frame title with current project name, where applicable."
  (let ((file buffer-file-name))
    (if file
        (if (and (bound-and-true-p projectile-mode)
                 (projectile-project-p))
            (concat
             (format "[%s] " (projectile-project-name))
             (replace-regexp-in-string (format "^%s" (projectile-project-p)) "" (file-truename file)))
          (abbreviate-file-name file))
      "%b")))

(when (display-graphic-p)
  (setq frame-title-format '("" " Happy Hacking ‚ò∫ "(:eval (frame-title-format)))))

#+end_src
*** Remove unused part
#+begin_src emacs-lisp
  ;; Prevent the startup window
  (setq inhibit-startup-message t)

  ;; No alarms.
  (setq ring-bell-function 'ignore)

  ;; When on a tab, make the cursor the tab length‚Ä¶
  (setq-default x-stretch-cursor t)

  ;; Permanently force Emacs to indent with spaces, never with TABs
  (set-default 'indent-tabs-mode nil)

  ;; Except in Makefiles.
  (add-hook 'makefile-mode-hook 'indent-tabs-mode)

  ;; Setup fullscreen when startup
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** window
*** Split Buffers Side-by-Side
#+begin_src emacs-lisp
;;emacs‰ºöÊ†πÊçÆ‰Ω†ÁöÑÁîµËÑëÂ±èÂπïÈïøÂÆΩÊØîËá™Âä®Ë∞ÉÊï¥Êó∂‰∏ä‰∏ãÂàÜÂ±èËøòÊòØÂ∑¶Âè≥ÂàÜÔºåÂ¶ÇÊûúÊÉ≥Âº∫Âà∂Â∑¶Âè≥ÂàÜÂèØ‰ª•ËøôÊ†∑ËÆæÁΩÆÔºö
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+end_src
** minibuffer
#+begin_src emacs-lisp :tangle no
  (use-package minibuffer
    ;; :hook
    ;; (eval-expression-minibuffer-setup .  #'eldoc-mode)
    :ensure t
    :config
    (setq read-file-name-completion-ignore-case t
          completion-ignore-case t
          resize-mini-windows t)

    (file-name-shadow-mode 1))
#+end_src

*** Maple minibuffer
#+begin_src emacs-lisp :tangle no
  (use-package maple-minibuffer
    :disabled t
    :ensure quelpa
    :quelpa (maple-minibuffer :fetcher github :repo "honmaple/emacs-maple-minibuffer")
    :hook
    (after-init . maple-minibuffer-mode)

    :custom
    (maple-minibuffer:position-type 'frame-center)
    (maple-minibuffer:width 0.7)
    (maple-minibuffer:action '(read-from-minibuffer read-string))
    (maple-minibuffer:ignore-action '(evil-ex eval-expression org-schedule))
    (maple-minibuffer:ignore-regexp '("^helm-"))

    :config
    ;; more custom parameters for frame
    (defun maple-minibuffer:parameters ()
      "Maple minibuffer parameters."
      `((height . ,(or maple-minibuffer:height 10))
        (width . ,(or maple-minibuffer:width (window-pixel-width)))
        (left-fringe . 5)
        (right-fringe . 5))))

#+end_src
** line numbers and whitespace indicators

*Display line numbers (buffer-local)*
  I seldom use line numbers, but here it is.  This toggles the setting for the local buffer and also activates /hl-line-mode/.
*Display invisible characters (whitespace)*
  Viewing invisible characters (whitespace) can be very helpful under certain circumstances.  Generally though, I do not keep it active.

As for /delete-trailing-whitespace/, I prefer to call it manually because sometimes it causes problems, such as with diffs.
#+begin_src emacs-lisp
   ;; Turn on line numbers
   ;; (global-display-line-numbers-mode)
   ;; (menu-bar-display-line-numbers-mode 'relative)
  (if (version< emacs-version "26")
      (global-linum-mode)
    (add-hook 'text-mode-hook #'display-line-numbers-mode)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode))

  (use-package display-line-numbers
    :config
    ;; Set absolute line numbers.  A value of "relative" is also useful.
    (setq display-line-numbers-type t)
    ;; Those two variables were introduced in Emacs 27.1
    (setq display-line-numbers-major-tick 0)
    (setq display-line-numbers-minor-tick 0)
    ;; Use absolute numbers in narrowed buffers
    (setq display-line-numbers-widen t)

    (define-minor-mode my/display-line-numbers-mode
      "Toggle `display-line-numbers-mode' and `hl-line-mode'."
      :init-value nil
      :global nil
      (if my/display-line-numbers-mode
          (progn
            (display-line-numbers-mode 1)
            (hl-line-mode 1)
            (setq-local truncate-lines t))
        (display-line-numbers-mode -1)
        (hl-line-mode -1)
        (setq-local truncate-lines nil)))
    :bind ("<f11>" . my/display-line-numbers-mode))

  (use-package whitespace
    :config
    (defun my/toggle-invisibles ()
      "Toggles the display of indentation and space characters."
      (interactive)
      (if (bound-and-true-p whitespace-mode)
          (whitespace-mode -1)
        (whitespace-mode)))
    :bind (("<f6>" . my/toggle-invisibles)
           ("C-c z" . delete-trailing-whitespace)))
  ;; ‰øùÂ≠òÊó∂Ëá™Âä®Ê∏ÖÈô§Ë°åÂ∞æÁ©∫Ê†ºÂèäÊñá‰ª∂ÁªìÂ∞æÁ©∫Ë°å trailing-whitespace: ÊãñÂ∞æÁ©∫Ê†ºÔºåÁªìÂ∞æÁ©∫Ê†º
  ;;(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Buffer
*** Column/line
The column count is set to 72. The standard line length is 80 characters,
so having it at something less allows for such things as quoting plain text, indenting, etc.
git commit messages also make good use of this method.
The column count is used by auto-fill-mode and similar tools
(or when manually invoking text formatting with fill-paragraph or equivalent‚Äînormally bound to M-q).
#+begin_src emacs-lisp
  ;; Redefine fill-column as my screen is not 80 chars :D
  ;;(setq-default fill-column 100)
  (use-package emacs
    :ensure nil
    :config
    (setq-default fill-column 72)
    :hook (after-init-hook . column-number-mode))


  (use-package emacs
    :ensure nil
    :diminish auto-fill-function
    :config
    (setq adaptive-fill-mode t)
    :hook (text-mode-hook . turn-on-auto-fill)
    (org-mode-hook . turn-on-auto-fill))

  (use-package fill-column-indicator
    :ensure t
    :config
    ;; Define a global mode but not sure I am going to use it
      (define-globalized-minor-mode
         global-fci-mode fci-mode
          (lambda ()
            (fci-mode 1))))

  (use-package visual-fill-column
    :ensure t)

  ;; See column-number
  (column-number-mode t)
  (size-indication-mode t)
#+end_src
*** Paging
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t
    :diminish page-break-lines-mode
    :config
    (global-page-break-lines-mode t))
#+end_src
*** Parenthesis
**** Smart parents
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    ;; Activate smartparens globally
    (smartparens-global-mode t)
    (show-smartparens-global-mode t))
#+end_src
#+begin_src emacs-lisp :tangle no
  (use-package smartparens
    :ensure t
    :config
    ;; Activate smartparens globally
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)

    ;; Activate smartparens in minibuffer
    (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

    ;; Do not pair simple quotes
    (sp-pair "'" nil :actions :rem))

  ;;[[Newline and indent on appropriate pairs][https://github.com/Fuco1/smartparens/issues/80]]
  (sp-local-pair '(c-mode) "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
  (sp-local-pair 'c++-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))

  (defun my-create-newline-and-enter-sexp (&rest _ignored)
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))
#+end_src

**** Rainbow delimiter
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Show current function
#+begin_src emacs-lisp
  (which-function-mode 1)
#+end_src

*** Diff
#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :hook
  (dired-mode . diff-hl-dired-mode-unless-remote)

  :config
  (global-diff-hl-mode)
  (fringe-mode 10))
#+end_src
*** buffer move
#+begin_src emacs-lisp
;;(define-prefix-command 'leader-key)
;;(global-set-key (kbd "M-SPC") 'leader-key)
(use-package buffer-move
  :ensure t
  :config)
  ;;(global-set-key (kbd "<C-S-up>")     'buf-move-up)
  ;;(global-set-key (kbd "<C-S-down>")   'buf-move-down)
  ;;(global-set-key (kbd "<C-S-left>")   'buf-move-left)
  ;;(global-set-key (kbd "<C-S-right>")  'buf-move-right))
(use-package windmove
  :ensure t
  :init (windmove-default-keybindings)
  :config
  :bind       ("C-x w f" . #'buf-move-right)
  :bind       ("C-x w b" . #'buf-move-left)
  :bind       ("C-x w p" . #'buf-move-up)
  :bind       ("C-x w n" . #'buf-move-down))
#+end_src
*** Faces/Colors
**** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :commands (rainbow-mode))
#+end_src

**** COMMENT Terminal
#+begin_src emacs-lisp
  (set-face-foreground 'term-color-black "#4d4d4d")
  (set-face-foreground 'term-color-red "#cc9393")
  (set-face-foreground 'term-color-green "#7f9f7f")
  (set-face-foreground 'term-color-yellow "#f0dfaf")
  (set-face-foreground 'term-color-blue "#4169e1")
  (set-face-foreground 'term-color-magenta "#dc8cc3")
  (set-face-foreground 'term-color-cyan "#93e0e3")
  (set-face-foreground 'term-color-white "#dcdccc")
#+end_src
**** Dired (using dired-rainbow)
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :ensure t
    :init
    (eval-after-load 'dired '(require 'dired-rainbow))

    :config

    (defconst dired-audio-files-extensions
      '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
      "Dired Audio files extensions")
    (dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

    (defconst dired-video-files-extensions
      '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
        "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
      "Dired Video files extensions")
    (dired-rainbow-define video "#455AFC" dired-video-files-extensions)

    (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))
    (dired-rainbow-define xml "DarkGreen" ("xml" "xsd" "xsl" "xslt" "wsdl"))

    (dired-rainbow-define document "#ce5c00" ("doc" "docx" "odt" "pdb" "pdf" "ps" "rtf" "djvu"))
    (dired-rainbow-define image "#ff4b4b" ("jpg" "png" "jpeg" "gif"))

    (dired-rainbow-define sourcefile "#3F82FD" ("el" "groovy" "gradle" "py" "c" "cc" "h" "java" "pl" "rb"))

    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#ad7fa8" ("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#e6a8df" ("deb" "rpm"))
    (dired-rainbow-define encrypted "LightBlue" ("gpg" "pgp"))

    (dired-rainbow-define-chmod executable-unix "Green" "-.*x.*")

    (dired-rainbow-define log (:inherit default :italic t) ".*\\.log")
    )
#+end_src

*** Emoji
#+begin_src emacs-lisp
    (use-package emojify
      :ensure t
      :functions (emojify-set-emoji-data)
      :hook (circe-chat-mode . emojify-mode)
      :config

      (setq emojify-user-emojis
            '(("(heart)" . (("name" . "Heart")
                            ("image" . "~/.emacs.d/emojis/emojione-v2.2.6-22/2665.png")
                            ("style" . "github")))))

      ;; If emojify is already loaded refresh emoji data
      (when (featurep 'emojify)
        (emojify-set-emoji-data)))

    (use-package company-emoji
      :ensure t)

    (use-package flycheck-status-emoji
      :ensure t)
#+end_src
Some buffer specificities configuration like how to deal with trailing whitespaces or the
fill-column for example.
*** uniquify
#+begin_src emacs-lisp
;; Unify the buffer name style
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-after-kill-buffer-p t))
#+end_src
*** vlf
#+begin_src emacs-lisp
;; Open Large file
(use-package vlf
  :ensure t
  :config
  (require 'vlf-setup))
#+end_src
*** auto revert
#+begin_src emacs-lisp
  ;; Automatically reload files was modified by external program
  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode))
#+end_src
** Ibuffer
*** Helpers
#+begin_src emacs-lisp
  (defun ibuffer-clean ()
    "Clean automatically created buffers"
    (interactive)
    (ibuffer-unmark-all ?*)
    (ibuffer-mark-by-mode 'help-mode)
    (ibuffer-mark-by-mode 'magit-mode)
    (ibuffer-mark-by-mode 'occur-mode)
    (ibuffer-mark-by-mode 'grep-mode)
    (ibuffer-mark-by-mode 'dired-mode)
    (ibuffer-mark-by-mode 'completion-list-mode)
    (ibuffer-mark-by-mode 'compilation-mode)
    (ibuffer-mark-by-mode 'Man-mode)
    (ibuffer-mark-by-mode 'browse-kill-ring-mode)
    (ibuffer-mark-by-name-regexp "*anything*")
    (ibuffer-mark-by-name-regexp "*ESS*")
    (ibuffer-mark-by-name-regexp "*Shell Command Output*")
    (ibuffer-mark-by-name-regexp "*Compile-Log*")
    (ibuffer-mark-by-name-regexp "*vc-diff*")
    (ibuffer-do-delete))
#+END_SRC

** tab
#+begin_src emacs-lisp
;;(setq tab-bar-close-button-show nil)
#+end_src
** cursor and mouse
#+begin_src emacs-lisp
;; ËÆæÁΩÆÂÖâÊ†áÈ¢úËâ≤
;;(set-cursor-color "green2")
;; ËÆæÁΩÆÂÖâÊ†áÊ†∑Âºè
;;(setq-default cursor-type 'box)

(use-package frame
  :commands my/cursor-type-mode
  :config
  (setq-default cursor-type 'box)
  (setq-default cursor-in-non-selected-windows '(bar . 2))
  (setq-default blink-cursor-blinks 50)
  (setq-default blink-cursor-interval nil) ; 0.75 would be my choice
  (setq-default blink-cursor-delay 0.2)

  (blink-cursor-mode -1)

  (define-minor-mode my/cursor-type-mode
    "Toggle between static block and pulsing bar cursor."
    :init-value nil
    :global t
    (if my/cursor-type-mode
        (progn
          (setq-local blink-cursor-interval 0.75
                      cursor-type '(bar . 2)
                      cursor-in-non-selected-windows 'hollow)
          (blink-cursor-mode 1))
      (dolist (local '(blink-cursor-interval
                       cursor-type
                       cursor-in-non-selected-windows))
        (kill-local-variable `,local))
      (blink-cursor-mode -1))))
#+end_src

Never lose your cursor again
#+begin_src emacs-lisp
;; ÂàáÊç¢bufferÁÑ¶ÁÇπÊó∂È´ò‰∫ÆÂä®Áîª
(use-package  beacon
  :ensure t
  :hook (after-init . beacon-mode))
#+end_src

** Highlight
#+begin_src emacs-lisp
  ;; Parenthesis
  (use-package highlight-parentheses
    :ensure t
    :diminish 'highlight-parentheses-mode
    :config
    (add-hook 'prog-mode-hook #'highlight-parentheses-mode))

  ;; Highlight numbers for prog modes
  (use-package highlight-numbers
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))

  ;; Always hightlight current line
  (global-hl-line-mode t)
#+end_src
** Minor-mode activation
I use some minor modes based on some filetypes. This package is an helper which facilitates these
activations.

#+begin_src emacs-lisp
(use-package auto-minor-mode
  :ensure t)
#+end_src
** bookmark
** register
** mode
** Undo
#+BEGIN_SRC emacs-lisp
;; Undo-tree
(use-package undo-tree
  :config
  (setq undo-tree-visualizer-timestamps t)
  (setq undo-tree-visualizer-diff t)
  (setq undo-tree-auto-save-history t)
  ;; save all undo histories to this location
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  (defadvice undo-tree-make-history-save-file-name
      (after undo-tree activate)
    (setq ad-return-value (concat ad-return-value ".gz")))
  (global-undo-tree-mode)
  :defer t
  :diminish 'undo-tree-mode)
#+END_SRC

** recent file
Opening recent files is always an easy and fast shortcut. Some files should be ignored though. That
leads to this configuration

#+begin_src emacs-lisp
;; Builds a list of recently opened files
(use-package recentf
  :ensure t
  :config
  (setq recentf-max-saved-items 100
        recentf-max-menu-items 5
        recentf-save-file (concat user-emacs-directory ".cache/recentf")
        recentf-auto-cleanup 'never)
  (recentf-mode 1)

  (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
  (add-to-list 'recentf-exclude (expand-file-name (concat user-emacs-directory ".cache/")))
  (add-hook 'delete-terminal-functions (lambda (terminal) (recentf-save-list))))

#+END_SRC
** backups file
  When Emacs makes a backup file, its name is normally constructed by
  appending ‚Äò~‚Äô to the file name being edited; thus, the backup file for
  ‚Äòeval.c‚Äô would be ‚Äòeval.c~‚Äô.
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src
** auto-save
  Normally, the auto-save file name is made by appending ‚Äò#‚Äô to the
front and rear of the visited file name.  Thus, a buffer visiting file
‚Äòfoo.c‚Äô is auto-saved in a file ‚Äò#foo.c#‚Äô.
  #+begin_src emacs-lisp
    ;;The variable ‚Äòauto-save-interval‚Äô specifies how many characters there are between auto-saves.
    (setq-default auto-save-interval 100);;By default, it is 300.
    ;;Auto-saving also takes place when you stop typing for a while.
    (setq-default auto-save-timeout 15) ;;By default, it is 30 seconds.

    (defvar auto-save-directory "~/.emacs.d/auto-save/")
    (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))

    (when (not (file-exists-p auto-save-directory))
      (make-directory auto-save-directory t))
  #+end_src
** Editing
*** Navigation
This part is dedicated to the configuration for buffer (even large) navigation.
**** Scrolling (and fast please !)
#+begin_src emacs-lisp
  (use-package fast-scroll
    :ensure t
    :hook
    (fast-scroll-start      . (lambda () (flycheck-mode -1)))
    (fast-scroll-end        . (lambda () (flycheck-mode 1)))

    :config
    (fast-scroll-config)
    (fast-scroll-mode 1))

  ;; Disable re-center of the cursor to the middle of page when scroll hits top or bottom of the page
  (setq scroll-conservatively 101)

  (use-package scrollkeeper
    :disabled t
    :ensure quelpa
    :quelpa (scrollkeeper :fetcher github :repo "alphapapa/scrollkeeper.el")
    :general ([remap scroll-up-command] #'scrollkeeper-contents-up
              [remap scroll-down-command] #'scrollkeeper-contents-down))
#+end_src

By default, page scrolling should keep the point at the same visual position, rather than force it to
the top or bottom of the viewport. This eliminates the friction of guessing where the point has warped to.

As for per-line scrolling, I dislike the default behaviour of visually re-centring the point: it is too
aggressive as a standard mode of interaction. With the following setq-default, the point will stay at the top/bottom
of the screen while moving in that direction (use C-l to reposition it).
#+begin_src emacs-lisp
  (use-package emacs
    :disabled t
    :config
    (setq-default scroll-preserve-screen-position t)
    (setq-default scroll-conservatively 1) ; affects `scroll-step'
    (setq-default scroll-margin 0))
#+end_src

**** Preview
First, instead of jumping we simply can preview the jump.

#+BEGIN_SRC emacs-lisp
  (use-package goto-line-preview
    :ensure t
    :commands (goto-line-preview)
    :bind
    (("M-g g" . goto-line-preview)))
#+END_SRC
**** Ace jump
#+BEGIN_SRC emacs-lisp
  ;; Windows management: Quickly switch windows in Emacs
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreguound :height 3.0 :foreground "red")))))
      ))
  (use-package ace-jump-mode
    :ensure t
    :config
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+END_SRC
**** Remember last jump
Also, I tend to jump a lot for quick modification. So remembering the jump is absolute crucial in my
workflow.

#+BEGIN_SRC emacs-lisp
  (use-package goto-last-point
    :ensure t
    :functions (goto-last-point-mode)
    ;;:bind ("C-<" . goto-last-point)
    :config (goto-last-point-mode))
#+END_SRC
*** Searching
Double-saber is really helpful to reduce the result of a search after the search itself.

#+BEGIN_SRC emacs-lisp
  (use-package double-saber
    :ensure t
    :config
    (with-eval-after-load "ripgrep"
      (add-hook 'ripgrep-search-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Ripgrep finished"))))

    (with-eval-after-load "grep"
      (add-hook 'grep-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Grep finished"))))

    (with-eval-after-load "ggtags"
      (add-hook 'ggtags-global-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Global found")))))

  (with-eval-after-load "ivy"
    (add-hook 'ivy-occur-grep-mode-hook
              (lambda ()
                (double-saber-mode)
                (setq-local double-saber-start-line 5))))
#+END_SRC
*** Copy/Pasted/Delete
Baseline configuration for copy/pasting, nothing fancy.

#+begin_src emacs-lisp
(setq mouse-drag-copy-region nil
      select-enable-primary nil
      select-enable-clipboard t
      select-active-regions t)
#+end_src

Hungry deletion
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :diminish
    :init (setq hungry-delete-except-modes
              '(help-mode minibuffer-mode minibuffer-inactive-mode calc-mode))
    :hook (after-init . global-hungry-delete-mode)
    :config (setq-default hungry-delete-chars-to-skip " \t\f\v"))
#+end_src

*** Evil Nerd Commenter
Evil Nerd Commenter, a tool that helps you comment code efficiently.
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :bind
    (("C-c M-;" . c-toggle-comment-style)
     ("M-;" . evilnc-comment-or-uncomment-lines)))
#+END_SRC
*** expand region
#+begin_src emacs-lisp
  ;; Expand selected region by semantic units
  (use-package expand-region
    :ensure t
    :config
    (pending-delete-mode t)
     :bind ("C-=" . er/expand-region))
#+end_src

** recursive-edit
** fringe mode
The fringes are areas to the right and left side of an Emacs frame. They can be used to show status-related or contextual feedback
such as line truncation indicators, continuation lines, code linting markers, etc.

The default fringe width (*nil*) is 8 pixels on either side, which I approve of. It is possible to set the value of the *fringe-mode* to
something like *'(10 . 5)* which applies the varied width to the left and right side respectively.
Otherwise, we can use a single integer that controls both sides.

The use of *setq-default* is necessary, otherwise these values become buffer-local.
#+begin_src emacs-lisp
(use-package fringe
  :config
  (fringe-mode nil)
  (setq-default fringes-outside-margins nil)
  (setq-default indicate-buffer-boundaries nil)
  (setq-default indicate-empty-lines nil)
  (setq-default overflow-newline-into-fringe t))
#+end_src

* emacs capacity
** org
C-c C-, s : insert source block
M-x org-edit-src-code : edit source block
*** Global
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :config
    (setq
         org-startup-indented t
         org-startup-folded t
         org-show-following-heading t
         org-show-hierarchy-above t
         org-show-siblings '((default))
         org-src-fontify-natively t
         org-src-tab-acts-natively t
         org-hide-emphasis-markers t))
#+end_src
*** Faces
#+begin_src emacs-lisp

#+end_src
*** Org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src
*** Fancy priority
#+begin_src emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :hook
    (org-agenda-mode . org-fancy-priorities-mode)
    (org-mode . org-fancy-priorities-mode)
    :config
    (setq org-fancy-priorities-list
          '((?A . "‚ùó") (?B . "‚¨Ü") (?C . "‚¨á") (?D . "‚òï")
            (?1 . "‚ö°") (?2 . "‚Æ¨") (?3 . "‚ÆÆ") (?4 . "‚òï")
            (?I . "Important"))))
#+end_src

** PDF
*** Global
  #+begin_src emacs-lisp :tangle no
    (use-package pdf-tools
      :functions
      (pdf-history-backward
       pdf-history-forward
       pdf-links-action-perfom
       pdf-links-isearch-link
       pdf-view-enlarge
       pdf-view-shrink
       pdf-view-scale-reset
       pdf-view-fit-height-to-window
       pdf-view-fit-width-to-window
       pdf-view-fit-page-to-window
       pdf-view-next-page-command
       pdf-view-previous-page-command
       pdf-view-dark-minor-mode)


      :hook
      (pdf-view-mode . (lambda ()
                         (pdf-misc-size-indication-minor-mode)
                         (pdf-links-minor-mode)
                         (pdf-isearch-minor-mode)
                         (cua-mode 0)))

      :bind
      (:map pdf-view-mode-map
            ("/" . hydra-pdftools/body)
            ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
            ("<C-s>" . isearch-forward)
            ("g"  . pdf-view-first-page)
            ("G"  . pdf-view-last-page)
            ("l"  . image-forward-hscroll)
            ("h"  . image-backward-hscroll)
            ("j"  . pdf-view-next-page)
            ("k"  . pdf-view-previous-page)
            ("e"  . pdf-view-goto-page)
            ("u"  . pdf-view-revert-buffer)
            ("al" . pdf-annot-list-annotations)
            ("ad" . pdf-annot-delete)
            ("aa" . pdf-annot-attachment-dired)
            ("am" . pdf-annot-add-markup-annotation)
            ("at" . pdf-annot-add-text-annotation)
            ("y"  . pdf-view-kill-ring-save)
            ("i"  . pdf-misc-display-metadata)
            ("s"  . pdf-occur)
            ("b"  . pdf-view-set-slice-from-bounding-box)
            ("r"  . pdf-view-reset-slice))

      :hydra
      (hydra-pdftools (:color blue :hint nil)
                      "
                PDF tools

             Move  History   Scale/Fit                  Annotations     Search/Link     Do
          ------------------------------------------------------------------------------------------------
               ^^_g_^^      _B_    ^‚Üß^    _+_    ^ ^     _al_: list    _s_: search    _u_: revert buffer
               ^^^‚Üë^^^      ^‚Üë^    _H_    ^‚Üë^  ‚Ü¶ _W_ ‚Ü§   _am_: markup  _o_: outline   _i_: info
               ^^_p_^^      ^ ^    ^‚Ü•^    _0_    ^ ^     _at_: text    _F_: link      _d_: dark mode
               ^^^‚Üë^^^      ^‚Üì^  ‚ï≠‚îÄ^‚îÄ^‚îÄ‚îê  ^‚Üì^  ‚ï≠‚îÄ^ ^‚îÄ‚îê   _ad_: delete  _f_: search link
          _h_ ‚Üêpag_e_‚Üí _l_  _N_  ‚îÇ _P_ ‚îÇ  _-_    _b_     _aa_: dired
               ^^^‚Üì^^^      ^ ^  ‚ï∞‚îÄ^‚îÄ^‚îÄ‚ïØ  ^ ^  ‚ï∞‚îÄ^ ^‚îÄ‚ïØ   _y_:  yank
               ^^_n_^^      ^ ^  _r_eset slice box
               ^^^‚Üì^^^
               ^^_G_^^
          "
                      ("<ESC>" nil "quit")
                      ("al" pdf-annot-list-annotations)
                      ("ad" pdf-annot-delete)
                      ("aa" pdf-annot-attachment-dired)
                      ("am" pdf-annot-add-markup-annotation)
                      ("at" pdf-annot-add-text-annotation)
                      ("y"  pdf-view-kill-ring-save)
                      ("+" pdf-view-enlarge :color red)
                      ("-" pdf-view-shrink :color red)
                      ("0" pdf-view-scale-reset)
                      ("H" pdf-view-fit-height-to-window)
                      ("W" pdf-view-fit-width-to-window)
                      ("P" pdf-view-fit-page-to-window)
                      ("n" pdf-view-next-page-command :color red)
                      ("p" pdf-view-previous-page-command :color red)
                      ("d" pdf-view-dark-minor-mode)
                      ("b" pdf-view-set-slice-from-bounding-box)
                      ("r" pdf-view-reset-slice)
                      ("g" pdf-view-first-page)
                      ("G" pdf-view-last-page)
                      ("e" pdf-view-goto-page)
                      ("o" pdf-outline)
                      ("s" pdf-occur)
                      ("i" pdf-misc-display-metadata)
                      ("u" pdf-view-revert-buffer)
                      ("F" pdf-links-action-perfom)
                      ("f" pdf-links-isearch-link)
                      ("B" pdf-history-backward :color red)
                      ("N" pdf-history-forward :color red)
                      ("l" image-forward-hscroll :color red)
                      ("h" image-backward-hscroll :color red))

      :magic ("%PDF" . pdf-view-mode)

      :config
      ;; Install what need to be installed !
      (pdf-tools-install t t t)

      ;; open pdfs scaled to fit page
      (setq-default pdf-view-display-size 'fit-page)

      ;; automatically annotate highlights
      (setq pdf-annot-activate-created-annotations t)

      ;; more fine-grained zooming
      (setq pdf-view-resize-factor 1.1))

    (use-package pdf-view-restore
      :ensure t
      :after pdf-tools
      :hook
      (pdf-view-mode-hook . pdf-view-restore-mode))
  #+end_src
*** Grepping
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package pdfgrep
    :config
    (pdfgrep-mode))
#+END_SRC
** vterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :config
  (setq vterm-max-scrollback 10000))
#+end_src
** which-key
#+BEGIN_SRC emacs-lisp
  ;; Display available keybindings in a popup
  (use-package which-key
    :ensure t
    :diminish
    :config
;;    ;;Manual Activation
;;    (setq which-key-show-early-on-C-h nil)
;;    (setq which-key-idle-delay most-positive-fixnum)
;;    (setq which-key-idle-secondary-delay 0.05)
    (setq which-key-idle-delay 0.5)
    (setq which-key-popup-type 'side-window)
    (setq which-key-show-prefix 'echo)
    (setq which-key-max-display-columns 4)
    (setq which-key-separator " ‚Üí " )
    (setq which-key-special-keys nil)
    (which-key-mode 1))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp :tangle no
(use-package dashboard
  :ensure t
  :custom
  (dashboard-set-heading-icons t)
  (dashboard-set-navigator t)
  :config
  ;; Set the title
  (setq dashboard-banner-logo-title
    (concat "GNU Emacs " emacs-version " kernel "
        (car (split-string (shell-command-to-string "uname -r") "-"))
        " x86_64 Manjora Linux GTK " gtk-version-string))
  ;;(setq dashboard-startup-banner
  ;;  (expand-file-name "emacs.png" user-emacs-directory))
  (setq dashboard-startup-banner 'logo
  ;;      dashboard-center-content t
        dashboard-set-file-icons t)

  (global-page-break-lines-mode)
  (setq dashboard-page-separator "\n\f\f\n")
  (setq dashboard-items '((recents . 12)))
  (setq dashboard-modify-heading-icons '((recents . "file-text")))

  (dashboard-setup-startup-hook))
#+END_SRC
** multiple cursors
#+begin_src emacs-lisp
;; C-x r t string-rectangle
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c"   . mc/edit-lines)
         ("C->"           . mc/mark-next-like-this)
         ("C-<"           . mc/mark-previous-like-this)
         ("C-c C-<"       . mc/mark-all-like-this)
         ("C-M->"         . mc/skip-to-next-like-this)
         ("C-M-<"         . mc/skip-to-previous-like-this)
         ("s-<mouse-1>"   . mc/add-cursor-on-click)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click)
         :map mc/keymap
         ("C-|" . mc/vertical-align-with-space)))

;; Smartly select region, rectangle, multi cursors
;;(use-package smart-region
;;  :ensure t
;;  :hook (after-init . smart-region-on))

;; Edit multiple regions simultaneously in a buffer or a region
;;(use-package iedit
;;  :ensure t
;;  :config
;;  (delete-selection-mode t))
#+end_src
** System
*** Docker
#+begin_src emacs-lisp
;; Manage docker from Emacs.
  (use-package docker
    :ensure t
    :commands (docker))

  (use-package docker-api
    :ensure t)

  (use-package docker-tramp
    :ensure t)

  (use-package dockerfile-mode
    :ensure t)
#+end_src
*** SSH
#+begin_src emacs-lisp
;; Support for remote logins using ssh in Emacs
  (use-package ssh :ensure t)
;; A deployment plugin via Tramp for Emacs.
  (use-package ssh-deploy :ensure t)
#+end_src
*** Cron
#+BEGIN_SRC emacs-lisp
  (use-package crontab-mode
    :ensure t)
#+END_SRC
*** Monitoring
#+begin_src emacs-lisp
;; tiny graphical system monitor
  (use-package symon
    :ensure t)
#+end_src
*** Clipboard
Read clipboard history from Parcellite/Clipit on Linux and Flycut on OS X
#+begin_src emacs-lisp
  (use-package cliphist
    :ensure t)
#+end_src

*** systctl
#+begin_src emacs-lisp
;; Manage sysctl through Emacs
  (use-package sysctl :ensure t :commands (sysctl))
#+end_src
*** Locate
#+begin_src emacs-lisp
  (use-package ellocate
    :ensure t
    :commands (ellocate))
#+end_src
*** System package
#+begin_src emacs-lisp
;; functions to manage system packages
  (use-package system-packages
      :ensure t
      :config
      (setq system-packages-supported-package-managers
            '(
              (trizen .
                      ((default-sudo . nil)
                       (install . "trizen -S --noconfirm")
                       (search . "trizen -Ss")
                       (uninstall . "trizen -Rns")
                       (update . "trizen -Syu --noconfirm")
                       (clean-cache . "trizen -Sc")
                       (log . "cat /var/log/trizen.log")
                       (get-info . "trizen -Qi")
                       (get-info-remote . "trizen -Si")
                       (list-files-provided-by . "trizen -Ql")
                       (verify-all-packages . "trizen -Qkk")
                       (verify-all-dependencies . "trizen -Dk")
                       (remove-orphaned . "trizen -Rns $(trizen -Qtdq)")
                       (list-installed-packages . "trizen -Qe")
                       (list-installed-packages-all . "trizen -Q")
                       (list-dependencies-of . "trizen -Qi")
                       (noconfirm . "--noconfirm")))
              )

            system-packages-use-sudo nil
            system-packages-package-manager 'trizen)
      )
#+end_src
** Internet/network
*** IRC
Circe, a Client for IRC in Emacs, see [[https://github.com/jorgenschaefer/circe/wiki/Configuration][Circe Configuration]].
Setting nickserv-password: (setq auth-sources '("~/.authinfo.gpg"))
**** Global
#+begin_src emacs-lisp
  (use-package circe
    :ensure t
    :bind ("<S-f2>" . circe-init)
    :hook
    (circe-chat-mode . disable-global-facilities)

    :config

    ;; Defining the networks
    (setq circe-network-options
           '(("Freenode"
             :tls t
             :nick "sgb20"
             :channels ("#emacs")
             ;;:nickserv-password my-irc-password
             :server-buffer-name "‚áÑ freenode")))

    ;; Completion
    (setq circe-use-cycle-completion t)

    ;; Spam information reduction
    (setq circe-reduce-lurker-spam t)

    ;; Tracking
    (setq lui-track-bar-behavior 'before-switch-to-buffer)
    (enable-lui-track-bar)

    ;; spell checking
    (add-hook 'circe-channel-mode-hook 'turn-on-flyspell)
    (setq lui-max-buffer-size 30000
          lui-flyspell-p t
          lui-flyspell-alist '(("." "american")))

    ;; Formatting / Visual
    (enable-circe-color-nicks)
    (setq lui-time-stamp-position 'right-margin
          lui-time-stamp-format "[%Y-%m-%d %H:%M:%S]"
          lui-fill-type nil)
    (enable-circe-display-images)

    (defun my-lui-setup ()
      (setq
       fringes-outside-margins t
       right-margin-width 21
       word-wrap t
       wrap-prefix "    "))
    (add-hook 'lui-mode-hook 'my-lui-setup)

    ;; Connection
    (defun circe-network-connected-p (network)
      "Return non-nil if there's any Circe server-buffer whose
    `circe-netwok' is NETWORK."
      (catch 'return
        (dolist (buffer (circe-server-buffers))
          (with-current-buffer buffer
            (if (string= network circe-network)
                (throw 'return t))))))

     (defun circe-maybe-connect (network)
       "Connect to NETWORK, but ask user for confirmation if it's
    already been connected to."
       (interactive "sNetwork: ")
       (if (or (not (circe-network-connected-p network))
               (y-or-n-p (format "Already connected to %s, reconnect?" network)))
           (circe network)))

     (defun my-irc-password (server)
       "Return the password for the `SERVER'."
       (my:auth-source-get-passwd :host server))

     ;; Shortcut
     (defun circe-init ()
       "Connect to IRC"
       (interactive)
       (if (circe-network-connected-p "Freenode")
           (switch-to-buffer "‚áÑ freenode")
         (progn
           (circe-maybe-connect "Freenode"))))
    )
#+end_src
**** Logging
#+begin_src emacs-lisp
  (use-package lui-logging
    :commands (enable-lui-logging))

#+end_src
**** Autopasting
#+begin_src emacs-lisp
  (use-package lui-autopaste
    :config
    (add-hook 'circe-channel-mode-hook 'enable-lui-autopaste)
    (defvar lui-autopaste-service-gist-url nil
      "The URL for the last gist.")

    (defun lui-autopaste-service-gist (text)
      "Paste TEXT to github using gist.el."
      ;; It's so great gist works with callbacks! It's so much fun to
      ;; work around that!
      (setq lui-autopaste-service-gist-url 'waiting)
      (with-temp-buffer
        (insert text)
        (gist-region (point-min) (point-max) nil
                     (lambda (gist)
                       (when (eq lui-autopaste-service-gist-url
                                 'waiting)
                         (setq lui-autopaste-service-gist-url
                               (oref gist :html-url)))))) ;; FIXME: this provokes a Warning: Unknown slot ‚Äò:html-url‚Äô
      (let ((wait 0))
        (while (and (< wait 10)
                    (eq lui-autopaste-service-gist-url
                        'waiting))
          (sit-for 0.1 )
          (setq wait (1+ wait))))
      (if (eq lui-autopaste-service-gist-url 'waiting)
          (progn
            (setq lui-autopaste-service-gist-url nil)
            (error "Couldn't create gist"))
        (prog1 lui-autopaste-service-gist-url
          (setq lui-autopaste-service-gist-url nil))))


    (setq lui-autopaste-function 'lui-autopaste-service-gist))
#+end_src
**** Some coloring
#+begin_src emacs-lisp
  (use-package lui-irc-colors
    :after circe
    :config
    (add-to-list 'lui-pre-output-hook 'lui-irc-colors))
#+end_src
**** Notification
#+begin_src emacs-lisp :tangle no
  (use-package circe-notifications
    :ensure t
    :commands (enable-circe-notifications)
    :custom (circe-notifications-alert-style 'sauron-mode-line-style)
    :hook
    (circe-server-connected . enable-circe-notifications))
#+end_src
*** RSS
**** Global
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :commands (elfeed)
    :no-require t
    :bind (([f9] . elfeed))

    :config
    ;; Change the storage directory
    (setq elfeed-db-directory "~/org/elfeed")

    ;; Formatting dates
    (setq elfeed-search-date-format '("%Y-%m-%d %H:%M" 17 :left)))
#+end_src
**** Org connection
github homepage: https://github.com/remyhonig/elfeed-org
C-c C-o:org-open-at-point
#+begin_src emacs-lisp :tangle no
  (use-package elfeed-org
    :ensure t
    :no-require t
    :config
    (when (file-exists-p "~/org/organisation/rss.org")
      (progn
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/org/organisation/rss.org"))
        (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id)))

    (elfeed-update-background-start))
#+end_src
**** Goodies
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-goodies
    :ensure t
    :disabled t
    :config
    (elfeed-goodies/setup))
#+END_SRC
**** Notification part
#+begin_src emacs-lisp :tangle no
  (use-package sauron-elfeed
    :config
    (cl-loop for feed in elfeed-feeds
             do (when (member 'mustread (cdr feed))
                  (puthash (car feed) 3 sauron-elfeed-prio-hash))))

#+end_src
** Helm dash
#+BEGIN_SRC emacs-lisp
(use-package helm-dash
  :ensure t)
#+END_SRC
** Writing
*** Inspiration helpers
As I write papers, it is useful to have some helper to start to have the inspiration.
#+begin_src emacs-lisp
  (use-package academic-phrases
    :ensure t)

  (use-package mw-thesaurus
    :disabled t
    :quelpa
    (mw-thesaurus :fetcher github :repo "agzam/mw-thesaurus.el")
    :commands (mw-thesaurus-lookup-at-point))
#+end_src
*** Grammar checking
**** For english
#+begin_src emacs-lisp
  (use-package grammarly
    :ensure t)
#+end_src
*** Translation
**** WordReference
#+begin_src emacs-lisp
(use-package wordreference
  :load-path default-plugin-dir
  :commands (wordreference wordreference-at-point))
#+end_src
**** English Teacher
#+begin_src emacs-lisp
(use-package english-teacher
  :load-path "~/.emacs.d/third_parties/english-teacher.el"
  ;;:bind (("C-' C-l" . english-teacher-smart-translation))
  :config (setq english-teacher-backend 'baidu
                              english-teacher-show-result-function 'english-teacher-eldoc-show-result-function)
  :hook ((Info-mode-hook eww-mode-hook help-mode-hook) . english-teacher-follow-mode))
#+end_src
**** google translate
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/third_parties/go-translate")
(require 'go-translate)
  (setq go-translate-base-url "https://translate.google.cn")
  (setq go-translate-local-language "zh-CN")

  (setq go-translate-buffer-follow-p t)       ; ÁøªËØëÂÆåÊàêÂêéÔºåÊÄªÊòØÂ∞ÜÂÖâÊ†áÂàáÊç¢Âà∞ÁøªËØëÁªìÊûúÁ™óÂè£
  (setq go-translate-buffer-source-fold-p t)  ; Âú®ÁªìÊûúÈ°µÈù¢ÔºåÊäòÂè†Ê∫êÊñáÊú¨„ÄÇÂèØ‰ª•ÈÄöËøáÂõûËΩ¶ÊàñÈº†Ê†áÁÇπÂáªÂ±ïÂºÄ
;;  (setq go-translate-buffer-window-config ..) ; Êõ¥ÊîπÁøªËØëÁ™óÂè£ÁöÑ‰ΩçÁΩÆÂíåÊ†∑Âºè

  ;; ËÆæÁΩÆËæìÂÖ•È£éÊ†º„ÄÇÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÊòØÈÄöËøá Minibuffer ÊñπÂºèË°•ÂÖ®Áî®Êà∑ËæìÂÖ•
  ;; ÂèØ‰ª•‰øÆÊîπ‰∏∫ `go-translate-inputs-noprompt` Êàñ `go-translate-inputs-current-or-prompt`
  ;; ÂâçËÄÖË°®Á§∫Áõ¥Êé•ÁøªËØëÈÄâ‰∏≠ÂÜÖÂÆπÊàñÂÖâÊ†á‰∏ãÂçïËØçÔºõÂêéËÄÖË°®Á§∫Ëã•ÂÖâÊ†á‰∏ãÊ≤°ÂÜÖÂÆπÂàôÊâìÂºÄ Minibuffer ËØªÂèñÂÜÖÂÆπ
  (setq go-translate-inputs-function #'go-translate-inputs-current-or-prompt)
#+end_src
** Language checking
*** Spelling
Configuration of the (fly) spelling for emacs. For spelling, I am using aspell.

#+begin_src shell :tangle no
sudo pacman -S aspell
#+end_src

#+begin_src emacs-lisp
    ;; Flyspell
    (use-package flyspell
      :ensure t
      :bind (:map flyspell-mode-map
      ;;          ("C-," . nil)
                ("C-;" . nil))
      :config
      ;; Some skipping
      (add-to-list 'ispell-skip-region-alist '("^#+begin_src" . "^#+end_src"))

      (setq flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
      :diminish 'flyspell-mode)

    ;; Correct the misspelled word in a popup menu
    (use-package flyspell-popup
      :ensure t
      :config
      (define-key flyspell-mode-map (kbd "C-,") #'flyspell-popup-correct)
      (define-key popup-menu-keymap (kbd "C-j") 'popup-next)
      (define-key popup-menu-keymap (kbd "C-k") 'popup-previous)
      (define-key popup-menu-keymap (kbd "C-l") 'popup-select))
#+end_src
*** English checking
lang-tool is actually supported by emacs through a dedicated mode which allows to have syntax and
typography checking.

#+begin_src shell :tangle no
sudo pacman -S languagetool
#+end_src

To check current buffer and show warnings.
M-x langtool-check
To finish checking. All langtool marker is removed.
M-x langtool-check-done

#+BEGIN_SRC emacs-lisp :tangle no
(use-package langtool
  :disabled t
  :ensure quelpa
  :quelpa (langtool :fetcher github :repo "mhayashi1120/Emacs-langtool")
  :init
  (setq langtool-java-classpath
        "/usr/share/languagetool:/usr/share/java/languagetool/*"))
  ;;(setq langtool-language-tool-server-jar "~/work/tools/src/languagetool/languagetool/languagetool-server.jar"))
#+END_SRC
** Chinese input
#+BEGIN_SRC emacs-lisp
(use-package pyim
  :init
  (use-package posframe :defer t)
  :custom
  (default-input-method "pyim")
  (pyim-default-scheme 'quanpin)
  (pyim-page-tooltip 'posframe)
  (pyim-page-length 9)
  :config
  (pyim-isearch-mode 1)
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-isearch-mode
                  pyim-probe-org-structure-template))
  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))
  :bind
  ("M-j" . pyim-convert-string-at-point)) ; M-j Âº∫Âà∂Â∞ÜÂÖâÊ†áÂâçÁöÑÊãºÈü≥Â≠óÁ¨¶‰∏≤ËΩ¨Êç¢‰∏∫‰∏≠Êñá„ÄÇ

(use-package pyim-basedict
  :after pyim
  :config (pyim-basedict-enable))
#+END_SRC

** format
*** format-all
We can globally reformat the buffer relying on external tool. =format-all= is here for this.

#+begin_src emacs-lisp
  (use-package format-all
    :ensure t
    :commands (format-all-buffer format-all-mode))
  (setq clang-format-style-option "google")
#+end_src
*** editor configs
#+begin_src emacs-lisp
  ;; Respect editor configs
  (use-package editorconfig
    :ensure t
    :diminish editorconfig-mode
    :config
    (editorconfig-mode 1))
#+end_src
*** Indentation
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :commands (highlight-indent-guides-mode)
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character));;fill, column, character, bitmap
#+end_src

* emacs pleasure
** 2048 game
#+BEGIN_SRC emacs-lisp
(use-package 2048-game
  :commands (2048-game))
#+END_SRC
** Music
*** Global
#+begin_src shell :tangle no
sudo pacman -S mpv
#+end_src
#+begin_src emacs-lisp
  (use-package emms
    :ensure t
    :commands (emms emms-browse-by-artist)
    :bind
    (("<f5>"            . emms-browse-by-artist)
     ("S-<f5>"          . emms-playlist-mode-go)
     ("<XF86AudioPlay>" . emms-pause)
     ("<XF86AudioStop>" . emms-stop)
     ("<XF86AudioPrev>" . emms-previous)
     ("<XF86AudioNext>" . emms-next))

    :config

    (emms-all)

    ;; Use mpv player
    (setq emms-player-list '(emms-player-mpv))

    ;; A minor macos adaptation
    (when (eq system-type 'darwin)
      (setq emms-source-file-gnu-find "/usr/local/bin/gfind"))

    ;; Some behaviour definition
    (setq later-do-interval 0.0001
          emms-directory "~/.emacs.d/emms"
          emms-playlist-buffer-name "*Music*"
          emms-source-file-default-directory (expand-file-name "~/Music")
          emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find
          emms-show-format "NP: %s"
          emms-playlist-default-major-mode 'emms-playlist-mode
          emms-repeat-playlist t
          emms-mode-line-mode-line-function nil  ;; Don't want any info in the mode line
          emms-mode-line-titlebar-function 'emms-mode-line-playlist-current) ;; Put info in the titlebar

    ;; Visualisation activation/deactivation
    (emms-mode-line nil)
    ;; (emms-playing-time-disable-display)

    ;; Enable cache
    (when (fboundp 'emms-cache)
      (emms-cache 1))

    ;; Adapt track description format
    (defun track-description (track)
      "Return a description of the current TRACK."
      (if (and (emms-track-get track 'info-artist)
               (emms-track-get track 'info-title))
          (let ((pmin (emms-track-get track 'info-playing-time-min))
                (psec (emms-track-get track 'info-playing-time-sec))
                (ptot (emms-track-get track 'info-playing-time))
                (art  (emms-track-get track 'info-artist))
                (tit  (emms-track-get track 'info-title))
                (alb  (emms-track-get track 'info-album)))
            (cond ((and pmin psec) (format "%s - %s - %s [%02d:%02d]" art alb tit pmin psec))
                  (ptot (format  "%s - %s - %s [%02d:%02d]" art alb tit (/ ptot 60) (% ptot 60)))
                  (t (emms-track-simple-description track))))
        (emms-track-simple-description track)))
    (setq emms-track-description-function 'track-description)

    ;; taken from http://emacs.stackexchange.com/questions/21747/emms-how-can-i-have-a-progress-bar?rq=1
    (defun emms-indicate-seek (_sec)
      "Show the progress bar when seek."
      (let* ((total-playing-time (emms-track-get
                                  (emms-playlist-current-selected-track)
                                  'info-playing-time))
             (elapsed/total (/ (* 100 emms-playing-time) total-playing-time)))
        (with-temp-message (format "[%-100s] %2d%% ([%02d:%02d]/[%02d:%02d])"
                                   (make-string elapsed/total ?=)
                                   elapsed/total
                                   (/ emms-playing-time 60) (% emms-playing-time 60)
                                   (/ total-playing-time 60) (% total-playing-time 60))
          (sit-for 2))))
    (add-hook 'emms-player-seeked-functions #'emms-indicate-seek 'append))

  (use-package emms-info-libtag
    :after emms
    :config

    (setq emms-info-asynchronously nil
          emms-info-functions '(emms-info-libtag)))
#+end_src
*** Tagging using emms
I actually use this part for minor correction. The tags are done when abcde is converting the cd
#+begin_src emacs-lisp
  (use-package emms-mark-ext
    :ensure t
    :hook
    (emms-playlist-mode . emms-mark-ext-hook)
    :commands (emms-mark-ext-hook))
#+end_src
*** Browser
#+begin_src emacs-lisp
  (use-package emms-browser
    :after emms
    :hook
    (emms-browser-show-display . (lambda () (hl-line-mode 1)))

    :config
    (emms-browser-make-filter "all-files" (emms-browser-filter-only-type 'file))

    (setq emms-browser-info-artist-format "%i‚ò¢ %n"
          emms-browser-info-album-format "%i%cS [%y] %n"
          emms-browser-info-title-format "%i‚ô™ %T. %t [%d]"
          emms-browser-playlist-info-album-format "%cS %a - %A : "
          emms-browser-playlist-info-title-format "%T. %t [%d]"))
#+end_src

** kana
#+BEGIN_SRC emacs-lisp
(use-package kana
  :ensure t)
#+END_SRC
** eaf
#+begin_src emacs-lisp
  (use-package eaf
    :disabled t
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
    :custom
    (eaf-find-alternate-file-in-dired t)
    :config
    (setq eaf-browser-default-search-engine "Bing")
    (setq eaf-browser-search-engines '(("Baidu" . "https://www.baidu.com/s?wd=%s")
                                     ("Bing" . "https://cn.bing.com/search?q=%s")))
    (eaf-setq eaf-browse-blank-page-url "https://www.baidu.com")

    (eaf-setq eaf-browser-remember-history "true")
    ;;(eaf-setq eaf-browser-default-zoom "1.5")
    (eaf-setq eaf-terminal-font-family "WenQuanYi Micro Hei")
    (eaf-setq eaf-browser-dark-mode "false")

    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    (eaf-bind-key take_photo "p" eaf-camera-keybinding))
#+end_src
** command log
  ;; Display used hotkeys in another window
  ;;(use-package command-log-mode
  ;;  :diminish command-log-mode)


* citre
#+begin_src emacs-lisp :tangle no
  (use-package citre
    :ensure t
    :defer t
    :init
    ;; This is needed in `:init' block for lazy load to work.
    (require 'citre-config)
    ;; Bind your frequently used commands.
    (global-set-key (kbd "M-.") 'citre-jump)
    (global-set-key (kbd "M-,") 'citre-jump-back)
    (global-set-key (kbd "C-x c p") 'citre-ace-peek)
    :config
    (setq
     ;; Set this if readtags is not in your path.
     ;;citre-readtags-program "/path/to/readtags"
     ;; Set this if you use project management plugin like projectile.  It's
     ;; only used to display paths relatively, and doesn't affect actual use.
     citre-project-root-function #'projectile-project-root))
#+end_src
* embark
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))

(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
* Completion
This part focuses on completion configuration. Language specific configurations are not done here
but in the dedicate language configuration part. This section is just for global configuration.
** Compdef
#+begin_src emacs-lisp
(use-package compdef :ensure t)
#+end_src
** Ivy/swipper/counsel
I do prefer vertical completion, which is why I use extensively Ivy and extensions.
#+begin_src emacs-lisp :tangle no
(ivy-mode)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "C-h f") 'counsel-describe-function)
(global-set-key (kbd "C-h v") 'counsel-describe-variable)
(global-set-key (kbd "C-h o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src
#+begin_src emacs-lisp
  ;; Generic completion frontend
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  ;; Enhance M-x
  (use-package amx
    :ensure t
    :init (setq amx-history-length 20))

  (global-set-key (kbd "C-x C-f") #'counsel-find-file)
  (global-set-key (kbd "C-c r") #'counsel-recentf)

  (use-package flx :ensure t)
  (use-package ivy-hydra :ensure t)
  (use-package ivy
    :ensure t
    :diminish 'ivy-mode
    :config
    (ivy-mode t)
    (setq ivy-display-style 'fancy
          ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
          ivy-use-selectable-prompt t)
    ;; make everything fuzzy except swiper
    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t . ivy--regex-fuzzy))))

  (global-set-key (kbd "C-r") #'swiper)
  (global-set-key (kbd "C-s") #'swiper)

  (use-package ivy-rich
    :ensure t
    :config
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

  ;; Show ivy frame using posframe
  (use-package ivy-posframe
    :ensure t
    :custom
    (ivy-display-function #'ivy-posframe-display-at-frame-center)
    ;; (ivy-posframe-width 130)
    ;; (ivy-posframe-height 11)
    (ivy-posframe-parameters
      '((left-fringe . 5)
        (right-fringe . 5)))
    :custom-face
    (ivy-posframe ((t (:background "#282a36"))))
    (ivy-posframe-border ((t (:background "#6272a4"))))
    (ivy-posframe-cursor ((t (:background "#61bfff"))))
    :hook
    (ivy-mode . ivy-posframe-enable))
#+end_src
** Helm
I use Helm for some specific cases which requires an important visibility space completion.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :functions helm-show-completion-default-display-function
    :config
    (setq helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
          helm-quick-update t ; do not display invisible candidates
          helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
          helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
          helm-show-completion-display-function #'helm-show-completion-default-display-function
          helm-split-window-default-side 'below ;; open helm buffer in another window
          helm-split-window-inside-p t ;; open helm buffer inside current window, not occupy whole other window
          helm-candidate-number-limit 200 ; limit the number of displayed canidates
          helm-move-to-line-cycle-in-source nil ; move to end or beginning of source when reaching top or bottom of source.
          )
    )
#+end_src
** Company
In order to have inline completion, really important for coding, I use company. However I adapted
some facing attributes. Each language is also adding its backend when needed. Therefore, only global
configuration here.

#+begin_src emacs-lisp
;; Company mode
;;  (use-package company
;;    :diminish 'company-mode
;;    :config
;;    (setq company-tooltip-align-annotations t)
;;    (add-hook 'after-init-hook 'global-company-mode))

(use-package company
  :ensure t
  :hook
  (emacs-lisp-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-elisp))))
  :config

  ;; Global
  (setq company-idle-delay 1
        company-minimum-prefix-length 1
        company-idle-delay 0.0 ;;dafault is 0.2
        company-show-numbers t
        company-tooltip-limit 20)

  ;; using child frame
  (use-package company-posframe
    :ensure t
    :hook (company-mode . company-posframe-mode))

  ;; Facing
  (unless (face-attribute 'company-tooltip :background)
    (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
    (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
    (set-face-attribute 'company-preview nil :background "black")
    (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
    (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
    (set-face-attribute 'company-scrollbar-fg nil :background "gray40"))

  ;; Default backends
  (setq company-backends '(company-capf company-files))

  ;; Activating globally
  (global-company-mode t))

(use-package company-quickhelp
  :ensure t
  :after company
  :config
  (company-quickhelp-mode 1))

;; A company front-end with icons
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))
#+end_src
** Templating
I use templates for 2 use cases: the buffer edition and the file specific templates. Both are relying on *yasnippet*.

*** Edition templates
The default configuration of yasnippet consists of activating it and plugging it with company.
Ivy-yasnippet is used for snippet discovery.
#+BEGIN_SRC emacs-lisp
;; Yasnippet, a template system for emacs
  (use-package yasnippet
    :ensure t
    :config

    ;; Adding yasnippet support to company
    (eval-after-load 'company
      '(lambda ()
         (add-to-list 'company-backends 'company-yasnippet)))

    ;; Add third parties snippets
    (defvar third-parties-snippet-dir (format "%s/third_parties/snippets" user-emacs-directory)
      "Directory containing my own snippets")

    (defun third-parties-snippets-initialize ()
      (add-to-list 'yas-snippet-dirs 'third-parties-snippet-dir t)
      (yas-load-directory third-parties-snippet-dir t))

    (eval-after-load 'yasnippet '(third-parties-snippets-initialize))

    ;; Activate global
    (yas-global-mode))

  ;; Load official snippets
  (use-package yasnippet-snippets
    :ensure t)
  (use-package yasnippet-classic-snippets
    :ensure t)

  ;; Connect with ivy to have a list on demand
  (use-package ivy-yasnippet
    :ensure t)

#+END_SRC
*** Filetype templates
This part is using yatemplate (an over-layer of yasnippet) coupled with auto-insert to have a set of
file type dedicated templates. The templates are available in =third_parties/templates= directory.

To put some predefined text at the beginning of the buffer.
M-x *auto-insert*

#+begin_src emacs-lisp
  (use-package yatemplate
    :ensure t
    :after yasnippet
    :config

    ;; Define template directory
    (setq yatemplate-dir (concat user-emacs-directory "/third_parties/templates"))

    ;; Coupling with auto-insert
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist)
    ;; (add-hook 'find-file-hook 'auto-insert)
    )
#+end_src
** Prescient
Prescient helps to sort candidates by last used first and then sorting by length.

#+begin_src emacs-lisp
  (use-package prescient
    :ensure t
    :config (prescient-persist-mode))
  ;;Disabled for now because it seems to be [[broken and unmaintained][https://github.com/raxod502/prescient.el/issues/65]] (as of [2020-09-06 Sun]).
  (use-package ivy-prescient
    :disabled
    :ensure t
    :config (ivy-prescient-mode))

  (use-package company-prescient
    :ensure t
    :config (company-prescient-mode))
#+end_src
** eldoc
#+begin_src emacs-lisp
  ;; Show the argument list of a function in the echo area
(use-package eldoc
  :diminish eldoc-mode
  :commands turn-on-eldoc-mode
  :defer t)
#+end_src

* Compilation
** compilation
#+begin_src emacs-lisp
  (use-package compile
    :defer
    :diminish compilation-in-progress
    :init
    (setq compilation-scroll-output t)
    :config
    (setq compilation-always-kill t)
    (setq compilation-ask-about-save nil)
    (setq compilation-scroll-output 'first-error)
    )
#+end_src

** Flychecking
#+begin_src emacs-lisp
  ;; Disable checking doc
  (use-package flycheck
    :ensure t
    :commands (flycheck-error-list-set-filter flycheck-next-error flycheck-previous-error flycheck-first-error)
    :hydra
    (hydra-flycheck (:pre (progn (setq hydra-hint-display-type t) (flycheck-list-errors))
                     :post (progn (setq hydra-hint-display-type nil) (quit-windows-on "*Flycheck errors*"))
                     :color teal :hint nil)
                    "Errors"
                    ("f"  flycheck-error-list-set-filter                            "Filter")
                    ("j"  flycheck-next-error                                       "Next")
                    ("k"  flycheck-previous-error                                   "Previous")
                    ("gg" flycheck-first-error                                      "First")
                    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
                    ("<" hydra-project/body "back")
                    ("q"   nil "cancel" :color blue))

    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message) line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))
    )
#+end_src
** Keybinding
#+begin_src emacs-lisp
  (defhydra hydra-next-error (global-map "C-x")
      "
  Compilation errors:
  _j_: next error        _h_: first error    _q_uit
  _k_: previous error    _l_: last error
  "
      ("`" next-error     nil)
      ("j" next-error     nil :bind nil)
      ("k" previous-error nil :bind nil)
      ("h" first-error    nil :bind nil)
      ("l" (condition-case err
               (while t
                 (next-error))
             (user-error nil))
       nil :bind nil)
      ("q" nil            nil :color blue))
#+end_src
* Project management
** Configuration projectile
The commands are based on http://endlessparentheses.com/improving-projectile-with-extra-commands.html?source=rss
#+BEGIN_SRC emacs-lisp
;; ripgrep
(use-package rg
  :ensure t)

;; A project interaction library
(use-package projectile
  :ensure t
  :after (rg)
  :config
  (setq projectile-project-search-path '("~/dev"))
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (projectile-global-mode)
  :init
  (setq projectile-cache-file (concat user-emacs-directory ".cache/projectile.cache")
        projectile-known-projects-file (concat user-emacs-directory
                                               ".cache/projectile-bookmarks.eld"))
  (add-hook 'find-file-hook (lambda ()
                              (unless recentf-mode (recentf-mode)
                                      (recentf-track-opened-file))))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :bind
  (:map projectile-mode-map ("C-c p s p" . rg-project))
  :diminish 'projectile-mode)
#+END_SRC
** Completion
#+BEGIN_SRC emacs-lisp
    (use-package counsel-projectile
      :ensure t
      :after projectile
      :functions
      (counsel-projectile-find-file-in-directory
       counsel-projectile-ibuffer
       counsel-projectile-kill-buffers
       counsel-projectile-multi-occur
       counsel-projectile-recentf
       counsel-projectile-remove-known-project
       counsel-projectile-cleanup-known-projects
       counsel-projectile-cache-current-file
       counsel-projectile-invalidate-cache
       ggtags-update-tags ;; FIXME: a require should be put somewhere maybe
       )

      :hydra
      (hydra-projectile (:color teal :hint nil)
                        "
           PROJECTILE: %(projectile-project-root)

           Find File            Search/Tags          Buffers                Cache
      ------------------------------------------------------------------------------------------
      _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
       _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
       _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
        _r_: recent file                                               ^^^^_z_: cache current
        _d_: dir

      "
                        ("<ESC>" nil "quit")
                        ("<" hydra-project/body "back")
                        ("a"   counsel-projectile-ag)
                        ("b"   counsel-projectile-switch-to-buffer)
                        ("c"   counsel-projectile-invalidate-cache)
                        ("d"   counsel-projectile-find-dir)
                        ("s-f" counsel-projectile-find-file)
                        ("ff"  counsel-projectile-find-file-dwim)
                        ("fd"  counsel-projectile-find-file-in-directory)
                        ("g"   ggtags-update-tags)
                        ("s-g" ggtags-update-tags)
                        ("i"   counsel-projectile-ibuffer)
                        ("K"   counsel-projectile-kill-buffers)
                        ("s-k" counsel-projectile-kill-buffers)
                        ("m"   counsel-projectile-multi-occur)
                        ("o"   counsel-projectile-multi-occur)
                        ("s-p" counsel-projectile-switch-project "switch project")
                        ("p"   counsel-projectile-switch-project)
                        ("s"   counsel-projectile-switch-project)
                        ("r"   counsel-projectile-recentf)
                        ("x"   counsel-projectile-remove-known-project)
                        ("X"   counsel-projectile-cleanup-known-projects)
                        ("z"   counsel-projectile-cache-current-file)
                        ("q"   nil "cancel" :color blue)))
  ;;(use-package counsel-projectile
  ;;  :config
  ;;  (counsel-projectile-mode t)
  ;;  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
* Version management
** magit
#+BEGIN_SRC emacs-lisp
;; A git interface for emacs
(use-package magit
  :config
  (setq magit-refresh-status-buffer nil)
  :diminish 'auto-revert-mode
  :defer t)

(global-set-key (kbd "C-x g") #'magit-status)
(global-set-key (kbd "C-x M-g") #'magit-dispatch)

;; Show diffs in the gutter
(use-package diff-hl
  :config
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (global-diff-hl-mode t)
  (diff-hl-flydiff-mode t))
#+END_SRC
** Keybinding
#+begin_src emacs-lisp
  (defhydra hydra-project (:color teal :hint nil)
    "
         Project/Source management

     Projects              Version control        On-the-fly
    ------------------------------------------------------------------------------------------
    _d_: dash projects     _m_: magit             _f_: fixme listing
    _p_: projectile        _t_: travis status     _F_: flycheck

    "
    ("<ESC>" nil "quit")
    ("d"   org-dashboard-display)
    ("p"   hydra-projectile/body)
    ("f"   fic-view-listing)
    ("F"   hydra-flycheck/body)
    ("m"   hydra-magit/body)
    ("t"   show-my-travis-projects)
    ("q"   nil "cancel" :color blue))
  (global-set-key (kbd "<f4>") 'hydra-project/body)
#+end_src
* File/Dir management
** Diff
*** Global
#+begin_src emacs-lisp
  (use-package ediff
    :config
    (autoload 'diff-mode "diff-mode" "Diff major mode" t)
    (setq diff-switches "-u"
          ediff-auto-refine-limit (* 2 14000)
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function
          (lambda (&optional arg)
            (if (> (frame-width) 160)
                (split-window-horizontally arg)
              (split-window-vertically arg)))))
#+end_src
*** Helpers for region diff
#+begin_src emacs-lisp
  (defun diff-region ()
    "Select a region to compare"
    (interactive)
    (when (use-region-p) ; there is a region
      (let (buf)
        (setq buf (get-buffer-create "*Diff-regionA*"))
        (save-current-buffer
          (set-buffer buf)
          (erase-buffer))
        (append-to-buffer buf (region-beginning) (region-end)))
      )
    (message "Now select other region to compare and run `diff-region-now`"))

  (defun diff-region-now ()
    "Compare current region with region already selected by `diff-region`"
    (interactive)
    (when (use-region-p)
      (let (bufa bufb)
        (setq bufa (get-buffer-create "*Diff-regionA*"))
        (setq bufb (get-buffer-create "*Diff-regionB*"))
        (save-current-buffer
          (set-buffer bufb)
          (erase-buffer))
        (append-to-buffer bufb (region-beginning) (region-end))
        (ediff-buffers bufa bufb))
      ))
#+end_src
** Trash
#+begin_src emacs-lisp
  ;; Ask confirmation only once and move to trash
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)

  (defun empty-trash()
    "Command to empty the trash (for now gnome/linux specific)"
    (interactive)
    (shell-command "rm -rf ~/.local/share/Trash/*"))

  (defun open-trash-dir()
    "Command to open the trash dir"
    (interactive)
    (find-file "~/.local/share/Trash/files"))
#+end_src
** Treemacs
*** Global
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind (:map global-map
                ([f8]        . treemacs))
    :functions (treemacs-follow-mode treemacs-filewatch-mode)

    :config
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-integration               t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
;;          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t))
#+end_src
*** Projectile
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :ensure t
    :functions treemacs-projectile-create-header
    :after treemacs projectile
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+end_src
*** Magit
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+end_src
*** Icons
#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
(use-package treemacs-icons-dired
  :ensure t
  :disabled t
  :commands (treemacs-icons-dired-mode)
  :hook
  (dired-mode . treemacs-icons-dired--enable-highlight-correction)
  (dired-mode . treemacs--select-icon-set )
  (dired-mode . treemacs-icons-dired-mode))
#+end_src


* Custom Functions
** Change letter case
#+begin_src emacs-lisp
(defun upcase-backward-word (arg)
  (interactive "p")
  (upcase-word (- arg)))

(defun downcase-backward-word (arg)
  (interactive "p")
  (downcase-word (- arg)))

(defun capitalize-backward-word (arg)
  (interactive "p")
  (capitalize-word (- arg)))
#+end_src
* Custom Keybinding
** personal
#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "M-/") nil)
(global-set-key (kbd "C-x C-b") #'ibuffer)
(global-set-key (kbd "C-x C-e") #'pp-eval-last-sexp)

(global-set-key (kbd "M-i") #'imenu)

(global-set-key (kbd "C-x k") 'kill-this-buffer)

(use-package helm-descbinds
  :ensure t
  :commands (helm-descbinds)
  :bind
  ("C-h b" . helm-descbinds))

;;opening new lines can be finichy
(defun open-line-below()
    "open line below."
    (interactive)
    (end-of-line)
    (newline)
    (indent-for-tab-command))
(defun open-line-above()
    "open line above."
    (interactive)
    (beginning-of-line)
    (newline)
    (forword-line -1)
    (indent-for-tab-command))
(global-set-key (kbd "<C-return>") 'open-line-below)
(global-set-key (kbd "<C-S-return>") 'open-line-above)

(defun scroll-half-page-down ()
  "scroll down half the page"
  (interactive)
  (scroll-down (/ (window-body-height) 2)))

(defun scroll-half-page-up ()
  "scroll up half the page"
  (interactive)
  (scroll-up (/ (window-body-height) 2)))

(global-set-key "\M-n" 'scroll-half-page-up)
(global-set-key "\M-p" 'scroll-half-page-down)

(global-set-key (kbd "C-S-n")
                (lambda()
                  (interactive)
                  (ignore-errors (next-line 5))))
(global-set-key (kbd "C-S-p")
                (lambda()
                  (interactive)
                  (ignore-errors (previous-line 5))))
(global-set-key (kbd "C-S-f")
                (lambda()
                  (interactive)
                  (ignore-errors (forword-char 5))))
(global-set-key (kbd "C-S-b")
                (lambda()
                  (interactive)
                  (ignore-errors (backward-char 5))))
;;
;; Copy or Cut one line if no content selected
;;
;; copy region or whole line
(global-set-key "\M-w"
(lambda ()
  (interactive)
  (if mark-active
      (kill-ring-save (region-beginning)
      (region-end))
    (progn
     (kill-ring-save (line-beginning-position)
     (line-end-position))
     (message "copied line")))))

;; kill region or whole line
(global-set-key "\C-w"
(lambda ()
  (interactive)
  (if mark-active
      (kill-region (region-beginning)
   (region-end))
    (progn
     (kill-region (line-beginning-position)
  (line-end-position))
     (message "killed line")))))

#+END_SRC
** go to last change
I could not find any built-in method of reliably moving back to the
  last change.  Using the mark ring is always an option, but does not fill
  the exact same niche.
The C-z binding is disabled elsewhere in this document.  It minimises
  the Emacs GUI by default.  A complete waste of an extremely valuable key
  binding!
#+begin_src emacs-lisp
(use-package goto-last-change
  :ensure
  :bind ("C-z" . goto-last-change))
#+end_src
** Reminder for bindings
#+begin_src emacs-lisp
(use-package remind-bindings
  :ensure t
  :init  (setq remind-bindings-initfile (format "%s/settings.el" user-emacs-directory))
  :hook (after-init . remind-bindings-initialise)
  :bind (("<f10>" . 'remind-bindings-togglebuffer)   ;; toggle buffer
         ("C-<f10>" . 'remind-bindings-specific-mode))) ;; buffer-specific only
#+end_src


* Language Server
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :custom
  ;; clangd is fast
  (lsp-idle-delay 0.1)
  ;; be more ide-ish
  (lsp-modeline-code-actions-mode t)
  ;;Èù¢ÂåÖÂ±ëÂØºËà™
  (lsp-headerline-breadcrumb-enable nil)
  ;; enable log only for debug
  (lsp-log-io nil)
  ;; handle yasnippet by myself
  (lsp-enable-snippet nil)
  ;; turn off for better performance
  (lsp-enable-symbol-highlighting nil)
  ;; use `company-ctags' only.
  ;; Please note `company-lsp' is automatically enabled if installed
  (lsp-enable-completion-at-point t)
  ;; auto restart lsp
  (lsp-restart 'auto-restart)

  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (c++-mode . lsp)
         (c-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
;; LSP UI tools
(use-package lsp-ui
  :ensure t
  :custom
  ;; lsp-ui-doc
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature nil)
  (lsp-ui-doc-position 'top) ;; top, bottom, or at-point
  (lsp-ui-doc-max-width 120)
  (lsp-ui-doc-max-height 30)
  (lsp-ui-doc-use-childframe t)
  (lsp-ui-doc-use-webkit t)
  ;; lsp-ui-flycheck
  (lsp-ui-flycheck-enable nil)
  ;; lsp-ui-sideline
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-symbol t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-show-diagnostics nil)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-code-actions-prefix "ÔêÄ")
  ;; lsp-ui-imenu
  (lsp-ui-imenu-enable t)
  (lsp-ui-imenu-kind-position 'top)
  ;; lsp-ui-peek
  (lsp-ui-peek-enable t)
  (lsp-ui-peek-peek-height 20)
  (lsp-ui-peek-list-width 50)
  (lsp-ui-peek-fontify 'on-demand) ;; never, on-demand, or always
  :preface
  (defun my/toggle-lsp-ui-doc ()
    (interactive)
    (if lsp-ui-doc-mode
        (progn
          (lsp-ui-doc-mode -1)
          (lsp-ui-doc--hide-frame))
      (lsp-ui-doc-mode 1)))
  :bind
  ;; TipÔºö ËÆæÁΩÆÂºÄÂÖ≥ÔºåÊâãÂä®ÊâìÂºÄÊüê‰∫õÁâπÊÄß
  (:map lsp-mode-map
        ("C-c C-r" . lsp-ui-peek-find-references)
        ("C-c C-j" . lsp-ui-peek-find-definitions)
        ("C-c i"   . lsp-ui-peek-find-implementation)
        ("C-c m"   . lsp-ui-imenu)
        ("C-c s"   . lsp-ui-sideline-mode)
        ("C-c d"   . my/toggle-lsp-ui-doc))
  :hook
  (lsp-mode . lsp-ui-mode))

;; if you are ivy user
(use-package lsp-ivy :ensure t :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)

(use-package posframe :ensure t)

#+END_SRC

* Language cpp
#+begin_src shell :tangle no
sudo pacman -S global
#+end_src

#+BEGIN_SRC emacs-lisp
;; C/C++ Mode
(use-package cc-mode
  :ensure nil
  :bind (:map c-mode-base-map
              ("C-c c" . compile))
  :hook (c-mode-common . (lambda ()
                           (c-set-style "linux")
                           (setq tab-width 4)
                           (setq c-basic-offset 4))))

(use-package modern-cpp-font-lock
  :ensure t
  :diminish
  :init (modern-c++-font-lock-global-mode t))

;; counsel-etags for code navigation
(use-package counsel-etags
  :ensure t
  :bind (("C-]" . counsel-etags-find-tag-at-point))
  :init
  (add-hook 'prog-mode-hook
            (lambda ()
              (add-hook 'after-save-hook
                        'counsel-etags-virtual-update-tags 'append 'local)))
  :config
  (setq counsel-etags-update-interval 60)
  (push "build" counsel-etags-ignore-directories))

;;company-ctags for code completion
;;usage: find . -name "*.[ch]" | ctags -e -L -
(use-package company-ctags  ;; LSP server: (lsp-enable-completion-at-point t)
  :disabled t
  :ensure t
  :after company
  :config
  (company-ctags-auto-setup))

;; Emacs frontend to GNU GLobal source code tagging system
(use-package ggtags
  :ensure t
  :init
  (ggtags-mode 1)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1))))
  :config
  (dolist (map (list ggtags-mode-map dired-mode-map))
    (define-key map (kbd "C-c g s") 'ggtags-find-other-symbol)
    (define-key map (kbd "C-c g h") 'ggtags-view-tag-history)
    (define-key map (kbd "C-c g r") 'ggtags-find-reference)
    (define-key map (kbd "C-c g f") 'ggtags-find-file)
    (define-key map (kbd "C-c g c") 'ggtags-create-tags)
    (define-key map (kbd "C-c g u") 'ggtags-update-tags)
    (define-key map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    (define-key map (kbd "M-.") 'ggtags-find-tag-dwim)
    (define-key map (kbd "M-,") 'pop-tag-mark)
    (define-key map (kbd "C-c <") 'ggtags-prev-mark)
    (define-key map (kbd "C-c >") 'ggtags-next-mark)))

;; sudo pacman -S ccls
;; C/C++/Objective-C support
;;   (use-package ccls
;;     :defines projectile-project-root-files-top-down-recurring
;;     :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda ()
;;                                                      (require 'ccls)
;;                                                      (lsp-deferred)))
;;     :config
;;     (with-eval-after-load 'projectile
;;       (setq projectile-project-root-files-top-down-recurring
;;             (append '("compile_commands.json"
;;                       ".ccls")
;;                     projectile-project-root-files-top-down-recurring))))
#+END_SRC

* Language elisp
#+BEGIN_SRC emacs-lisp
;; String manipulation routines for emacs lisp
(use-package s
  :ensure t)

;; Minor mode for performing structured editing of S-expression data
(use-package paredit
  :disabled t
  :init
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  :bind (("C-c d" . paredit-forward-down))
  :config
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round))

;; Ensure paredit is used EVERYWHERE!
(use-package paredit-everywhere
  :disabled t
  :ensure t
  :diminish paredit-everywhere-mode
  :config
  (add-hook 'list-mode-hook #'paredit-everywhere-mode))
#+END_SRC

* Language scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :config
    (setq geiser-active-implementations '(mit guile)))
#+END_SRC

* Language javascript
#+BEGIN_SRC emacs-lisp
(defun configure-web-mode-flycheck-checkers ()
    (flycheck-mode)

    ;; See if there is a node_modules directory
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (or (and root
                            ;; Try the locally installed eslint
                            (expand-file-name "node_modules/eslint/bin/eslint.js" root))

                       ;; Try the global installed eslint
                       (concat (string-trim (shell-command-to-string "npm config get prefix")) "/bin/eslint"))))

      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint)))

    (flycheck-select-checker 'javascript-eslint))

(defun setup-javascript ()
  (tide-setup)
  (configure-web-mode-flycheck-checkers)
  (yas-minor-mode)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))

(defun setup-js2 ()
  (setq js-switch-indent-offset 2)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (setup-javascript))

(defun setup-typescript ()
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  (setup-javascript))

;; TypeScript Interactive Development Environment
(use-package tide
  :config
  :hook (typescript-mode . setup-typescript))

;; JavaScript editing mode
(use-package js2-mode
  :mode ("\\.js\\'" . js2-mode)
  :config
  :hook (js2-mode . setup-js2))

(use-package rjsx-mode :ensure t)
#+END_SRC

* Language HTML, css
** Global web configuration
#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :mode
  ("\\.phtml\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
  "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.html?\\'")

  :init
  (setq web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2

         web-mode-enable-auto-pairing t
        web-mode-enable-auto-expanding t
        web-mode-enable-css-colorization t)

  :config
  ;; Template
  (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade"  . "\\.blade\\."))
        )

   )

(use-package web-beautify
  :ensure t
  :commands (web-beautify-css
             web-beautify-css-buffer
             web-beautify-html
             web-beautify-html-buffer
             web-beautify-js
             web-beautify-js-buffer))

(use-package web-completion-data
  :ensure t)

(use-package web-mode-edit-element
  :ensure t)
#+end_src
** EMMET
#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :diminish (emmet-mode . "Œµ")
  :bind* (("C-)" . emmet-next-edit-point)
          ("C-(" . emmet-prev-edit-point))
  :commands (emmet-mode
             emmet-next-edit-point
             emmet-prev-edit-point)
  :hook
  ((sgml-mode-hook . emmet-mode)
   (html-mode . emmet-mode)
   (web-mode . emmet-mode))
  :init
  (setq emmet-indentation 2
        emmet-move-cursor-between-quotes t))
#+end_src
** Completion
#+begin_src emacs-lisp
(use-package company-web
  :ensure t
  :compdef (web-mode)
  :company (company-web-html))
#+end_src
* Language markdown
#+begin_src shell :tangle no
sudo pacman -S pandoc
sudo pop install grip
#+end_src

ÁºñËØëÂíåÁª¥Êä§ÂëΩ‰ª§ C-c C-c
Ê†∑Âºè: C-c C-s
Ë∂ÖÈìæÊé•: C-c C-a

** Global
#+begin_src emacs-lisp
;; Major mode for editing Markdown formatted text
(use-package markdown-mode
  :ensure t
  :defer t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "/usr/bin/pandoc"))

(use-package markdown-mode+
  :disabled t
  :ensure t
  :after markdown-mode)
#+end_src
** Syntax highlight in block
#+begin_src emacs-lisp
(use-package poly-markdown
  :ensure t
  :disabled t)
#+end_src
** Visualize GFM rendering
C-c C-c g
#+begin_src emacs-lisp
(use-package grip-mode
  :ensure t
  :commands (grip-mode)
  :bind (:map markdown-mode-command-map
         ("g" . grip-mode)))
#+end_src

* Language Latex
** Global
#+begin_src emacs-lisp
(use-package tex-site
  :ensure auctex
  :after (tex latex)
  :hook
  (LaTeX-mode . turn-off-auto-fill)
  (LaTeX-mode . (lambda () (TeX-fold-mode t)))
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . outline-minor-mode)
  (LaTeX-mode . TeX-source-correlate-mode)

  :config

  ;; Spelling
  (setq ispell-tex-skip-alists
        '((
           ;;("%\\[" . "%\\]") ; AMStex block comment...
           ;; All the standard LaTeX keywords from L. Lamport's guide:
           ;; \cite, \hspace, \hspace*, \hyphenation, \include, \includeonly
           ;; \input, \label, \nocite, \rule (in ispell - rest included here)
           ("\\\\addcontentsline"              ispell-tex-arg-end 2)
           ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end)
           ("\\\\\\([aA]lph\\|arabic\\)"   ispell-tex-arg-end)
           ("\\\\author"                         ispell-tex-arg-end)
           ;; New regexps here --- kjh
           ("\\\\\\(text\\|paren\\)cite" ispell-tex-arg-end)
           ("\\\\cite\\(t\\|p\\|year\\|yearpar\\)" ispell-tex-arg-end)
           ("\\\\bibliographystyle"                ispell-tex-arg-end)
           ("\\\\makebox"                  ispell-tex-arg-end 0)
           ("\\\\e?psfig"                  ispell-tex-arg-end)
           ("\\\\document\\(class\\|style\\)" .
            "\\\\begin[ \t\n]*{[ \t\n]*document[ \t\n]*}"))
          (
           ;; delimited with \begin.  In ispell: displaymath, eqnarray,
           ;; eqnarray*, equation, minipage, picture, tabular,
           ;; tabular* (ispell)
           ("\\(figure\\|table\\)\\*?"     ispell-tex-arg-end 0)
           ("\\(equation\\|eqnarray\\)\\*?"     ispell-tex-arg-end 0)
           ("list"                                 ispell-tex-arg-end 2)
           ("program" . "\\\\end[ \t\n]*{[ \t\n]*program[ \t\n]*}")
           ("verbatim\\*?"."\\\\end[ \t\n]*{[ \t\n]*verbatim\\*?[ \t\n]*}")
           ("lstlisting\\*?"."\\\\end[ \t\n]*{[ \t\n]*lstlisting\\*?[ \t\n]*}"))))

  ;; Pdf activated by default
  (TeX-global-PDF-mode 1)

  ;; Diverse
  (setq-default TeX-master nil)
  (setq TeX-parse-self t
        TeX-auto-save t)

  ;; Minor helpers for comment and quotes
  (add-to-list 'LaTeX-verbatim-environments "comment")
  (setq TeX-open-quote "\enquote{"
        TeX-close-quote "}")

  ;; Indentation
  (setq LaTeX-indent-level 4
        LaTeX-item-indent 0
        TeX-brace-indent-level 4
        TeX-newline-function 'newline-and-indent)

  (defadvice LaTeX-fill-region-as-paragraph (around LaTeX-sentence-filling)
    "Start each sentence on a new line."
    (let ((from (ad-get-arg 0))
          (to-marker (set-marker (make-marker) (ad-get-arg 1)))
          tmp-end)
      (while (< from (marker-position to-marker))
        (forward-sentence)
        ;; might have gone beyond to-marker --- use whichever is smaller:
        (ad-set-arg 1 (setq tmp-end (min (point) (marker-position to-marker))))
        ad-do-it
        (ad-set-arg 0 (setq from (point)))
        (unless (or
                 (bolp)
                 (looking-at "\\s *$"))
          (LaTeX-newline)))
      (set-marker to-marker nil)))
  (ad-activate 'LaTeX-fill-region-as-paragraph)

  ;; PDF/Tex correlation
  (setq TeX-source-correlate-method 'synctex)

  ;; Keys
  (define-key LaTeX-mode-map (kbd "C-c C-=") 'align-current))
#+end_src
** Bibtex
*** Global
#+begin_src emacs-lisp
(use-package bibtex
  :config
  (defun bibtex-generate-autokey ()
    (let* ((bibtex-autokey-names nil)
           (bibtex-autokey-year-length 2)
           (bibtex-autokey-name-separator "\0")
           (names (split-string (bibtex-autokey-get-names) "\0"))
           (year (bibtex-autokey-get-year))
           (name-char (cond ((= (length names) 1) 4)
                            ((= (length names) 2) 2)
                            (t 1)))
           (existing-keys (bibtex-parse-keys))
           key)
      (setq names (mapconcat (lambda (x)
                               (substring x 0 name-char))
                             names
                             ""))
      (setq key (format "%s%s" names year))
      (let ((ret key))
        (loop for c from ?a to ?z
              while (assoc ret existing-keys)
              do (setq ret (format "%s%c" key c)))
        ret)))

  (setq bibtex-align-at-equal-sign t
        bibtex-autokey-name-year-separator ""
        bibtex-autokey-year-title-separator ""
        bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
        bibtex-autokey-titleword-length 100
        bibtex-autokey-titlewords 1))
#+end_src
*** Formatting
#+BEGIN_SRC emacs-lisp
(use-package bibclean-format
  :ensure t
  :hook
  (bibtex-mode . bibclean-format-on-save-mode)

  :commands (bibclean-format)

  :bind
  (:map bibtex-mode-map
        ("C-c f" . bibclean-format))
  :config
  (setq bibclean-format-args '("--max-width" "0" "--align-equal")))
#+END_SRC
** Completion
#+begin_src emacs-lisp
  ;; Completion
  (setq TeX-auto-global (format "%s/auctex/style" user-emacs-directory))

  (use-package company-auctex
    :ensure t
    :hook
    (latex-mode . (company-auctex-init)))

  (use-package company-bibtex
    :ensure t
    :compdef (latex-mode org-mode)
    :company (company-bibtex))

  (use-package company-reftex
    :ensure t
    :compdef (latex-mode org-mode)
    :company (company-reftex-labels company-reftex-citations))

  (use-package company-math
    :ensure t
    :compdef (latex-mode org-mode)
    :company (company-math-symbols-unicode))
#+end_src
** Compilation
#+begin_src emacs-lisp
  ;; Escape mode
  (defun TeX-toggle-escape nil
    (interactive)
    "Toggle Shell Escape"
    (setq LaTeX-command
          (if (string= LaTeX-command "latex")
              "latex -shell-escape"
            "latex"))
    (message (concat "shell escape "
                     (if (string= LaTeX-command "latex -shell-escape")
                         "enabled"
                       "disabled"))
             )
    )

  (use-package auctex-latexmk
    :ensure t
    :after (tex latex)
    :config
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (auctex-latexmk-setup))

  (setq TeX-show-compilation nil)

  ;; Redine TeX-output-mode to get the color !
  (define-derived-mode TeX-output-mode TeX-special-mode "LaTeX Output"
    "Major mode for viewing TeX output.
    \\{TeX-output-mode-map} "
    :syntax-table nil
    (set (make-local-variable 'revert-buffer-function)
         #'TeX-output-revert-buffer)

    (set (make-local-variable 'font-lock-defaults)
         '((("^!.*" . font-lock-warning-face) ; LaTeX error
            ("^-+$" . font-lock-builtin-face) ; latexmk divider
            ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" . font-lock-builtin-face)
            ;; .....
            )))

    ;; special-mode makes it read-only which prevents input from TeX.
    (setq buffer-read-only nil))
#+end_src
** Reftex
#+begin_src emacs-lisp
  (use-package reftex
    :init
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    :config
    (setq reftex-save-parse-info t
          reftex-enable-partial-scans t
          reftex-use-multiple-selection-buffers t
          reftex-plug-into-AUCTeX t
          reftex-vref-is-default t
          reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\textcite{%l}")
            (?a . "\\autocite[]{%l}")
            (?p . "\\parencite{%l}")
            (?f . "\\footcite[][]{%l}")
            (?F . "\\fullcite[]{%l}")
            (?x . "[]{%l}")
            (?X . "{%l}"))

          font-latex-match-reference-keywords
          '(("cite" "[{")
            ("cites" "[{}]")
            ("footcite" "[{")
            ("footcites" "[{")
            ("parencite" "[{")
            ("textcite" "[{")
            ("fullcite" "[{")
            ("citetitle" "[{")
            ("citetitles" "[{")
            ("headlessfullcite" "[{"))

          reftex-cite-prompt-optional-args nil
          reftex-cite-cleanup-optional-args t))
#+end_src
** Preview
#+begin_src emacs-lisp
  (use-package latex-math-preview
    :ensure t
    :config
    (autoload 'LaTeX-preview-setup "preview")
    (setq preview-scale-function 1.2)
    (add-hook 'LaTeX-mode-hook 'LaTeX-preview-setup))
#+end_src
* Language rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :defer t)

;; rust completion library
(use-package racer
  :after (rust-mode)
  :init
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'rust-mode-hook #'racer-mode))

(use-package flycheck-rust
  :after (rust-mode)
  :init
  (add-hook 'rust-mode-hook #'flycheck-mode))
(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)

;; rust package managment
(use-package cargo
  :after (rust-mode)
  :bind (:map rust-mode-map ("C-c C-c" . cargo-process-clippy)))

(add-hook 'rust-mode-hook #'yas-minor-mode)
  #+END_SRC

* Language clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
  :defer t
  :hook (clojure-mode . enable-paredit-mode))
#+END_SRC

* Language python
#+begin_src shell :tangle no
  sudo pip install 'python-language-server[all]'
#+end_src
** Global configuration
#+begin_src emacs-lisp
(use-package python
  :mode
  ("\\.py\\'" . python-mode)
  ("\\.wsgi$" . python-mode)

  :init
  (setq-default indent-tabs-mode nil)

  :config
  (setq python-indent-offset 4))
#+end_src
** Lsp (with microsoft language server)
#+BEGIN_SRC emacs-lisp :tangle no
(use-package lsp-python-ms
  :ensure t
  :demand
  :hook (python-mode . lsp-deferred)  ; or lsp-deferred
  :init
  (setq lsp-python-ms-dir "/usr/lib"
        lsp-python-ms-executable "/usr/bin/pyls")) ; mspyls ?
;;(use-package lsp-pyright
;;  :ensure t
;;  :after lsp-mode
;;  :hook (python-mode . (lambda ()
;;                         (require 'lsp-pyright)
;;                         (lsp)))
;;  :init
;;  (when (executable-find "python3")
;;    (setq lsp-pyright-python-executable-cmd "python3")))  ; or lsp-deferred
#+END_SRC
** Pipenv
#+begin_src emacs-lisp :tangle no
(use-package pipenv
  :ensure t
  :hook
  ((python-mode . pipenv-mode))

  :init
  (setq pipenv-projectile-after-switch-function
        #'pipenv-projectile-after-switch-extended))
#+end_src
** Conda
#+begin_src emacs-lisp :tangle no
(use-package conda
  :ensure t
  :init
  (setq conda-anaconda-home (expand-file-name "~/environment/local/miniconda3"))

  (defun conda-hook ()
    "Conda activation hook for python mode."
    (setq conda-message-on-environment-switch nil)
    (conda-env-autoactivate-mode t))

  :hook
  (python-mode . conda-hook)

  :config
  ;; If you want interactive shell support, include:
  (conda-env-initialize-interactive-shells)

  ;; If you want eshell support, include:
  (conda-env-initialize-eshell))
#+end_src
** Interpreter configuration
#+begin_src emacs-lisp :tangle no
(use-package ein
  :ensure t
  :config

  (cond
   ((eq system-type 'darwin) (setq ein:console-args '("--gui=osx" "--matplotlib=osx" "--colors=Linux")))
   ((eq system-type 'gnu/linux) (setq ein:console-args '("--gui=gtk3" "--matplotlib=gtk3" "--colors=Linux"))))

  (setq ein:query-timeout 1000))
#+end_src
** Sphinx documentation
#+begin_src emacs-lisp
(use-package sphinx-doc
  :ensure t
  :hook
  (python-mode . (lambda () (sphinx-doc-mode t))))
#+end_src
** Elpy
#+BEGIN_SRC emacs-lisp
;;(use-package elpy
;;  :init
;;  (elpy-enable))
#+END_SRC

* Language Java
#+begin_src shell :tangle no
sudo pacman -S maven
#+end_src

*** Global (lsp-java)
#+begin_src emacs-lisp :tangle no
(use-package lsp-java
  :ensure t
  :hook
  (java-mode . lsp)

  :config
  (setq lsp-java-save-action-organize-imports nil))

(use-package dap-java :disabled t)
(use-package lsp-java-treemacs :disabled t)
#+end_src
*** Snippets
#+begin_src emacs-lisp :tangle no
(use-package java-snippets
  :ensure t)
#+end_src
*** Javadoc
#+begin_src emacs-lisp :tangle no
(use-package javadoc-lookup
  :ensure t
  :config
  (when (file-exists-p "/usr/share/doc/java8-openjdk/api")
    (javadoc-add-roots "/usr/share/doc/java8-openjdk/api"))

  (javadoc-add-artifacts [org.lwjgl.lwjgl lwjgl "2.8.2"]
                         [com.nullprogram native-guide "0.2"]
                         [org.apache.commons commons-math3 "3.0"]
                         ;; [de.dfki.lt.jtok jtok-core "1.9.3"]
                         ))
#+end_src

* Language go
Go code helpers. [[https://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/][see also]]

#+begin_src shell :tangle no
sudo pacman -S go
# plugin
go get -u github.com/nsf/gocode
go get -u github.com/rogpeppe/godef
go get -u golang.org/x/tools/cmd/guru
go get -u golang.org/x/tools/cmd/goimports
# language server
go get golang.org/x/tools/gopls@latest
# config
zshrc: GOPATH,GOPROXY
#+end_src

Format
#+begin_src emacs-lisp
;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src

Go uses tabs, so lets set the indent to a sane mode

#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src

Packages that you need for a nice Go setup

#+begin_src emacs-lisp
(use-package go-mode
  :ensure t
  :bind (("C-c t t" . go-test-current-test)
         ("C-c t p" . go-test-current-project)
         ("C-c t c" . go-test-current-coverage)
         ("C-c t f" . go-test-current-file))
  :config
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save))

(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "GOPROXY")
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

(use-package go-guru
  :ensure t)

(use-package go-errcheck
  :ensure t)

;; Yasnippets
(use-package go-snippets
  :ensure t)

;; eldoc integration
(use-package go-eldoc
  :ensure t)

;; (use-package gocode
;;   :ensure t)

;; (use-package godef
;;   :ensure t)

(use-package gotest
  :ensure t)

(use-package flycheck-golangci-lint
  :ensure t
  :hook (go-mode . flycheck-golangci-lint-setup))
#+end_src
* Configuration and log files
This part is dedicated to unix and more general configuration files as well as logs.
** Default unix configuration
Config-general-mode is applied for all unix configuration files.
#+begin_src emacs-lisp
  (use-package config-general-mode
    :ensure t
    :mode ("\\.conf$" "\\.*rc$"))
#+end_src
** Apache
#+begin_src emacs-lisp
  (use-package apache-mode
    :ensure t
    :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'"
           "access\\.conf\\'" "sites-\\(available\\|enabled\\)/"))
#+end_src
** SSH configuration
#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :ensure t
    :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
    :hook (ssh-config-mode . turn-on-font-lock)

    :config
    (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src
** Logview
#+begin_src emacs-lisp
  (use-package logview
    :ensure t
    :mode ("syslog\\(?:\\.[0-9]+\\)" "\\.log\\(?:\\.[0-9]+\\)?\\'"))
#+end_src
** systemd
#+begin_src emacs-lisp
(use-package systemd
  :ensure t
  :mode
  ("\\.service\\'" "\\.timer\\'" "\\.target\\'" "\\.mount\\'"
   "\\.automount\\'" "\\.slice\\'" "\\.socket\\'" "\\.path\\'"
   "\\.netdev\\'" "\\.network\\'" "\\.link\\'"))
#+end_src
** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (".yaml$")
    :hook
    (yaml-mode . yaml-mode-outline-hook)

    :init
    (defun yaml-outline-level ()
      "Return the outline level based on the indentation, hardcoded at 2 spaces."
      (s-count-matches "[ ]\\{2\\}" (match-string 0)))

    (defun yaml-mode-outline-hook ()
      (outline-minor-mode)
      (setq outline-regexp "^\\([ ]\\{2\\}\\)*\\([-] \\)?\\([\"][^\"]*[\"]\\|[a-zA-Z0-9_-]*\\): *\\([>|]\\|&[a-zA-Z0-9_-]*\\)?$")
      (setq outline-level 'yaml-outline-level))
    )

  (use-package yaml-tomato
    :ensure t)
#+end_src
** toml
#+begin_src emacs-lisp
  (use-package toml-mode
    :ensure t)
#+end_src
** vimrc
#+begin_src emacs-lisp
  (use-package vimrc-mode
    :ensure t
    :mode ("^\\.vimrc\\'"))
#+end_src
** CSS
#+begin_src emacs-lisp
  (use-package scss-mode
    :ensure t
    :defines scss-compile-at-save
    :mode ("\\.scss\\'")
    :config
    (setq scss-compile-at-save 'nil))
#+END_SRC
** CSV
 #+begin_src emacs-lisp
   (use-package csv-mode
     :ensure t
     :config

     ;; Define separators
     (setq csv-separators '("," ";" ":" " ")))


   ;; Subpackages
   (use-package csv-nav
     :ensure t
     :disabled t)
 #+end_src
** Graphviz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :init
    (defvar default-tab-width nil)

    :mode ("\\.dot\\'"))
#+end_src
