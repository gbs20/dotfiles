#+TITLE: My emacs configure
#+KEYWORDS: emacs configure, org-mode

  This is my version of an configuration file for GNU Emacs.
  1. read/write
  2. programming

* Package management
The first part of the configuration is to prepare the package management. I am using =use-package= as
the central tool to deal with configuration of the packages.

** Emacs package configuration
In this section, we are configuring the repositories and emacs internal package management. The only
specificity here is that the TLS algorithm is specific for 26.2.1.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (when (and (= emacs-major-version 26)
             (= emacs-minor-version 2)
             (= emacs-build-number 1))
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

  (setq package-enable-at-startup nil
        package-check-signature nil
        package-archives '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                           ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
                           ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/"))

        package-archive-priorities  '(("org"      . 15)
                                      ("melpa"        . 10)
                                      ("gnu"     . 5))
        package-check-signature nil)

  (package-initialize)
#+END_SRC

** Load use-package
Here, we are initializing =use-package= in the classic way.
#+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))
  
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
#+END_SRC
As a reference, these are the common use-package keywords:

:ensure
Install package
:after
Load after another package
:init
Run code before package loads
:config
Run code after package loads
:custom
Set custom variables with concise syntax
:defer
Defer loading until some later point
:demand
Ensure loading at startup
:bind
Bind keys for modes
:hook
Set hooks that will cause package to load
:commands
Set autoloaded commands that will cause package to load
:mode
Activate mode when particular file types are opened
** diminish
Diminished modes are minor modes with no modeline display
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
** Hydra
I use hydra a lot so it is easier to add its support directly in the use-package configuration part.

#+BEGIN_SRC emacs-lisp
  (use-package hydra :ensure t)
  (use-package use-package-hydra
    :ensure t
    :functions
    (hydra-default-pre
     hydra-keyboard-quit
     hydra--call-interactively-remap-maybe
     hydra-show-hint
     hydra-set-transient-map))
#+END_SRC
** Paradox to enhance package list management
Finally, I use paradox to enhance the package listing experience.
#+BEGIN_SRC emacs-lisp :tangle no
  ;; A modern Packages Menu
  (use-package paradox
    :ensure t
    :init
    (setq paradox-execute-asynchronously t)
    (setq paradox-github-token t)
    (setq paradox-display-star-count nil))
#+END_SRC

* emacs
** Define some important variables
#+BEGIN_SRC emacs-lisp
    ;; Define root directory and add the plugins
    (defvar default-plugin-dir (format "%s/plugins" user-emacs-directory)
      "The plugins directory")
    (add-to-list 'load-path default-plugin-dir)
    (add-to-list 'load-path "~/.emacs.d/site-lisp/")
  
    (when (eq system-type 'windows-nt)
      (setq default-directory "d:/notes/"))

    ;; Don't screw up my files with custom
    (setq custom-file (format "%s/custom.el" user-emacs-directory))
    (load custom-file 'noerror)

    ;; Give focus to new help windows
    (setq help-window-select t)
    ;; Put apropos in current buffer so it can be read and exited with minimum effort
    (add-to-list 'display-buffer-alist
                '("*Apropos*" display-buffer-same-window)
                '("*Info*" display-buffer-same-window))

    ;; Add /usr/local/bin to the path
    (when (eq system-type 'gnu/linux)
      (setq exec-path (append exec-path '("/usr/local/bin"))))

    ;; Y or n is enough for me
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Silence!!!!!!
    (setq save-abbrevs 'silently
      ad-redefinition-action 'accept
      ;; Garbage collection (see https://github.com/jethrokuan/.emacs.d/blob/master/config.org)
      gc-cons-threshold 50000000
      large-file-warning-threshold 100000000)

  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC
** coding system
#+begin_src emacs-lisp
  (set-language-environment 'Chinese-GB)
  (prefer-coding-system 'gb2312)
  (prefer-coding-system 'utf-8)
#+end_src
** theme
#+begin_src emacs-lisp
  (use-package srcery-theme)
  
  (use-package leuven-theme
    :init
    :config
    (load-theme 'leuven t))
#+end_src

** mode line
The standard (default) components of a mode-line: https://www.emacswiki.org/emacs/ModeLine
| cs:ch-fr  buf      pos line   (major minor) |

#+begin_src emacs-lisp
    (display-time-mode 1)
    (setq display-time-format "%H:%M")
    (setq display-time-interval 60)
    (setq display-time-default-load-average nil)

    (use-package hide-mode-line
      :hook
      ((neotree-mode imenu-list-minor-mode minimap-mode) . hide-mode-line-mode))  
#+end_src
** transparency
#+begin_src emacs-lisp :tangle no
  (setq default-frame-alist '((width . 90)
                              (height . 50)
                              (alpha-background . 80)))
#+end_src
** Icons
;; NOTE: Must run `M-x all-the-icons-install-fonts', and install fonts manually on Windows
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t)

(use-package all-the-icons-dired
  :ensure t
  :config (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

(use-package all-the-icons-ivy
  :ensure t
  :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+end_src
** Fonts
M-x describe-font
#+begin_src shell :tangle no
  sudo pacman -S ttf-fira-code
  sudo pacman -S nerd-fonts-fira-code
  sudo pacman -S noto-fonts noto-fonts-cjk
  yay -S  noto-fonts-sc
#+end_src

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Droid Sans Mono")

  ;; Latin
  (set-fontset-font t 'latin "Noto Sans")

  ;; East Asia: 你好, 早晨, こんにちは, 안녕하세요
  ;;
  ;; Make sure you use the right font. See
  ;; https://www.google.com/get/noto/help/cjk/.
  ;;
  ;; This font requires "Regular". Other Noto fonts dont.
  ;; ¯\_(ツ)_/¯
  (set-fontset-font t 'han "Noto Sans CJK SC Regular")
  (set-fontset-font t 'kana "Noto Sans CJK JP Regular")
  (set-fontset-font t 'hangul "Noto Sans CJK KR Regular")
  (set-fontset-font t 'cjk-misc "Noto Sans CJK KR Regular")

  ;;(setq default-font-family "Fira Code Nerd Font")
  ;;(set-face-attribute 'default nil :family default-font-family)

  (when (eq system-type 'darwin)
    (setq fonts '("SF Mono" "冬青黑体简体中文"))
    (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend)
    (set-face-attribute 'default nil :font
                        (format "%s:pixelsize=%d" (car fonts) 16)))

  (when (eq system-type 'windows-nt)
    (setq fonts '("Consolas" "微软雅黑"))
    (set-fontset-font t 'unicode "Segoe UI Emoji" nil 'prepend)
    (set-face-attribute 'default nil :font
                        (format "%s:pixelsize=%d" (car fonts) 16)))

  ;;(when (eq system-type 'gnu/linux)
  ;;  (setq fonts '("SF Mono" "Noto Sans Mono CJK SC"))
  ;;  (set-fontset-font t 'unicode "Noto Color Emoji" nil 'prepend)
  ;;  (set-face-attribute 'default nil :font
  ;;                      (format "%s:pixelsize=%d" (car fonts) 24)))

  ;;(if (display-graphic-p)
  ;;    (dolist (charset '(kana han symbol cjk-misc bopomofo))
  ;;      (set-fontset-font (frame-parameter nil 'font) charset
  ;;                        (font-spec :family (car (cdr fonts))))))
#+end_src

** frame
*** Title
#+begin_src emacs-lisp
  (defun frame-title-format ()
    "Return frame title with current project name, where applicable."
    (let ((file buffer-file-name))
      (if file
          (if (and (bound-and-true-p projectile-mode)
                   (projectile-project-p))
              (concat
               (format "[%s] " (projectile-project-name))
               (replace-regexp-in-string (format "^%s" (projectile-project-p)) "" (file-truename file)))
            (abbreviate-file-name file))
        "%b")))

  (when (display-graphic-p)
    (setq frame-title-format '("" " Happy Hacking :) "(:eval (frame-title-format)))))  
#+end_src
*** Remove unused part
#+begin_src emacs-lisp
  ;; Prevent the startup window
  (setq inhibit-startup-message t)

  ;; No alarms.
  (setq ring-bell-function 'ignore)

  ;; When on a tab, make the cursor the tab length…
  (setq-default x-stretch-cursor t)

  ;; Permanently force Emacs to indent with spaces, never with TABs
  (set-default 'indent-tabs-mode nil)

  ;; Except in Makefiles.
  (add-hook 'makefile-mode-hook 'indent-tabs-mode)

  ;; Setup fullscreen when startup
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** window
*** Split Buffers Side-by-Side
#+begin_src emacs-lisp
  ;;emacs会根据你的电脑屏幕长宽比自动调整时上下分屏还是左右分，如果想强制左右分可以这样设置：
  ;;(setq split-height-threshold nil)
  ;;(setq split-width-threshold 0)
#+end_src
*** Winner Mode
Winner Mode is a global minor mode. When activated,
it allows you to “undo” (and “redo”) changes in the window configuration with
the key commands C-c left and C-c right.
#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :init
    (winner-mode +1))
#+end_src
*** windmove
#+begin_src emacs-lisp
  (use-package windmove
    :ensure nil
    :init (windmove-default-keybindings)
    :config)

  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreguound :height 3.0 :foreground "red"))))))
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-scope 'frame))
  
  (defun my/toggle-current-window-dedication ()
    (interactive)
    (let* ((window (selected-window))
           (dedicated (window-dedicated-p window)))
      (set-window-dedicated-p window (not dedicated))
      (message "Window %sdedicated to %s"
               (if dedicated "no longer " "")
               (buffer-name))))
#+end_src
*** Focus to new Window after Split
#+begin_src emacs-lisp
  ;; https://stackoverflow.com/a/6465415
(global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
(global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+end_src
** minibuffer
** Faces/Colors
*** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :commands (rainbow-mode))
#+end_src
*** Rainbow delimiter
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src
*** Show current function
#+begin_src emacs-lisp
  ;;(which-function-mode 1)
#+end_src
*** Paging
#+begin_src emacs-lisp
  ;;	Display ^L page breaks as tidy horizontal lines
  (use-package page-break-lines
    :ensure t
    :diminish page-break-lines-mode
    :config
    (global-page-break-lines-mode t))
#+end_src
*** Emoji
Display emojis in Emacs
#+begin_src emacs-lisp
    (use-package emojify
      :ensure t
      :functions (emojify-set-emoji-data)
      :hook (after-init . global-emojify-mode)
      :config

      (setq emojify-user-emojis
            '(("(heart)" . (("name" . "Heart")
                            ("image" . "~/.emacs.d/emojis/emojione-v2.2.6-22/2665.png")
                            ("style" . "github")))))

      ;; If emojify is already loaded refresh emoji data
      (when (featurep 'emojify)
        (emojify-set-emoji-data)))

    (use-package company-emoji)

    (use-package flycheck-status-emoji)
#+end_src
** line numbers and whitespace indicators
*Display line numbers (buffer-local)*
  I seldom use line numbers, but here it is.  This toggles the setting for the local buffer and also activates /hl-line-mode/.
*Display invisible characters (whitespace)*
  Viewing invisible characters (whitespace) can be very helpful under certain circumstances.  Generally though, I do not keep it active.

As for /delete-trailing-whitespace/, I prefer to call it manually because sometimes it causes problems, such as with diffs.
#+begin_src emacs-lisp
  ;; Turn on line numbers
  ;; (global-display-line-numbers-mode)
  ;; (menu-bar-display-line-numbers-mode 'relative)
  ;; (if (version< emacs-version "26")
  ;;    (global-linum-mode)
  ;;  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  ;;  (add-hook 'prog-mode-hook #'display-line-numbers-mode))

  (use-package display-line-numbers
    :config
    ;; Set absolute line numbers.  A value of "relative" is also useful.
    (setq display-line-numbers-type t)
    ;; Those two variables were introduced in Emacs 27.1
    (setq display-line-numbers-major-tick 0)
    (setq display-line-numbers-minor-tick 0)
    ;; Use absolute numbers in narrowed buffers
    (setq display-line-numbers-widen t)

    (define-minor-mode my/display-line-numbers-mode
      "Toggle `display-line-numbers-mode' and `hl-line-mode'."
      :init-value nil
      :global nil
      (if my/display-line-numbers-mode
          (progn
            (display-line-numbers-mode 1)
            (hl-line-mode 1)
            (setq-local truncate-lines t))
        (display-line-numbers-mode -1)
        (hl-line-mode -1)
        (setq-local truncate-lines nil)))
    :bind ("<f11>" . my/display-line-numbers-mode))
  
  ;; trailing-whitespace: 拖尾空格，结尾空格
  (use-package whitespace
    :config
    (defun my/toggle-invisibles ()
      "Toggles the display of indentation and space characters."
      (interactive)
      (if (bound-and-true-p whitespace-mode)
          (whitespace-mode -1)
        (whitespace-mode)))
    :bind (("<f6>" . my/toggle-invisibles)
           ("C-c z" . delete-trailing-whitespace)))
  ;; 保存时自动清除行尾空格及文件结尾空行
  ;;(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** Column
#+begin_src emacs-lisp :tangle no
  (use-package emacs
    :ensure nil
    :diminish display-fill-column-indicator-mode auto-fill-mode
    :hook
      ;;((text-mode org-mode) . display-fill-column-indicator-mode)
      ((text-mode org-mode) . auto-fill-mode))
#+end_src
** Buffer
*** buffer move
#+begin_src emacs-lisp
  (use-package buffer-move
    :ensure t
    :config
    :bind       ("C-x w f" . #'buf-move-right)
    :bind       ("C-x w b" . #'buf-move-left)
    :bind       ("C-x w p" . #'buf-move-up)
    :bind       ("C-x w n" . #'buf-move-down))
#+end_src

*** uniquify
#+begin_src emacs-lisp
  ;; Unify the buffer name style
  (use-package uniquify
    :ensure nil
    :config
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
    (setq uniquify-strip-common-suffix t)
    (setq uniquify-after-kill-buffer-p t))
#+end_src

*** auto revert
#+begin_src emacs-lisp
  ;; Automatically reload files was modified by external program
  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode))
#+end_src
*** Ibuffer
**** Dired (using dired-rainbow)
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :ensure t
    :init
    (eval-after-load 'dired '(require 'dired-rainbow))

    :config

    (defconst dired-audio-files-extensions
      '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
      "Dired Audio files extensions")
    (dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

    (defconst dired-video-files-extensions
      '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
        "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
      "Dired Video files extensions")
    (dired-rainbow-define video "#455AFC" dired-video-files-extensions)

    (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))
    (dired-rainbow-define xml "DarkGreen" ("xml" "xsd" "xsl" "xslt" "wsdl"))

    (dired-rainbow-define document "#ce5c00" ("doc" "docx" "odt" "pdb" "pdf" "ps" "rtf" "djvu"))
    (dired-rainbow-define image "#ff4b4b" ("jpg" "png" "jpeg" "gif"))

    (dired-rainbow-define sourcefile "#3F82FD" ("el" "groovy" "gradle" "py" "c" "cc" "h" "java" "pl" "rb"))

    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#ad7fa8" ("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#e6a8df" ("deb" "rpm"))
    (dired-rainbow-define encrypted "LightBlue" ("gpg" "pgp"))

    (dired-rainbow-define-chmod executable-unix "Green" "-.*x.*")

    (dired-rainbow-define log (:inherit default :italic t) ".*\\.log")
    )
#+end_src

**** Helpers
#+begin_src emacs-lisp
  (defun ibuffer-clean ()
    "Clean automatically created buffers"
    (interactive)
    (ibuffer-unmark-all ?*)
    (ibuffer-mark-by-mode 'help-mode)
    (ibuffer-mark-by-mode 'magit-mode)
    (ibuffer-mark-by-mode 'occur-mode)
    (ibuffer-mark-by-mode 'grep-mode)
    (ibuffer-mark-by-mode 'dired-mode)
    (ibuffer-mark-by-mode 'completion-list-mode)
    (ibuffer-mark-by-mode 'compilation-mode)
    (ibuffer-mark-by-mode 'Man-mode)
    (ibuffer-mark-by-mode 'browse-kill-ring-mode)
    (ibuffer-mark-by-name-regexp "*anything*")
    (ibuffer-mark-by-name-regexp "*ESS*")
    (ibuffer-mark-by-name-regexp "*Shell Command Output*")
    (ibuffer-mark-by-name-regexp "*Compile-Log*")
    (ibuffer-mark-by-name-regexp "*vc-diff*")
    (ibuffer-do-delete))
#+END_SRC

** tab
#+begin_src emacs-lisp
;;(setq tab-bar-close-button-show nil)
#+end_src
** cursor, mark and regoin
*** cursor
#+begin_src emacs-lisp
  ;; 设置光标颜色
  ;;(set-cursor-color "green2")
  ;; 设置光标样式
  ;;(setq-default cursor-type 'box)

  (use-package frame
    :ensure nil
    :commands my/cursor-type-mode
    :config
    (setq-default cursor-type 'box)
    (setq-default cursor-in-non-selected-windows '(bar . 2))
    (setq-default blink-cursor-blinks 50)
    (setq-default blink-cursor-interval nil) ; 0.75 would be my choice
    (setq-default blink-cursor-delay 0.2)

    (blink-cursor-mode -1)

    (define-minor-mode my/cursor-type-mode
      "Toggle between static block and pulsing bar cursor."
      :init-value nil
      :global t
      (if my/cursor-type-mode
          (progn
            (setq-local blink-cursor-interval 0.75
                        cursor-type '(bar . 2)
                        cursor-in-non-selected-windows 'hollow)
            (blink-cursor-mode 1))
        (dolist (local '(blink-cursor-interval
                         cursor-type
                         cursor-in-non-selected-windows))
          (kill-local-variable `,local))
        (blink-cursor-mode -1))))
#+end_src

Never lose your cursor again
#+begin_src emacs-lisp
;; 切换buffer焦点时高亮动画
(use-package  beacon
  :ensure t
  :hook (after-init . beacon-mode))
#+end_src
*** mark
The mark ring
每次你跳转了光标(文本搜索或者按下了 M-<或 M->)，
Emacs使用mark标记下你的前一个位置.
C-x C-x exchange-point-and-mark
*** expand region
#+begin_src emacs-lisp
  ;; Expand selected region by semantic units
  (use-package expand-region
    :ensure t
    :config
    (pending-delete-mode t)
     :bind ("C-=" . er/expand-region))
#+end_src
** Highlight
#+begin_src emacs-lisp
  ;; Parenthesis
  (use-package highlight-parentheses
    :ensure t
    :diminish 'highlight-parentheses-mode
    :config
    (add-hook 'prog-mode-hook #'highlight-parentheses-mode))

  ;; Highlight numbers for prog modes
  (use-package highlight-numbers
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))

  ;;(use-package auto-highlight-symbol
  ;;  :ensure t
  ;;  :config
  ;;  (global-auto-highlight-symbol-mode t))

  ;; Always hightlight current line
  ;;(global-hl-line-mode t)
#+end_src
** Minor-mode activation
I use some minor modes based on some filetypes. This package is an helper which facilitates these
activations.

#+begin_src emacs-lisp
(use-package auto-minor-mode
  :ensure t)
#+end_src
** bookmark
** register
** mode
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
** Undo
#+BEGIN_SRC emacs-lisp
;; Undo-tree
(use-package undo-tree
  :config
  (setq undo-tree-visualizer-timestamps t)
  (setq undo-tree-visualizer-diff t)
  (setq undo-tree-auto-save-history t)
  ;; save all undo histories to this location
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  (defadvice undo-tree-make-history-save-file-name
      (after undo-tree activate)
    (setq ad-return-value (concat ad-return-value ".gz")))
  (global-undo-tree-mode)
  :defer t
  :diminish 'undo-tree-mode)
#+END_SRC

** recent file
Opening recent files is always an easy and fast shortcut. Some files should be ignored though. That
leads to this configuration

#+begin_src emacs-lisp
;; Builds a list of recently opened files
(use-package recentf
  :ensure t
  :config
  (setq recentf-max-saved-items 100
        recentf-max-menu-items 5
        recentf-save-file (concat user-emacs-directory ".cache/recentf")
        recentf-auto-cleanup 'never)
  (recentf-mode 1)

  (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
  (add-to-list 'recentf-exclude (expand-file-name (concat user-emacs-directory ".cache/")))
  (add-hook 'delete-terminal-functions (lambda (terminal) (recentf-save-list))))

#+END_SRC
** backupps file
  When Emacs makes a backup file, its name is normally constructed by
  appending ‘~’ to the file name being edited; thus, the backup file for
  ‘eval.c’ would be ‘eval.c~’.
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src
** auto-save
  Normally, the auto-save file name is made by appending ‘#’ to the
front and rear of the visited file name.  Thus, a buffer visiting file
‘foo.c’ is auto-saved in a file ‘#foo.c#’.
  #+begin_src emacs-lisp
    ;;The variable ‘auto-save-interval’ specifies how many characters there are between auto-saves.
    (setq-default auto-save-interval 100);;By default, it is 300.
    ;;Auto-saving also takes place when you stop typing for a while.
    (setq-default auto-save-timeout 15) ;;By default, it is 30 seconds.

    (defvar auto-save-directory "~/.emacs.d/auto-save/")
    (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))

    (when (not (file-exists-p auto-save-directory))
      (make-directory auto-save-directory t))
  #+end_src

** recursive-edit
** Keyboard Macro
<F3>     (‘kmacro-start-macro-or-insert-counter’).
<F4>     (‘kmacro-end-or-call-macro’).
There is only one keyboard macro ring, shared by all buffers.
All commands which operate on the keyboard macro ring use the same
‘C-x C-k’ prefix.
Note that Emacs treats the head of the macro ring as the last defined
keyboard macro.  For instance, <F4> will execute that macro, and ‘C-x
C-k n’ will give it a name.
** fringe mode
The fringes are areas to the right and left side of an Emacs frame. They can be used to show status-related or contextual feedback
such as line truncation indicators, continuation lines, code linting markers, etc.

The default fringe width (*nil*) is 8 pixels on either side, which I approve of. It is possible to set the value of the *fringe-mode* to
something like *'(10 . 5)* which applies the varied width to the left and right side respectively.
Otherwise, we can use a single integer that controls both sides.

The use of *setq-default* is necessary, otherwise these values become buffer-local.
#+begin_src emacs-lisp
  (use-package fringe
    :ensure nil
    :config
    (fringe-mode nil)
    (setq-default fringes-outside-margins nil)
    (setq-default indicate-buffer-boundaries nil)
    (setq-default indicate-empty-lines nil)
    (setq-default overflow-newline-into-fringe t))
#+end_src

** which-key
#+BEGIN_SRC emacs-lisp
  ;; Display available keybindings in a popup
  (use-package which-key
    :ensure t
    :diminish
    :config
;;    ;;Manual Activation
;;    (setq which-key-show-early-on-C-h nil)
;;    (setq which-key-idle-delay most-positive-fixnum)
;;    (setq which-key-idle-secondary-delay 0.05)
    (setq which-key-idle-delay 0.5)
    (setq which-key-popup-type 'side-window)
    (setq which-key-show-prefix 'echo)
    (setq which-key-max-display-columns 4)
    (setq which-key-separator " → " )
    (setq which-key-special-keys nil)
    (which-key-mode 1))
#+END_SRC
** Custom Keybinding
  emacs'key binding system
  C-u C-x =: what-cursor-position
*** personal
#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "M-/") nil)
(global-set-key (kbd "C-x C-b") #'ibuffer)
(global-set-key (kbd "C-x C-e") #'pp-eval-last-sexp)

(global-set-key (kbd "M-i") #'imenu)

(global-set-key (kbd "C-x k") 'kill-this-buffer)

(use-package helm-descbinds
  :ensure t
  :commands (helm-descbinds)
  :bind
  ("C-h b" . helm-descbinds))

;;opening new lines can be finichy
(defun open-line-below()
    "open line below."
    (interactive)
    (end-of-line)
    (newline)
    (indent-for-tab-command))
(defun open-line-above()
    "open line above."
    (interactive)
    (beginning-of-line)
    (newline)
    (forword-line -1)
    (indent-for-tab-command))
(global-set-key (kbd "<C-return>") 'open-line-below)
(global-set-key (kbd "<C-S-return>") 'open-line-above)

(defun scroll-half-page-down ()
  "scroll down half the page"
  (interactive)
  (scroll-down (/ (window-body-height) 2)))

(defun scroll-half-page-up ()
  "scroll up half the page"
  (interactive)
  (scroll-up (/ (window-body-height) 2)))

(global-set-key "\M-n" 'scroll-half-page-up)
(global-set-key "\M-p" 'scroll-half-page-down)

(global-set-key (kbd "C-S-n")
                (lambda()
                  (interactive)
                  (ignore-errors (next-line 5))))
(global-set-key (kbd "C-S-p")
                (lambda()
                  (interactive)
                  (ignore-errors (previous-line 5))))
(global-set-key (kbd "C-S-f")
                (lambda()
                  (interactive)
                  (ignore-errors (forword-char 5))))
(global-set-key (kbd "C-S-b")
                (lambda()
                  (interactive)
                  (ignore-errors (backward-char 5))))
;;
;; Copy or Cut one line if no content selected
;;
;; copy region or whole line
(global-set-key "\M-w"
(lambda ()
  (interactive)
  (if mark-active
      (kill-ring-save (region-beginning)
      (region-end))
    (progn
     (kill-ring-save (line-beginning-position)
     (line-end-position))
     (message "copied line")))))

;; kill region or whole line
(global-set-key "\C-w"
(lambda ()
  (interactive)
  (if mark-active
      (kill-region (region-beginning)
   (region-end))
    (progn
     (kill-region (line-beginning-position)
  (line-end-position))
     (message "killed line")))))

#+END_SRC
*** go to last change
I could not find any built-in method of reliably moving back to the
  last change.  Using the mark ring is always an option, but does not fill
  the exact same niche.
The C-z binding is disabled elsewhere in this document.  It minimises
  the Emacs GUI by default.  A complete waste of an extremely valuable key
  binding!
#+begin_src emacs-lisp
(use-package goto-last-change
  :ensure
  :bind ("C-z" . goto-last-change))
#+end_src
*** Change letter case
#+begin_src emacs-lisp
(defun upcase-backward-word (arg)
  (interactive "p")
  (upcase-word (- arg)))

(defun downcase-backward-word (arg)
  (interactive "p")
  (downcase-word (- arg)))

(defun capitalize-backward-word (arg)
  (interactive "p")
  (capitalize-word (- arg)))
#+end_src


* org
| command                       | keyboard | help                             |
|-------------------------------+----------+----------------------------------|
| org-agenda-list               | C-c a    | 打开一周的 agenda 计划表         |
| org-metaup                    | M-up     | 将当前标题（或列表）及子项上移   |
| org-metadown                  | M-down   | 将当前标题（或列表）及子项下移   |
| org-metaleft                  | M-left   | 增加当前标题层级，或改变列表前缀 |
| org-metaright                 | M-right  | 减小当前标题层级，或改变列表前缀 |
| org-insert-structure-template | C-c C-,  | Insert a block structure         |
| org-edit-src-code             |          | edit source block               |

** Global
#+begin_src emacs-lisp
  (use-package org
      :config
      (setq
           org-startup-indented t
           org-startup-folded t
           org-show-following-heading t
           org-show-hierarchy-above t
           org-show-siblings '((default))
           org-src-fontify-natively t
           org-src-tab-acts-natively t
           org-hide-emphasis-markers t))
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
  
  ;; add bullets to prettify the org mode stars
  (use-package org-bullets
    :after org
    :hook
    (org-mode . org-bullets-mode))
#+end_src
** Taking Note with Org Roam
#+begin_src emacs-lisp :tangle no
;; User Manual: https://www.orgroam.com/manual.html
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/org/roam/"))
  (org-roam-completion-everywhere t)
  :bind
  ("C-c n l" . org-roam-buffer-toggle)
  ("C-c n f" . org-roam-node-find)
  ("C-c n g" . org-roam-graph)
  ("C-c n i" . org-roam-node-insert)
  ("C-c n c" . org-roam-capture)
  ("C-c n r" . org-roam-node-random)
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (org-roam-db-autosync-mode)
  (require 'org-roam-dailies)  ; Ensure the keymap is available
  (add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer))))

(use-package org-roam-ui
  :after org-roam
  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
* Editing
** Editing as root
Defining a simple helper to edit file as root using tramp

#+begin_src emacs-lisp
  (defun edit-current-file-as-root ()
    "Edit the file that is associated with the current buffer as root"
    (interactive)
    (if (buffer-file-name)
        (find-file (concat "/sudo:localhost:" (buffer-file-name)))
      (message "Current buffer does not have an associated file.")))
#+end_src
** vlf
#+begin_src emacs-lisp
;; Open Large file
(use-package vlf
  :ensure t
  :config
  (require 'vlf-setup))
#+end_src
** Diff
#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :hook
  (dired-mode . diff-hl-dired-mode-unless-remote)

  :config
  (global-diff-hl-mode)
  (fringe-mode 10))
#+end_src
** Navigation
*** scroll
C-v scroll-up-command
M-v scroll-down-command
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :config
    (setq-default scroll-preserve-screen-position t);;keep point at the same screen position
    (setq-default scroll-conservatively 101) ;; affects `scroll-step'
    (setq-default scroll-margin 0))
#+end_src

*** goto-line-preview
Preview line when executing goto-line command.
#+BEGIN_SRC emacs-lisp
  (use-package goto-line-preview
    :ensure t
    :commands (goto-line-preview)
    :bind
    (("M-g g" . goto-line-preview)))
#+END_SRC
*** Ace jump
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :config
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+END_SRC
*** Avy
#+begin_src emacs-lisp
  (use-package avy
    :config
    (global-set-key (kbd "M-g w") 'avy-goto-word-1))
#+end_src
*** Remember last jump
An Emacs package to move point through buffer-undo-list positions.
#+BEGIN_SRC emacs-lisp
  (use-package goto-last-point
    :ensure t
    :functions (goto-last-point-mode)
    ;;:bind ("C-<" . goto-last-point)
    :config (goto-last-point-mode))
#+END_SRC
** Searching
Double-saber is really helpful to reduce the result of a search after the search itself.

#+BEGIN_SRC emacs-lisp
  (use-package double-saber
    :ensure t
    :config
    (with-eval-after-load "ripgrep"
      (add-hook 'ripgrep-search-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Ripgrep finished"))))

    (with-eval-after-load "grep"
      (add-hook 'grep-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Grep finished"))))

    (with-eval-after-load "ggtags"
      (add-hook 'ggtags-global-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Global found")))))

  (with-eval-after-load "ivy"
    (add-hook 'ivy-occur-grep-mode-hook
              (lambda ()
                (double-saber-mode)
                (setq-local double-saber-start-line 5))))
#+END_SRC

** Copy/Pasted/Delete
Baseline configuration for copy/pasting, nothing fancy.

#+begin_src emacs-lisp
(setq mouse-drag-copy-region nil
      select-enable-primary nil
      select-enable-clipboard t
      select-active-regions t)
#+end_src

Hungry deletion
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :diminish
    :init (setq hungry-delete-except-modes
              '(help-mode minibuffer-mode minibuffer-inactive-mode calc-mode))
    :hook (after-init . global-hungry-delete-mode)
    :config (setq-default hungry-delete-chars-to-skip " \t\f\v"))
#+end_src

** Evil Nerd Commenter
Evil Nerd Commenter, a tool that helps you comment code efficiently.
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :bind
    (("C-c M-;" . c-toggle-comment-style)
     ("M-;" . evilnc-comment-or-uncomment-lines)))
#+END_SRC
** region-rectangle
C-x <SPC> rectangle-mark-mode
C-x r t string-rectangle
** multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c"   . mc/edit-lines)
         ("C->"           . mc/mark-next-like-this)
         ("C-<"           . mc/mark-previous-like-this)
         ("C-c C-<"       . mc/mark-all-like-this)
         ("C-M->"         . mc/skip-to-next-like-this)
         ("C-M-<"         . mc/skip-to-previous-like-this)
         ("s-<mouse-1>"   . mc/add-cursor-on-click)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click)
         :map mc/keymap
         ("C-|" . mc/vertical-align-with-space)))

;; Smartly select region, rectangle, multi cursors
;;(use-package smart-region
;;  :ensure t
;;  :hook (after-init . smart-region-on))

;; Edit multiple regions simultaneously in a buffer or a region
;;(use-package iedit
;;  :ensure t
;;  :config
;;  (delete-selection-mode t))
#+end_src
** Smart parents
#+begin_src emacs-lisp :tangle no
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    ;; Activate smartparens globally
    (smartparens-global-mode t)
    (show-smartparens-global-mode t))
#+end_src
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    ;; Activate smartparens globally
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)

    ;; Activate smartparens in minibuffer
    (add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-mode)

    ;; Do not pair simple quotes
    (sp-pair "'" nil :actions :rem))

  ;;[[Newline and indent on appropriate pairs][https://github.com/Fuco1/smartparens/issues/80]]
  (sp-local-pair '(c-mode) "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
  (sp-local-pair 'c++-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))

  (defun my-create-newline-and-enter-sexp (&rest _ignored)
    "Open a new brace or bracket expression, with relevant newlines and indent. "
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))
#+end_src

** format
*** format-all
We can globally reformat the buffer relying on external tool. =format-all= is here for this.

#+begin_src emacs-lisp :tangle no
  (use-package format-all
    :commands (format-all-buffer format-all-mode))
  (setq clang-format-style-option "google")
#+end_src

*** Indentation
#+begin_src emacs-lisp :tangle no
  (use-package highlight-indent-guides
    :ensure t
    :diminish highlight-indent-guides-mode
    :commands (highlight-indent-guides-mode)
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character));;fill, column, character, bitmap
#+end_src

* Writing
** Inspiration helpers
  As I write papers, it is useful to have some helper to start to have the inspiration.
*** academic-phrases
  #+begin_src emacs-lisp
    ;; Bypass that mental block when writing your papers.
    ;; This work was based on the freely available PDF titled “English for Writing Research - Papers Useful Phrases” .
    (use-package academic-phrases
      :ensure t)
  #+end_src
*** Synonyms
  *emacs-powerthesaurus* is a simple plugin to integrate Emacs with amazing [[https://www.powerthesaurus.org/][powerthesaurus.org]].
  #+begin_src emacs-lisp
  (use-package powerthesaurus
    :ensure t
    :bind
    ("M-`" . powerthesaurus-lookup-word-dwim))
  #+end_src
** Translation
*** WordReference
#+begin_src emacs-lisp
  (use-package wordreference
    :ensure nil
    :config
    :load-path default-plugin-dir
    :commands (wordreference wordreference-at-point))
  
  ;; Merriam-Webster Thesaurus
  (use-package mw-thesaurus
    :ensure t
    :config
    :commands (mw-thesaurus-lookup-dwim))
#+end_src

** Chinese input
*** pyim
#+BEGIN_SRC emacs-lisp
(use-package pyim
  :init
  (use-package posframe :defer t)
  :custom
  (default-input-method "pyim")
  (pyim-default-scheme 'quanpin)
  (pyim-page-tooltip 'posframe)
  (pyim-page-length 9)
  :config
  (pyim-isearch-mode 1)
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-isearch-mode
                  pyim-probe-org-structure-template))
  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))
  :bind
  ("M-j" . pyim-convert-string-at-point)) ; M-j 强制将光标前的拼音字符串转换为中文。

(use-package pyim-basedict
  :after pyim
  :config (pyim-basedict-enable))
#+END_SRC

* reading
** Info
- Access
  C-h i (Info)
  C-h i d (Directory)
  C-h i d m (Menu)
  C-h R manual-name (Pick manual. Use completion to see all choices)
- Navigation
  g goto a node. Use completion to see all nodes in manual.
  t goto top node of manual
  f goto a cross reference
** manpage
#+begin_src emacs-lisp
  (use-package man
  :ensure nil
  :config
  (setq Man-notify-method 'aggressive))
#+end_src
** olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :config
    (setq olivetti-body-width 0.7)
    (setq olivetti-minimum-body-width 80)
    (setq olivetti-recall-visual-line-mode-entry-state t))
#+end_src

* Language checking
*** Spelling
Configuration of the (fly) spelling for emacs. For spelling, I am using aspell.

#+begin_src shell :tangle no
sudo pacman -S aspell
#+end_src

#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :bind (:map flyspell-mode-map
    ;;          ("C-," . nil)
               ("C-;" . nil))
    :config
    ;; Some skipping
    (add-to-list 'ispell-skip-region-alist '("^#+begin_src" . "^#+end_src"))
    (add-hook 'text-mode-hook 'flyspell-mode)

    (setq flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)
      :diminish 'flyspell-mode)

  (use-package flyspell-correct
   :ensure t
   :after flyspell
   :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

  ;; Replace with flyspell-correct-helm if you are a helm person.
  (use-package flyspell-correct-ivy
    :ensure t
    :after flyspell-correct)
#+end_src
*** English checking
lang-tool is actually supported by emacs through a dedicated mode which allows to have syntax and
typography checking.
something likes: grammarly

#+begin_src shell :tangle no
sudo pacman -S languagetool
#+end_src

To check current buffer and show warnings.
M-x langtool-check
To finish checking. All langtool marker is removed.
M-x langtool-check-done

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package langtool
    :ensure t
    :init
    (setq langtool-java-classpath
          "/usr/share/languagetool:/usr/share/java/languagetool/*"))
    ;;(setq langtool-language-tool-server-jar "~/work/tools/src/languagetool/languagetool/languagetool-server.jar"))
    (setq langtool-default-language "en-US")
#+END_SRC
* Templating
** Edition templates
The default configuration of yasnippet consists of activating it and plugging it with company.
Ivy-yasnippet is used for snippet discovery.
#+BEGIN_SRC emacs-lisp
;; Yasnippet, a template system for emacs
  (use-package yasnippet
    :ensure t
    :config

    ;; Adding yasnippet support to company
    (eval-after-load 'company
      '(lambda ()
         (add-to-list 'company-backends 'company-yasnippet)))

    ;; Add third parties snippets
    (defvar third-parties-snippet-dir (format "%s/third_parties/snippets" user-emacs-directory)
      "Directory containing my own snippets")

    (defun third-parties-snippets-initialize ()
      (add-to-list 'yas-snippet-dirs 'third-parties-snippet-dir t)
      (yas-load-directory third-parties-snippet-dir t))

    (eval-after-load 'yasnippet '(third-parties-snippets-initialize))

    ;; Activate global
    (yas-global-mode))

  ;; Load official snippets
  (use-package yasnippet-snippets
    :ensure t)
  (use-package yasnippet-classic-snippets
    :ensure t)

  ;; Connect with ivy to have a list on demand
  (use-package ivy-yasnippet
    :ensure t)

#+END_SRC
** Filetype templates
This part is using yatemplate (an over-layer of yasnippet) coupled with auto-insert to have a set of
file type dedicated templates. The templates are available in =third_parties/templates= directory.

To put some predefined text at the beginning of the buffer.
M-x *auto-insert*

#+begin_src emacs-lisp
  (use-package yatemplate
    :ensure t
    :after yasnippet
    :config

    ;; Define template directory
    (setq yatemplate-dir (concat user-emacs-directory "/third_parties/templates"))

    ;; Coupling with auto-insert
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist)
    ;; (add-hook 'find-file-hook 'auto-insert)
    )
#+end_src


* Completion
** consult
#+begin_src emacs-lisp
;; Consulting completing-read
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ;; ("M-#" . consult-register-load)
         ;; ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ;; ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
) 
#+end_src

** vertico
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
#+end_src
** orderless
#+begin_src emacs-lisp
  (use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
** marginalia
#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))
#+end_src
** Company
In order to have inline completion, really important for coding, I use company. However I adapted
some facing attributes. Each language is also adding its backend when needed. Therefore, only global
configuration here.

All of the Company frontends can be categorized by the type of the output into the three groups: tooltip-, preview-, and echo- frontends.

Quick Access a Candidate: By default, quick-access key bindings utilize a modifier META and one of the digits,

The name of the currently active backend is shown in the mode line and in the output of the command M-x company-diag.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :hook
  (emacs-lisp-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-elisp))))
  :config

  ;; Global
  (setq company-idle-delay (lambda () (if (company-in-string-or-comment) nil 0.3))
        company-minimum-prefix-length 1
        company-show-numbers t
        company-tooltip-limit 20)

  ;; using child frame
  (use-package company-posframe
    :ensure t
    :diminish company-posframe-mode
    :hook (company-mode . company-posframe-mode))

  ;; Facing
  (unless (face-attribute 'company-tooltip :background)
    (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
    (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
    (set-face-attribute 'company-preview nil :background "black")
    (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
    (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
    (set-face-attribute 'company-scrollbar-fg nil :background "gray40"))

  ;; Default backends
  (setq company-backends '(company-capf company-files))

  ;; Activating globally
  (global-company-mode t))

(use-package company-quickhelp
  :ensure t
  :after company
  :config
  (company-quickhelp-mode 1))

;; A company front-end with icons
(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode)
  :diminish company-box-mode)
#+end_src
* Syntax checking
#+begin_src emacs-lisp
  ;; Disable checking doc
  (use-package flycheck
    :commands (flycheck-error-list-set-filter flycheck-next-error flycheck-previous-error flycheck-first-error)
    :hydra
    (hydra-flycheck (:pre (progn (setq hydra-hint-display-type t) (flycheck-list-errors))
                     :post (progn (setq hydra-hint-display-type nil) (quit-windows-on "*Flycheck errors*"))
                     :color teal :hint nil)
                    "Errors"
                    ("f"  flycheck-error-list-set-filter                            "Filter")
                    ("j"  flycheck-next-error                                       "Next")
                    ("k"  flycheck-previous-error                                   "Previous")
                    ("gg" flycheck-first-error                                      "First")
                    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
                    ("<" hydra-project/body "back")
                    ("q"   nil "cancel" :color blue))

    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message) line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))
    )
#+end_src
* Terminal
#+begin_src emacs-lisp
    (use-package vterm
    :config
    (define-key vterm-mode-map (kbd "<f1>") nil)
    (define-key vterm-mode-map (kbd "<f2>") nil)
    (define-key vterm-mode-map (kbd "<f3>") nil)
    (define-key vterm-mode-map (kbd "<f4>") nil)
    (define-key vterm-mode-map (kbd "<f5>") nil)
    (define-key vterm-mode-map (kbd "<f6>") nil)
    (define-key vterm-mode-map (kbd "<f7>") nil)
    (define-key vterm-mode-map (kbd "<f8>") nil)
    (define-key vterm-mode-map (kbd "<f9>") nil)
    (define-key vterm-mode-map (kbd "<f10>") nil)
    (define-key vterm-mode-map (kbd "<f11>") nil)
    (define-key vterm-mode-map (kbd "<f12>") nil)
    :custom
    ;;(vterm-shell "bash" "Set to bash instead of the default $SHELL so that vterm from TRAMP uses bash.")
    (vterm-kill-buffer-on-exit t)
    :hook
    (vterm-mode . goto-address-mode))
  (use-package vterm-toggle
    :config
    ;; show vterm buffer in side window
    (add-to-list 'display-buffer-alist
                 '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-in-side-window)
                   (side . bottom)
                   (dedicated . t)
                   ;; (reusable-frames . visible) ;; depends on how I use Emacs / Emacs Client
                   (window-height . 0.3)))
    :commands (vterm-toggle))
#+end_src
* Version management
** magit
#+BEGIN_SRC emacs-lisp
;; A git interface for emacs
(use-package magit
  :config
  (setq magit-refresh-status-buffer nil)
  :diminish 'auto-revert-mode
  :defer t)

(global-set-key (kbd "C-x g") #'magit-status)
(global-set-key (kbd "C-x M-g") #'magit-dispatch)

;; Show diffs in the gutter
(use-package diff-hl
  :config
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (global-diff-hl-mode t)
  (diff-hl-flydiff-mode t))
#+END_SRC
* File/Dir management
** Diff
*** Global
#+begin_src emacs-lisp
  (use-package ediff
    :config
    (autoload 'diff-mode "diff-mode" "Diff major mode" t)
    (setq diff-switches "-u"
          ediff-auto-refine-limit (* 2 14000)
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function
          (lambda (&optional arg)
            (if (> (frame-width) 160)
                (split-window-horizontally arg)
              (split-window-vertically arg)))))
#+end_src
*** Helpers for region diff
#+begin_src emacs-lisp
  (defun diff-region ()
    "Select a region to compare"
    (interactive)
    (when (use-region-p) ; there is a region
      (let (buf)
        (setq buf (get-buffer-create "*Diff-regionA*"))
        (save-current-buffer
          (set-buffer buf)
          (erase-buffer))
        (append-to-buffer buf (region-beginning) (region-end)))
      )
    (message "Now select other region to compare and run `diff-region-now`"))

  (defun diff-region-now ()
    "Compare current region with region already selected by `diff-region`"
    (interactive)
    (when (use-region-p)
      (let (bufa bufb)
        (setq bufa (get-buffer-create "*Diff-regionA*"))
        (setq bufb (get-buffer-create "*Diff-regionB*"))
        (save-current-buffer
          (set-buffer bufb)
          (erase-buffer))
        (append-to-buffer bufb (region-beginning) (region-end))
        (ediff-buffers bufa bufb))
      ))
#+end_src
** Trash
#+begin_src emacs-lisp
  ;; Ask confirmation only once and move to trash
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)

  (defun empty-trash()
    "Command to empty the trash (for now gnome/linux specific)"
    (interactive)
    (shell-command "rm -rf ~/.local/share/Trash/*"))

  (defun open-trash-dir()
    "Command to open the trash dir"
    (interactive)
    (find-file "~/.local/share/Trash/files"))
#+end_src


* Language Server
** lsp
To use clangd, you need:
  - clangd installed
  - a plugin for your editor
  - to tell clangd how your project is built
    - compile_commands.json
    
1. Completion at point#
If LSP server supports completion, lsp-mode use symbols returned by
the server to present the user when completion is triggered via
completion-at-point.
2. Code navigation
lsp-find-definition
lsp-find-references

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :custom
  ;; clangd is fast
  (lsp-idle-delay 0.5)
  ;; code action
  (lsp-modeline-code-actions-mode t)
  ;;面包屑导航
  (lsp-headerline-breadcrumb-enable nil)
  ;; enable log only for debug
  (lsp-log-io nil)
  ;; handle yasnippet by myself
  (lsp-enable-snippet nil)
  ;; turn off for better performance
  (lsp-enable-symbol-highlighting t)
  ;; might use `company-ctags'
  (lsp-enable-completion-at-point t)
  ;; auto restart lsp
  (lsp-restart 'auto-restart)

  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (c++-mode . lsp)
         (c-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
#+end_src
** lsp-ui
1. Code navigation - using builtin xref, lsp-treemacs tree views or
   lsp-ui peek functions.
2. What is peek?
   We think there's nothing worse than a big context switch when all you
   want is to quickly check something. That's why we support peeked
   editors.When you execute a Go to References search (lsp-ui-peek-find-reference),
   or a Peek Definition (lsp-ui-peek-find-definition), we embed the result
   inline.
3. Code Actions = Quick Fixes and refactorings
   Warnings and Errors can provide Code Actions (also known as Quick
   Fixes) to help fix issues. These will be displayed in the editor in
   the left margin as a lightbulb "". Clicking on the lightbulb will
   either display the Code Action options or perform the action.
4. Code completion\IntelliSense
   IntelliSense is a general term for various code editing features
   including: code completion, parameter info, quick info, and member
   lists.
   IntelliSense features are sometimes called by other names
   such as "code completion", "content assist", and "code hinting."      
   
#+begin_src emacs-lisp
;; optionally
;; LSP UI tools
(use-package lsp-ui
  :ensure t
  :custom
  ;; lsp-ui-doc
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature nil)
  (lsp-ui-doc-position 'top) ;; top, bottom, or at-point
  (lsp-ui-doc-max-width 120)
  (lsp-ui-doc-max-height 30)
  (lsp-ui-doc-use-childframe t)
  (lsp-ui-doc-use-webkit t)
  ;; lsp-ui-flycheck
  (lsp-ui-flycheck-enable nil)
  ;; lsp-ui-sideline
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-symbol t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-show-diagnostics nil)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-code-actions-prefix "")
  ;; lsp-ui-imenu
  (lsp-ui-imenu-enable t)
  (lsp-ui-imenu-kind-position 'top)
  ;; lsp-ui-peek
  (lsp-ui-peek-enable t)
  (lsp-ui-peek-peek-height 20)
  (lsp-ui-peek-list-width 50)
  (lsp-ui-peek-fontify 'on-demand) ;; never, on-demand, or always
  :preface
  (defun my/toggle-lsp-ui-doc ()
    (interactive)
    (if lsp-ui-doc-mode
        (progn
          (lsp-ui-doc-mode -1)
          (lsp-ui-doc--hide-frame))
      (lsp-ui-doc-mode 1)))
  :bind
  (:map lsp-mode-map
        ("C-c C-r" . lsp-ui-peek-find-references) ;; peek style
        ("C-c C-j" . lsp-ui-peek-find-definitions)
        ("C-c i"   . lsp-ui-peek-find-implementation)
        ("C-c m"   . lsp-ui-imenu)
        ("C-c s"   . lsp-ui-sideline-mode)
        ("C-c d"   . my/toggle-lsp-ui-doc))
  :hook
  (lsp-mode . lsp-ui-mode))

;; if you are ivy user
(use-package lsp-ivy :ensure t :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)

(use-package posframe :ensure t)
#+end_src
** debugger
#+begin_src emacs-lisp :tangle no
    ;; DAP
  (use-package dap-mode
    :config
    (dap-mode 1)
    (require 'dap-hydra)
    (require 'dap-gdb-lldb)	; download and expand lldb-vscode to the =~/.extensions/webfreak.debug=
    (use-package dap-ui
      :ensure nil
      :config
      (dap-ui-mode 1)))
#+end_src

* Language cpp
#+begin_src shell :tangle no
sudo pacman -S global
#+end_src

#+BEGIN_SRC emacs-lisp
;; C/C++ Mode
(use-package cc-mode
  :ensure nil
  :bind (:map c-mode-base-map
              ("C-c c" . compile))
  :hook (c-mode-common . (lambda ()
                           (c-set-style "linux")
                           (setq tab-width 4)
                           (setq c-basic-offset 4))))

(use-package modern-cpp-font-lock
  :diminish
  :init (modern-c++-font-lock-global-mode t))

;; counsel-etags for code navigation
(use-package counsel-etags
  :bind (("C-]" . counsel-etags-find-tag-at-point))
  :init
  (add-hook 'prog-mode-hook
            (lambda ()
              (add-hook 'after-save-hook
                        'counsel-etags-virtual-update-tags 'append 'local)))
  :config
  (setq counsel-etags-update-interval 60)
  (push "build" counsel-etags-ignore-directories))

;;company-ctags for code completion
;;usage: find . -name "*.[ch]" | ctags -e -L -
(use-package company-ctags  ;; LSP server: (lsp-enable-completion-at-point t)
  :disabled t
  :after company
  :config
  (company-ctags-auto-setup))

;; Emacs frontend to GNU GLobal source code tagging system
;; 1. Code navigation : ggtags-find-tag-dwim

(use-package ggtags
  :init
  (ggtags-mode 1)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1))))
  :config
  (dolist (map (list ggtags-mode-map dired-mode-map))
    (define-key map (kbd "C-c g s") 'ggtags-find-other-symbol)
    (define-key map (kbd "C-c g h") 'ggtags-view-tag-history)
    (define-key map (kbd "C-c g r") 'ggtags-find-reference)
    (define-key map (kbd "C-c g f") 'ggtags-find-file)
    (define-key map (kbd "C-c g c") 'ggtags-create-tags)
    (define-key map (kbd "C-c g u") 'ggtags-update-tags)
    (define-key map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
    (define-key map (kbd "M-.") 'ggtags-find-tag-dwim)
    (define-key map (kbd "M-,") 'pop-tag-mark)
    (define-key map (kbd "C-c <") 'ggtags-prev-mark)
    (define-key map (kbd "C-c >") 'ggtags-next-mark)))
#+END_SRC

* Language elisp
#+BEGIN_SRC emacs-lisp
;; String manipulation routines for emacs lisp
(use-package s
  :ensure t)

;; Minor mode for performing structured editing of S-expression data
(use-package paredit
  :disabled t
  :init
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  :bind (("C-c d" . paredit-forward-down))
  :config
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round))

;; Ensure paredit is used EVERYWHERE!
(use-package paredit-everywhere
  :disabled t
  :ensure t
  :diminish paredit-everywhere-mode
  :config
  (add-hook 'list-mode-hook #'paredit-everywhere-mode))
#+END_SRC

* Language scheme
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :config
    (setq geiser-active-implementations '(mit guile)))
#+END_SRC

* Language python
#+begin_src shell :tangle no
  sudo pip install 'python-language-server[all]'
#+end_src
** Global configuration
#+begin_src emacs-lisp
(use-package python
  :mode
  ("\\.py\\'" . python-mode)
  ("\\.wsgi$" . python-mode)

  :init
  (setq-default indent-tabs-mode nil)

  :config
  (setq python-indent-offset 4))
#+end_src

* Language go
Go code helpers. [[https://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/][see also]]

#+begin_src shell :tangle no
sudo pacman -S go
# plugin
go get -u github.com/nsf/gocode
go get -u github.com/rogpeppe/godef
go get -u golang.org/x/tools/cmd/guru
go get -u golang.org/x/tools/cmd/goimports
# language server
go get golang.org/x/tools/gopls@latest
# config
zshrc: GOPATH,GOPROXY
#+end_src

* Language markdown
#+begin_src shell :tangle no
sudo pacman -S pandoc
sudo pop install grip
#+end_src

编译和维护命令 C-c C-c
样式: C-c C-s
超链接: C-c C-a

** Global
#+begin_src emacs-lisp
  ;; Major mode for editing Markdown formatted text
  (use-package markdown-mode
    :ensure t
    :defer t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init
        (when (eq system-type 'gnu/linux)
          (setq markdown-command "/usr/bin/pandoc"))
        (when (eq system-type 'windows-nt)
          (setq markdown-command "~/.emacs.d/pandoc.exe"))
  )

#+end_src
** Syntax highlight in block
#+begin_src emacs-lisp
(use-package poly-markdown
  :ensure t
  :disabled t)
#+end_src
** Visualize GFM rendering
C-c C-c g
#+begin_src emacs-lisp
(use-package grip-mode
  :ensure t
  :commands (grip-mode)
  :bind (:map markdown-mode-command-map
         ("g" . grip-mode)))
#+end_src

* Configuration and log files
This part is dedicated to unix and more general configuration files as well as logs.
** editor configs
#+begin_src emacs-lisp
  ;; Respect editor configs
  (use-package editorconfig
    :ensure t
    :diminish editorconfig-mode
    :config
    (editorconfig-mode 1))
#+end_src
** Default unix configuration
Config-general-mode is applied for all unix configuration files.
#+begin_src emacs-lisp
  (use-package config-general-mode
    :ensure t
    :mode ("\\.conf$" "\\.*rc$"))
#+end_src
** Apache
#+begin_src emacs-lisp
  (use-package apache-mode
    :ensure t
    :mode ("\\.htaccess\\'" "httpd\\.conf\\'" "srm\\.conf\\'"
           "access\\.conf\\'" "sites-\\(available\\|enabled\\)/"))
#+end_src
** SSH configuration
#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :ensure t
    :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
    :hook (ssh-config-mode . turn-on-font-lock)

    :config
    (autoload 'ssh-config-mode "ssh-config-mode" t))
#+end_src
** Logview
#+begin_src emacs-lisp
  (use-package logview
    :ensure t
    :mode ("syslog\\(?:\\.[0-9]+\\)" "\\.log\\(?:\\.[0-9]+\\)?\\'"))
#+end_src
** systemd
#+begin_src emacs-lisp
(use-package systemd
  :ensure t
  :mode
  ("\\.service\\'" "\\.timer\\'" "\\.target\\'" "\\.mount\\'"
   "\\.automount\\'" "\\.slice\\'" "\\.socket\\'" "\\.path\\'"
   "\\.netdev\\'" "\\.network\\'" "\\.link\\'"))
#+end_src
** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (".yaml$")
    :hook
    (yaml-mode . yaml-mode-outline-hook)

    :init
    (defun yaml-outline-level ()
      "Return the outline level based on the indentation, hardcoded at 2 spaces."
      (s-count-matches "[ ]\\{2\\}" (match-string 0)))

    (defun yaml-mode-outline-hook ()
      (outline-minor-mode)
      (setq outline-regexp "^\\([ ]\\{2\\}\\)*\\([-] \\)?\\([\"][^\"]*[\"]\\|[a-zA-Z0-9_-]*\\): *\\([>|]\\|&[a-zA-Z0-9_-]*\\)?$")
      (setq outline-level 'yaml-outline-level))
    )

  (use-package yaml-tomato
    :ensure t)
#+end_src
** toml
#+begin_src emacs-lisp
  (use-package toml-mode
    :ensure t)
#+end_src
** vimrc
#+begin_src emacs-lisp
  (use-package vimrc-mode
    :ensure t
    :mode ("^\\.vimrc\\'"))
#+end_src
** CSS
#+begin_src emacs-lisp
  (use-package scss-mode
    :ensure t
    :defines scss-compile-at-save
    :mode ("\\.scss\\'")
    :config
    (setq scss-compile-at-save 'nil))
#+END_SRC
** CSV
 #+begin_src emacs-lisp
   (use-package csv-mode
     :ensure t
     :config

     ;; Define separators
     (setq csv-separators '("," ";" ":" " ")))


   ;; Subpackages
   (use-package csv-nav
     :ensure t
     :disabled t)
 #+end_src
** Graphviz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :init
    (defvar default-tab-width nil)

    :mode ("\\.dot\\'"))
#+end_src
