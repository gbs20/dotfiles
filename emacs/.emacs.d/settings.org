#+TITLE: My emacs configure
#+AUTHOR: Jackiebin
#+KEYWORDS: emacs, org-mode

* Description
#+BEGIN_SRC emacs-lisp
;; https://github.com/socketwiz/dotfiles/blob/master/emacs/
;; <s TAB : insert source block
;; M-x org-edit-src-code : edit source block
#+END_SRC

* coding system
#+BEGIN_SRC emacs-lisp
  (set-language-environment 'Chinese-GB)
  (set-default buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (setq-default pathname-coding-system 'euc-cn)
  (setq file-name-coding-system 'euc-cn)
  ;; 另外建议按下面的先后顺序来设置中文编码识别方式。
  ;; 重要提示:写在最后一行的，实际上最优先使用; 最前面一行，反而放到最后才识别。
  ;; utf-16le-with-signature 相当于 Windows 下的 Unicode 编码，这里也可写成
  ;; utf-16 (utf-16 实际上还细分为 utf-16le, utf-16be, utf-16le-with-signature等多种)
  (prefer-coding-system 'cp950)
  (prefer-coding-system 'gb2312)
  (prefer-coding-system 'cp936)
  ;;(prefer-coding-system 'gb18030)
  ;(prefer-coding-system 'utf-16le-with-signature)
  (prefer-coding-system 'utf-16)
  ;; 新建文件使用utf-8-unix方式
  ;; 如果不写下面两句，只写
  ;; (prefer-coding-system 'utf-8)
  ;; 这一句的话，新建文件以utf-8编码，行末结束符平台相关
  (prefer-coding-system 'utf-8-dos)
  (prefer-coding-system 'utf-8-unix)
  ;; 说明：使用此配置，新建文件会采用UTF-8(无BOM)格式编码，行末以unix方式("\n")结尾，打开已有的文件，修改，保存还是按原有编码方式保存。
#+END_SRC


* Core
#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (defvar config-which-key-delay 1.4)

  (defvar config-keep-backups t)

  ;; English Font
  (defvar config-font-family "Monaco")
  (defvar config-font-height 120
    "font-height is 1/10pt so 120 == 120/10 == 12pt")

  ;; Chinese Font
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
                      charset (font-spec :family "WenQuanYi Micro Hei Mono"
                                         :size 14)))

  (defvar config-indent-web-mode-spaces 2)

  (setq use-package-always-ensure t)
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Set regex syntax to string for re-builder
  (setq reb-re-syntax 'string)

  ;; Hide column numbers
  (setq column-number-mode t)

  ;; Draw underline lower
  (setq x-underline-at-descent-line t)

  ;; Prevent the startup window
  (setq inhibit-startup-message t)
  ;; Setup fullscreen when startup
  (setq initial-frame-alist (quote ((fullscreen . maximized))))

  ;; Hide ui elements
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)

  ;; Permanently force Emacs to indent with spaces, never with TABs
  (setq-default  indent-tabs-mode nil)

  ;;自定义buffer头,显示更多的buffer标题信息
  (setq frame-title-format
        '("" " jackiebin ☺ "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name)) "%b"))))

  ;;保存时自动清除行尾空格及文件结尾空行
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Keep backups
  (setq make-backup-files config-keep-backups)

  ;; Save ALL backup files to this location
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))

  ;; Disable re-center of the cursor to the middle of page when scroll hits top or bottom of the page
  (setq scroll-conservatively 101)

  ;; Automatically scroll the compilation buffer
  (setq compilation-scroll-output t)

  ;; Give focus to new help windows
  (setq help-window-select t)
  ;; Put apropos in current buffer so it can be read and exited with minimum effort
  (add-to-list 'display-buffer-alist
              '("*Apropos*" display-buffer-same-window)
              '("*Info*" display-buffer-same-window))

  ;; Add /usr/local/bin to the path
  (setq exec-path (append exec-path '("/usr/local/bin")))

  ;; Turn on line numbers
  (global-display-line-numbers-mode)
  ;;(menu-bar-display-line-numbers-mode 'relative)

  ;; Package management
  ;;(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  ;;(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (setq package-archives '(("gnu"   . "https://elpa.emacs-china.org/gnu/")
                          ("melpa" . "https://elpa.emacs-china.org/melpa/")))
  ;;(setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
  ;;			("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Always hightlight current line
  (global-hl-line-mode t)

  ;; Y or n is enough for me
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Font
  (set-face-attribute 'default nil
                      :family config-font-family
                      :height config-font-height)

  ;; Parenthesis
  (show-paren-mode 1)

  ;; Wrap selection with (, [, ", etc...
  (electric-pair-mode 1)

  ;; Enable narrow to region functionality
  (put 'narrow-to-region 'disabled nil)

  ;; Frequently accessed files (C-x r j <letter>)
  ;; jump-to-register
  (set-register ?i '(file . "~/.emacs.d/settings.org"))
  (set-register ?o '(file . "~/org/agenda/organizer.org"))
  (set-register ?w '(file . "~/org/wiki/index.org"))

  ;; Colorize compilation-mode
  (defun my-colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
          (ansi-color-apply-on-region compilation-filter-start (point-max))))

  (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer)

  ;; When on OSX, change meta to cmd key
  ;; Amethyst, an OSX app I use is mucking around with Option-Shift
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil))

#+END_SRC

* Core function
#+BEGIN_SRC emacs-lisp
  ;;opening new lines can be finichy
  (defun open-line-below()
      "open line below."
      (interactive)
      (end-of-line)
      (newline)
      (indent-for-tab-command))
  (defun open-line-above()
      "open line above."
      (interactive)
      (beginning-of-line)
      (newline)
      (forword-line -1)
      (indent-for-tab-command))

  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  ;; Update
  ;; A modern Packages Menu
  (use-package paradox
    :init
    (setq paradox-execute-asynchronously t)
    (setq paradox-github-token t)
    (setq paradox-display-star-count nil)

    (defalias 'upgrade-packages #'paradox-upgrade-packages)

    ;; Replace default `list-packages'
    (defun my-paradox-enable (&rest _)
      "Enable paradox, overriding the default package-menu."
      (paradox-enable))
    (advice-add #'list-packages :before #'my-paradox-enable)
    :config
    (when (fboundp 'page-break-lines-mode)
      (add-hook 'paradox-after-execute-functions
                (lambda (&rest _)
                  (let ((buf (get-buffer-create "*Paradox Report*"))
                        (inhibit-read-only t))
                    (with-current-buffer buf
                      (page-break-lines-mode 1))))
                t)))

  (defun update-config ()
    "Update Emacs configurations to the latest version from Github."
    (interactive)
    (let ((dir (expand-file-name user-emacs-directory)))
      (if (file-exists-p dir)
          (progn
            (message "Updating Emacs configurations...")
            (cd dir)
            (shell-command "git pull")
            (message "Update finished. Restart Emacs to complete the process."))
        (message "\"%s\" doesn't exist." dir))))
  (defalias 'jackiebin-update-config 'update-config)

  ;;(declare-function upgrade-packages 'init-package)
  (defun update-packages ()
    "Refresh package contents and upgrade all packages."
    (interactive)
    (package-refresh-contents)
    (upgrade-packages))
  (defalias 'jackiebin-update-packages 'update-packages)

  (defun update-config-and-packages()
    "Update confgiurations and packages."
    (interactive)
    (update-config)
    (jackiebin-update-packages))
  (defalias 'jackiebin-update 'update-config-and-packages)

  (defun update-all()
    "Update dotfiles, org files, Emacs confgiurations and packages to the latest versions ."
    (interactive)
    (update-org)
    (update-dotfiles)
    (update-config-and-packages))
  (defalias 'jackiebin-update-all 'update-all)

  (defun update-dotfiles ()
    "Update the dotfiles to the latest version."
    (interactive)
    (let ((dir (or (getenv "DOTFILES")
                   (expand-file-name "~/.dotfiles/"))))
      (if (file-exists-p dir)
          (progn
            (message "Updating dotfiles...")
            (cd dir)
            (shell-command "git pull")
            (message "Update finished."))
        (message "\"%s\" doesn't exist." dir))))
  (defalias 'jackiebin-update-dotfiles 'update-dotfiles)

  (defun update-org ()
    "Update Org files to the latest version."
    (interactive)
    (let ((dir (expand-file-name "~/org/")))
      (if (file-exists-p dir)
          (progn
            (message "Updating org files...")
            (cd dir)
            (shell-command "git pull")
            (message "Update finished."))
        (message "\"%s\" doesn't exist." dir))))
  (defalias 'jackiebin-update-org 'update-org)

#+END_SRC

* Core keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") #'revert-buffer)
(global-set-key (kbd "C-=") #'er/expand-region)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
(global-set-key (kbd "C-c C-.") #'helpful-at-point)
(global-set-key (kbd "C-c r") #'counsel-recentf)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-h b") #'describe-bindings)
(global-set-key (kbd "C-h f") #'helpful-callable)
(global-set-key (kbd "C-h k") #'helpful-key)
(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-r") #'swiper)
(global-set-key (kbd "C-s") #'swiper)
(global-set-key (kbd "C-x C-b") #'ibuffer)
(global-set-key (kbd "C-x C-e") #'pp-eval-last-sexp)
(global-set-key (kbd "C-x C-f") #'counsel-find-file)
(global-set-key (kbd "C-x g") #'magit-status)
(global-set-key (kbd "C-x M-g") #'magit-dispatch)
(global-set-key (kbd "M-i") #'imenu)

(global-set-key (kbd "<C-return>") 'open-line-below)
(global-set-key (kbd "<C-S-return>") 'open-line-above)

(global-set-key (kbd "C-S-n")
                (lambda()
                  (interactive)
                  (ignore-errors (next-line 5))))
(global-set-key (kbd "C-S-p")
                (lambda()
                  (interactive)
                  (ignore-errors (previous-line 5))))
(global-set-key (kbd "C-S-f")
                (lambda()
                  (interactive)
                  (ignore-errors (forword-char 5))))
(global-set-key (kbd "C-S-b")
                (lambda()
                  (interactive)
                  (ignore-errors (backward-char 5))))
;;
;; Copy or Cut one line if no content selected
;;
;; copy region or whole line
(global-set-key "\M-w"
(lambda ()
  (interactive)
  (if mark-active
      (kill-ring-save (region-beginning)
      (region-end))
    (progn
     (kill-ring-save (line-beginning-position)
     (line-end-position))
     (message "copied line")))))

;; kill region or whole line
(global-set-key "\C-w"
(lambda ()
  (interactive)
  (if mark-active
      (kill-region (region-beginning)
   (region-end))
    (progn
     (kill-region (line-beginning-position)
  (line-end-position))
     (message "killed line")))))

#+END_SRC

* Core packages
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)

  (use-package diminish)

  ;; Rainbow mode - displays color codes in their color
  (use-package rainbow-mode
    :delight)

  ;; Theme
  (use-package cyberpunk-theme
    :config
    (load-theme 'cyberpunk t))

  ;; This required some fonts to be downloaded, run `all-the-icons-install-fonts` manually
  ;; https://github.com/emacs-jp/replace-colorthemes
  (use-package all-the-icons)
  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  ;; Parenthesis
  (use-package highlight-parentheses
    :diminish 'highlight-parentheses-mode
    :config
    (add-hook 'prog-mode-hook #'highlight-parentheses-mode))

  ;; Undo-tree
  (use-package undo-tree
    :config
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-auto-save-history t)
    ;; save all undo histories to this location
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (defadvice undo-tree-make-history-save-file-name
        (after undo-tree activate)
      (setq ad-return-value (concat ad-return-value ".gz")))
    (global-undo-tree-mode)
    :defer t
    :diminish 'undo-tree-mode)

  ;; Company mode
  (use-package company
    :diminish 'company-mode
    :config
    (setq company-tooltip-align-annotations t)
    (add-hook 'after-init-hook 'global-company-mode))

  ;; Show the argument list of a function in the echo area
  (use-package eldoc
    :diminish eldoc-mode
    :commands turn-on-eldoc-mode
    :defer t)

  ;; Flyspell
  (use-package flyspell
    :config
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    :diminish 'flyspell-mode)
  ;; Correct the misspelled word in a popup menu
  (use-package flyspell-popup
    :config
    (define-key flyspell-mode-map (kbd "C-;") #'flyspell-popup-correct)
    (define-key popup-menu-keymap (kbd "C-j") 'popup-next)
    (define-key popup-menu-keymap (kbd "C-k") 'popup-previous)
    (define-key popup-menu-keymap (kbd "C-l") 'popup-select))

  ;; Flycheck
  (use-package flycheck
    :diminish flycheck-mode)

  ;; Yasnippet, a template system for emacs
  (use-package yasnippet
    :bind (("TAB" . yas-expand))
    :config
    (yas-reload-all))

  ;; Quickly switch windows in Emacs
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreguound :height 3.0 :foreground "deep sky blue")))))
      ))

  ;; Display available keybindings in a popup
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay config-which-key-delay)
    :diminish which-key-mode)

  ;; Highlight numbers for prog modes
  (use-package highlight-numbers
    :defer t
    :init
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))

  ;; Respect editor configs
  (use-package editorconfig
    :diminish editorconfig-mode
    :config
    (editorconfig-mode 1))

  ;; Syntax highlighting for docker files
  (use-package dockerfile-mode
    :defer t)

  ;; A better "help" buffer
  (use-package helpful)

  ;; Edit text area in chrome with emacs
  (use-package atomic-chrome
    :config
    (atomic-chrome-start-server)
    (setq atomic-chrome-buffer-open-style 'frame))

  ;; Builds a list of recently opened files
  (use-package recentf
    :config
    (setq recentf-max-saved-items 10
          recentf-max-menu-items 5
          recentf-save-file (concat user-emacs-directory ".cache/recentf")
          recentf-auto-cleanup 'never)
    (recentf-mode 1)

    (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
    (add-to-list 'recentf-exclude (expand-file-name (concat user-emacs-directory ".cache/")))
    (add-hook 'delete-terminal-functions (lambda (terminal) (recentf-save-list))))

  ;; Display used hotkeys in another window
  (use-package command-log-mode
    :diminish command-log-mode)

  ;; Minor mode for dealing with pairs, such as quotes
  (use-package smartparens-config
    :ensure smartparens
    :config
    (show-smartparens-global-mode t))

  ;; Expand selected region by semantic units
  (use-package expand-region
    :config
    (pending-delete-mode t))

  ;; Doom modeline
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
  (use-package pyim
    :ensure nil
    :demand t
    :config
    ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
    (use-package pyim-basedict
      :ensure nil
      :config (pyim-basedict-enable))

    (setq default-input-method "pyim")

    ;; 我使用全拼
    ;;(setq pyim-default-scheme 'quanpin)

    ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
    ;; 我自己使用的中英文动态切换规则是：
    ;; 1. 光标只有在注释里面时，才可以输入中文。
    ;; 2. 光标前是汉字字符时，才能输入中文。
    ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
    (setq-default pyim-english-input-switch-functions
                  '(pyim-probe-dynamic-english
                    pyim-probe-isearch-mode
                    pyim-probe-program-mode
                    pyim-probe-org-structure-template))

    (setq-default pyim-punctuation-half-width-functions
                  '(pyim-probe-punctuation-line-beginning
                    pyim-probe-punctuation-after-punctuation))

    ;; 开启拼音搜索功能
    (pyim-isearch-mode 1)

    ;; 使用 pupup-el 来绘制选词框, 如果用 emacs26, 建议设置
    ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
    ;; 手动安装 posframe 包。
    (setq pyim-page-tooltip 'popup)

    ;; 选词框显示5个候选词
    (setq pyim-page-length 5)

    :bind
    (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
     ("C-;" . pyim-delete-word-from-personal-buffer)))

#+END_SRC


* require
#+BEGIN_SRC emacs-lisp
  (push (expand-file-name "~/.emacs.d/lisp") load-path)
  (require 'init-eshell)

#+END_SRC

* org
#+BEGIN_SRC emacs-lisp
;; Org mode, for keeping notes, todo lists, etc... in plain text
(use-package org
  :config
  (setq org-todo-keywords '("TODO" "STARTED" "WAITING" "DONE"))
  (setq org-agenda-include-diary t)
  (setq org-src-fontify-natively t)
  (setq org-agenda-files (list "~/org/agenda"
                               "~/org/agenda/projects/"))
  (setq org-default-notes-file "~/org/agenda/organizer.org")

  ;; Prettify UI
  (use-package org-bullets
    :if (char-displayable-p ?◉)
    :hook (org-mode . org-bullets-mode))

  (use-package org-fancy-priorities
    :diminish
    :defines org-fancy-priorities-list
    :hook (org-mode . org-fancy-priorities-mode)
    :config
    (unless (char-displayable-p ?❗)
      (setq org-fancy-priorities-list '("HIGH" "MID" "LOW" "OPTIONAL")))))
#+END_SRC

* git
#+BEGIN_SRC emacs-lisp
;; A git interface for emacs
(use-package magit
  :config
  (setq magit-refresh-status-buffer nil)
  :diminish 'auto-revert-mode
  :defer t)

;; Show diffs in the gutter
(use-package diff-hl
  :config
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (global-diff-hl-mode t)
  (diff-hl-flydiff-mode t))
#+END_SRC



* ivy
#+BEGIN_SRC emacs-lisp
;; Generic completion frontend
(use-package counsel)
(use-package counsel-projectile
  :config
  (counsel-projectile-mode t)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
(use-package flx)
(use-package ivy-hydra)
(use-package ivy
  :diminish 'ivy-mode
  :config
  (ivy-mode t)
  ;; make everything fuzzy except swiper
  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
          (t . ivy--regex-fuzzy))))
#+END_SRC

* projectile
#+BEGIN_SRC emacs-lisp
;; ripgrep
(use-package rg)

;; A project interaction library
(use-package projectile
  :after (rg)
  :config
  (setq projectile-project-search-path '("~/dev"))
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (projectile-global-mode)
  :init
  (setq projectile-cache-file (concat user-emacs-directory ".cache/projectile.cache")
        projectile-known-projects-file (concat user-emacs-directory
                                               ".cache/projectile-bookmarks.eld"))
  (add-hook 'find-file-hook (lambda ()
                              (unless recentf-mode (recentf-mode)
                                      (recentf-track-opened-file))))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :bind
  (:map projectile-mode-map ("C-c p s p" . rg-project))
  :diminish 'projectile-mode)
#+END_SRC


* Language cpp
#+BEGIN_SRC emacs-lisp
  ;; C/C++ Mode
  ;; (use-package cc-mode
  ;;   :ensure nil
  ;;   :bind (:map c-mode-base-map
  ;;          ("C-c c" . compile))
  ;;   ;; :hook (c-mode-common . (lambda ()
  ;;   ;;                          (c-set-style "linux")
  ;;   ;;                          (setq tab-width 4)
  ;;   ;;                          (setq c-basic-offset 4)))
  ;;   :config
  ;;   (use-package modern-cpp-font-lock
  ;;     :diminish
  ;;     :init (modern-c++-font-lock-global-mode t)))

  ;; ;; A flycheck checker for C/C++
  ;; (use-package flycheck-irony
  ;;   :after (irony)
  ;;   :defer t)

  ;; ;; Irony support for C/C++
  ;; (use-package irony-eldoc
  ;;   :after (irony)
  ;;   :defer t
  ;;   :init
  ;;   (add-hook 'irony-mode-hook #'irony-eldoc))

  ;; ;; C++ minor mode, completion, syntax checking
  ;; (use-package irony
  ;;   :defer t
  ;;   ;; Need to install the server on first run (M-x irony-install-server)
  ;;   :commands irony-mode
  ;;   :init
  ;;   (add-hook 'c++-mode-hook 'irony-mode)
  ;;   (add-hook 'c-mode-hook 'irony-mode)
  ;;   (defun my-irony-mode-hook ()
  ;;     (setq irony-additional-clang-options '("-std=c++14")))
  ;;   (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  ;;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; (eval-after-load 'flycheck
  ;;   '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

  ;; (add-hook 'irony-mode-hook
  ;;           (lambda ()
  ;;             (irony-cdb-autosetup-compile-options)))
  ;; (add-hook 'c++-mode-hook 'flycheck-mode)

  (use-package modern-cpp-font-lock
    :diminish
    :init (modern-c++-font-lock-global-mode t))

  ;; Emacs frontend to GNU GLobal source code tagging system
  (use-package ggtags
    :init
    (ggtags-mode 1)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                  (ggtags-mode 1))))
    :config
    (dolist (map (list ggtags-mode-map dired-mode-map))
      (define-key map (kbd "C-c g s") 'ggtags-find-other-symbol)
      (define-key map (kbd "C-c g h") 'ggtags-view-tag-history)
      (define-key map (kbd "C-c g r") 'ggtags-find-reference)
      (define-key map (kbd "C-c g f") 'ggtags-find-file)
      (define-key map (kbd "C-c g c") 'ggtags-create-tags)
      (define-key map (kbd "C-c g u") 'ggtags-update-tags)
      (define-key map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
      (define-key map (kbd "M-.") 'ggtags-find-tag-dwim)
      (define-key map (kbd "M-,") 'pop-tag-mark)
      (define-key map (kbd "C-c <") 'ggtags-prev-mark)
      (define-key map (kbd "C-c >") 'ggtags-next-mark)))

  ;; Emacs client for the Language Server Protocol
  (use-package lsp-mode
    :config
    (setq lsp-prefer-flymake nil) ;; Prefer using lsp-ui (flycheck) over flymake.
    ;; `-background-index' requires clangd v8+!
    ;; It tells clangd that it can use 4 concurrent jobs and to make a complete background index on disk.
    (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))

    :hook (c-mode . lsp)
    :hook (c++-mode . lsp)
    :commands lsp)

  ;; flycheck -- syntax checking
  (use-package lsp-ui
    :requires lsp-mode flycheck
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-position 'top
          lsp-ui-doc-include-signature t
          lsp-ui-sideline-enable nil
          lsp-ui-flycheck-enable t
          lsp-ui-flycheck-list-position 'right
          lsp-ui-flycheck-live-reporting t
          lsp-ui-peek-enable t
          lsp-ui-peek-list-width 60
          lsp-ui-peek-peek-height 25)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  ;; Code completion
  (use-package company-lsp
    :requires company
    :config
    (push 'company-lsp company-backends) ;; add company-lsp as a backend

     ;; Disable client-side cache because the LSP server does a better job.
    (setq company-transformers nil
          company-lsp-async t
          company-lsp-cache-candidates nil))

#+END_SRC

* Language elisp
#+BEGIN_SRC emacs-lisp
;; Minor mode for performing structured editing of S-expression data
(use-package paredit
  :init
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  :config
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round))
#+END_SRC

* Language javascript
#+BEGIN_SRC emacs-lisp
(defun configure-web-mode-flycheck-checkers ()
    (flycheck-mode)

    ;; See if there is a node_modules directory
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (or (and root
                            ;; Try the locally installed eslint
                            (expand-file-name "node_modules/eslint/bin/eslint.js" root))

                       ;; Try the global installed eslint
                       (concat (string-trim (shell-command-to-string "npm config get prefix")) "/bin/eslint"))))

      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint)))

    (flycheck-select-checker 'javascript-eslint))

(defun setup-javascript ()
  (tide-setup)
  (configure-web-mode-flycheck-checkers)
  (yas-minor-mode)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))

(defun setup-js2 ()
  (setq js-switch-indent-offset 2)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (setup-javascript))

(defun setup-typescript ()
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  (setup-javascript))

;; TypeScript Interactive Development Environment
(use-package tide
  :config
  :hook (typescript-mode . setup-typescript))

;; JavaScript editing mode
(use-package js2-mode
  :mode ("\\.js\\'" . js2-mode)
  :config
  :hook (js2-mode . setup-js2))

(use-package rjsx-mode)
#+END_SRC

* Language HTML, css
#+BEGIN_SRC emacs-lisp
(defun setup-template ()
  (interactive)
  (yas-minor-mode))

(add-hook 'web-mode-hook 'setup-template)

;; Major mode for editing web templates
(use-package web-mode
  :defer t
  :mode (("\\.html?\\'" . web-mode)
         ("\\.css\\'" . web-mode))
  :config
  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "js")
        (let ((web-mode-enable-part-face nil))
          ad-do-it)
      ad-do-it))

  ;; Disable lining up the args
  (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-ternary" . nil))
  :init
  (setq web-mode-content-types-alist
        '(("js" . "\\.js\\'")))
  (setq web-mode-engines-alist
        '(("django" . "\\.html\\'")))

  (setq-default indent-tabs-mode nil)
  ;; Disable auto-quoting
  (setq web-mode-enable-auto-quoting nil)
  (setq web-mode-markup-indent-offset config-indent-web-mode-spaces)
  (setq web-mode-css-indent-offset config-indent-web-mode-spaces)
  (setq web-mode-code-indent-offset config-indent-web-mode-spaces)
  ;; Don't lineup element attributes
  (setq web-mode-attr-indent-offset config-indent-web-mode-spaces)
  ;; Automatically close tag
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-css-colorization t))

;; SASS
(use-package scss-mode
  :defer t)

#+END_SRC

* Language markdown
#+BEGIN_SRC emacs-lisp
;; Major mode for editing Markdown formatted text
(use-package markdown-mode
  :defer t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "/usr/bin/pandoc"))
#+END_SRC

* Language rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :defer t)

;; rust completion library
(use-package racer
  :after (rust-mode)
  :init
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'rust-mode-hook #'racer-mode))

(use-package flycheck-rust
  :after (rust-mode)
  :init
  (add-hook 'rust-mode-hook #'flycheck-mode))
(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)

;; rust package managment
(use-package cargo
  :after (rust-mode)
  :bind (:map rust-mode-map ("C-c C-c" . cargo-process-clippy)))

(add-hook 'rust-mode-hook #'yas-minor-mode)
  #+END_SRC

* Language clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
  :defer t
  :hook (clojure-mode . enable-paredit-mode))
#+END_SRC

* Language python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :init
  (elpy-enable))
#+END_SRC
