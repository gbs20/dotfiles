#+TITLE: My emacs configure
#+AUTHOR: Jackiebin
#+KEYWORDS: emacs, org-mode

This is my version of an configuration file for GNU Emacs. I modeled this set of files based off of seblemaguer's dotfiles,
at this repository: https://github.com/seblemaguer/dotfiles

* Package management
The first part of the configuration is to prepare the package management. I am using =use-package= as
the central tool to deal with configuration of the packages.

** Emacs package configuration
In this section, we are configuring the repositories and emacs internal package management. The only
specificity here is that the TLS algorithm is specific for 26.2.1.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (when (and (= emacs-major-version 26)
             (= emacs-minor-version 2)
             (= emacs-build-number 1))
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

  (setq package-enable-at-startup nil
        package-check-signature nil
        package-archives '(;;("GNU ELPA"     . "https://elpa.gnu.org/packages/")
                           ;;("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                           ("GNU ELPA"   . "https://elpa.emacs-china.org/gnu/")
                           ;;("MELPA"        . "https://melpa.org/packages/")
                           ;;("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
                           ("MELPA" . "https://elpa.emacs-china.org/melpa/")
                           ("ORGMODE"      . "http://orgmode.org/elpa/"))
        package-archive-priorities  '(("ORGMODE"      . 15)
                                      ("MELPA"        . 10)
                                      ("GNU ELPA"     . 5))
        package-check-signature nil)

  (package-initialize)
#+END_SRC

** Load use-package
Here, we are initializing =use-package= in the classic way.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  ;; (eval-when-compile
  ;;   (setq use-package-expand-minimally byte-compile-current-file))

  ;; Should set before loading `use-package'
  (setq use-package-always-ensure t)
  (setq gc-cons-threshold most-positive-fixnum)
#+END_SRC

** Quelpa
 Quelpa is super useful for developer package management. Adding the adaptation for the use-package
 makes it configuration file proof.

 #+begin_src emacs-lisp
   (use-package quelpa-use-package
     :ensure t
     :init
     (setq quelpa-update-melpa-p nil))
 #+end_src
** Hydra
I use hydra a lot so it is easier to add its support directly in the use-package configuration part.

#+BEGIN_SRC emacs-lisp
  (use-package hydra :ensure t)
  (use-package use-package-hydra
    :ensure t
    :functions
    (hydra-default-pre
     hydra-keyboard-quit
     hydra--call-interactively-remap-maybe
     hydra-show-hint
     hydra-set-transient-map))

  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))

  (use-package pretty-hydra
    :defines (display-line-numbers-mode linum-mode)
    :bind ("<f6>" . toggles-hydra/body)
    :init
    (cl-defun pretty-hydra-title (title &optional icon-type icon-name
                                        &key face height v-adjust)
      "Add an icon in the hydra title."
      (let ((face (or face `(:foreground ,(face-background 'highlight))))
            (height (or height 1.0))
            (v-adjust (or v-adjust 0.0)))
        (concat
         (when (and (display-graphic-p) icon-type icon-name)
           (let ((f (intern (format "all-the-icons-%s" icon-type))))
             (when (fboundp f)
               (concat
                (apply f (list icon-name :face face :height height :v-adjust v-adjust))
                " "))))
         (propertize title 'face face))))
    ;; Global toggles
    (pretty-hydra-define toggles-hydra (:title (pretty-hydra-title "Toggles" 'faicon "toggle-on")
                                        :color amaranth :quit-key "q")
      ("Basic"
       (("n" (if (fboundp 'display-line-numbers-mode)
                 (display-line-numbers-mode (if display-line-numbers-mode -1 1))
               (linum-mode (if linum-mode -1 1)))
         "line number" :toggle (if (fboundp 'display-line-numbers-mode)
                                   display-line-numbers-mode
                                 linum-mode))
        ("a" aggressive-indent-mode "aggressive indent" :toggle t)
        ("h" hungry-delete-mode "hungry delete" :toggle t)
        ("e" electric-pair-mode "electric pair" :toggle t)
        ("c" flyspell-mode "spell check" :toggle t)
        ("S" prettify-symbols-mode "pretty symbol" :toggle t)
        ("L" page-break-lines-mode "page break lines" :toggle t)
        ("M" doom-modeline-mode "modern mode-line" :toggle t))
       "Highlight"
       (("l" global-hl-line-mode "line" :toggle t)
        ("P" show-paren-mode "paren" :toggle t)
        ("s" symbol-overlay-mode "symbol" :toggle t)
        ("r" rainbow-mode "rainbow" :toggle t)
        ("w" (setq show-trailing-whitespace (not show-trailing-whitespace))
         "whitespace" :toggle show-trailing-whitespace)
        ("d" rainbow-delimiters-mode "delimiter" :toggle t)
        ("i" highlight-indent-guides-mode "indent" :toggle t)
        ("T" hl-todo-mode "todo" :toggle t))
       "Coding"
       (("f" flycheck-mode "flycheck" :toggle t)
        ("F" flymake-mode "flymake" :toggle t)
        ("o" origami-mode "folding" :toggle t)
        ("O" hs-minor-mode "hideshow" :toggle t)
        ("u" subword-mode "subword" :toggle t)
        ("W" which-function-mode "which function" :toggle t)
        ("E" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
        ("Q" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit)))
       "Version Control"
       (("v" diff-hl-mode "gutter" :toggle t)
        ("V" diff-hl-flydiff-mode "live gutter" :toggle t)
        ("m" diff-hl-margin-mode "margin gutter" :toggle t)
        ("D" diff-hl-dired-mode "dired gutter" :toggle t)))))
#+END_SRC

** Paradox to enhance package list management
Finally, I use paradox to enhance the package listing experience.
#+BEGIN_SRC emacs-lisp
 ;; Update
  ;; A modern Packages Menu
  (use-package paradox
    :init
    (setq paradox-execute-asynchronously t)
    (setq paradox-github-token t)
    (setq paradox-display-star-count nil)

    (defalias 'upgrade-packages #'paradox-upgrade-packages)

    ;; Replace default `list-packages'
    (defun my-paradox-enable (&rest _)
      "Enable paradox, overriding the default package-menu."
      (paradox-enable))
    (advice-add #'list-packages :before #'my-paradox-enable)
    :config
    (when (fboundp 'page-break-lines-mode)
      (add-hook 'paradox-after-execute-functions
                (lambda (&rest _)
                  (let ((buf (get-buffer-create "*Paradox Report*"))
                        (inhibit-read-only t))
                    (with-current-buffer buf
                      (page-break-lines-mode 1))))
                t)))

  (defun update-config ()
    "Update Emacs configurations to the latest version from Github."
    (interactive)
    (let ((dir (expand-file-name user-emacs-directory)))
      (if (file-exists-p dir)
          (progn
            (message "Updating Emacs configurations...")
            (cd dir)
            (shell-command "git pull")
            (message "Update finished. Restart Emacs to complete the process."))
        (message "\"%s\" doesn't exist." dir))))
  (defalias 'jackiebin-update-config 'update-config)

  ;;(declare-function upgrade-packages 'init-package)
  (defun update-packages ()
    "Refresh package contents and upgrade all packages."
    (interactive)
    (package-refresh-contents)
    (upgrade-packages))
  (defalias 'jackiebin-update-packages 'update-packages)

  (defun update-config-and-packages()
    "Update confgiurations and packages."
    (interactive)
    (update-config)
    (jackiebin-update-packages))
  (defalias 'jackiebin-update 'update-config-and-packages)

  (defun update-all()
    "Update dotfiles, org files, Emacs confgiurations and packages to the latest versions ."
    (interactive)
    (update-org)
    (update-dotfiles)
    (update-config-and-packages))
  (defalias 'jackiebin-update-all 'update-all)

  (defun update-dotfiles ()
    "Update the dotfiles to the latest version."
    (interactive)
    (let ((dir (or (getenv "DOTFILES")
                   (expand-file-name "~/.dotfiles/"))))
      (if (file-exists-p dir)
          (progn
            (message "Updating dotfiles...")
            (cd dir)
            (shell-command "git pull")
            (message "Update finished."))
        (message "\"%s\" doesn't exist." dir))))
  (defalias 'jackiebin-update-dotfiles 'update-dotfiles)

  (defun update-org ()
    "Update Org files to the latest version."
    (interactive)
    (let ((dir (expand-file-name "~/org/")))
      (if (file-exists-p dir)
          (progn
            (message "Updating org files...")
            (cd dir)
            (shell-command "git pull")
            (message "Update finished."))
        (message "\"%s\" doesn't exist." dir))))
  (defalias 'jackiebin-update-org 'update-org)

#+END_SRC
* Visual
** Font
#+BEGIN_SRC emacs-lisp
  ;; English Font
  (defvar config-font-family "Monaco")
  (defvar config-font-height 100
    "font-height is 1/10pt so 120 == 120/10 == 12pt")

  ;; Chinese Font
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
                      charset (font-spec :family "WenQuanYi Micro Hei Mono"
                                         :size 12)));;14
#+END_SRC
** Mode line
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config
    (fancy-battery-mode))
  (use-package anzu
    :ensure t
    :config
    (global-anzu-mode +1))
;;  (use-package f
;;    :ensure t)
  (use-package minions
    :ensure t
    :config (minions-mode 1))
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)

    :init
    (setq doom-modeline-icon t
          doom-modeline-major-mode-icon t
          doom-modeline-buffer-file-name-style 'truncate-upto-project
          doom-modeline-persp-name t
          doom-modeline-checker-simple-format t

          ;; Whether display environment version or not
          doom-modeline-env-version t

          ;; Or for individual languages
          doom-modeline-env-enable-python t
          doom-modeline-env-enable-ruby t
          doom-modeline-env-enable-perl t
          doom-modeline-env-enable-go t
          doom-modeline-env-enable-elixir t
          doom-modeline-env-enable-rust t

          ;; Change the executables to use for the language version string
          doom-modeline-env-python-executable "python"
          doom-modeline-env-ruby-executable "ruby"
          doom-modeline-env-perl-executable "perl"
          doom-modeline-env-go-executable "go"
          doom-modeline-env-elixir-executable "iex"
          doom-modeline-env-rust-executable "rustc"

          ;; Whether display irc notifications or not. Requires `circe' package.
          doom-modeline-irc t
          doom-modeline-irc-stylize 'identity

          ;; Versioning (github)
          doom-modeline-github t

          ;;
          doom-modeline-checker-simple-format t)

    (defface egoge-display-time
      '((((type x w32 mac))
         ;; #060525 is the background colour of my default face.
         (:foreground "#060525" :inherit bold))
        (((type tty))
         (:foreground "blue")))
      "Face used to display the time in the mode line.")

    ;; This causes the current time in the mode line to be displayed in
    ;; `egoge-display-time-face' to make it stand out visually.
    (setq display-time-string-forms
          '((propertize (concat "[" 24-hours ":" minutes "] ")
                        'face 'egoge-display-time)))

    (display-time)
    )
#+END_SRC
** Global theme
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :config
    (load-theme 'monokai t))
  ;;(load-theme 'solarized-dark t)
  ;;(load-theme 'cyberpunk t)
#+END_SRC
** Frame
*** Title
#+begin_src emacs-lisp
  (defun frame-title-format ()
    "Return frame title with current project name, where applicable."
    (let ((file buffer-file-name))
      (if file
          (if (and (bound-and-true-p projectile-mode)
                   (projectile-project-p))
              (concat
               (format "[%s] " (projectile-project-name))
               (replace-regexp-in-string (format "^%s" (projectile-project-p)) "" (file-truename file)))
            (abbreviate-file-name file))
        "%b")))

  (when (display-graphic-p)
    (setq frame-title-format '((:eval (frame-title-format)))))

  ;;自定义buffer头,显示更多的buffer标题信息
  ;;(setq frame-title-format
  ;;      '("" " jackiebin ☺ "
  ;;        (:eval (if (buffer-file-name)
  ;;                   (abbreviate-file-name (buffer-file-name)) "%b"))))

#+end_src
*** Remove unused part
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  ;;(menu-bar-mode -1)
  (scroll-bar-mode -1);;(toggle-scroll-bar -1)
  ;; Prevent the startup window
  (setq inhibit-startup-message t)
  ;; Setup fullscreen when startup
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
#+end_src

** Icons
#+begin_src emacs-lisp
  ;; This required some fonts to be downloaded, run `all-the-icons-install-fonts` manually
  ;; https://github.com/emacs-jp/replace-colorthemes
  ;;(use-package all-the-icons-dired
  ;;  :config
  ;;  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-dired
    :ensure t)

  (use-package all-the-icons-ivy
    :ensure t)
#+end_src
** which-key
#+BEGIN_SRC emacs-lisp
  (defvar config-which-key-delay 1.4)
  ;; Display available keybindings in a popup
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay config-which-key-delay)
    :diminish which-key-mode)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :custom
  (dashboard-set-heading-icons t)
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   (if (featurep 'all-the-icons)
       `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust -0.05)
           "EMACS" "Browse MY EMACS Homepage"
           (lambda (&rest _) (browse-url "https://github.com/jackiebin/dotfiles/tree/master/emacs/.emacs.d")))
          (,(all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.1)
           "Configuration" "" (lambda (&rest _) (edit-configs)))))
     `((("" "EMACS" "Browse MY EMACS Homepage"
         (lambda (&rest _) (browse-url "https://github.com/jackiebin/dotfiles/tree/master/emacs/.emacs.d")))
        ("" "Configuration" "" (lambda (&rest _) (edit-configs)))))))
  :config
  ;; Set the title
  (setq dashboard-banner-logo-title
	(concat "GNU Emacs " emacs-version " kernel "
		(car (split-string (shell-command-to-string "uname -r") "-"))
		" x86_64 Manjora Linux GTK " gtk-version-string))
  ;; Set the banner
  (setq dashboard-startup-banner
	(expand-file-name "emacs.png" user-emacs-directory))

  (global-page-break-lines-mode)
  (setq dashboard-page-separator "\n\f\f\n")
  (setq dashboard-items '((recents . 14)))
  (setq dashboard-modify-heading-icons '((recents . "file-text")))

  (dashboard-setup-startup-hook))
#+END_SRC

* Global setting
** global
#+BEGIN_SRC emacs-lisp
  (defvar config-indent-web-mode-spaces 2)

  ;; Set regex syntax to string for re-builder
  (setq reb-re-syntax 'string)

  ;; Hide column numbers
  (setq column-number-mode t)

  ;; Draw underline lower
  (setq x-underline-at-descent-line t)

  ;; Permanently force Emacs to indent with spaces, never with TABs
  ;;(setq-default  indent-tabs-mode nil)

  ;; Disable re-center of the cursor to the middle of page when scroll hits top or bottom of the page
  (setq scroll-conservatively 101)

  ;; Automatically scroll the compilation buffer
  (setq compilation-scroll-output t)

  ;; Give focus to new help windows
  (setq help-window-select t)
  ;; Put apropos in current buffer so it can be read and exited with minimum effort
  (add-to-list 'display-buffer-alist
              '("*Apropos*" display-buffer-same-window)
              '("*Info*" display-buffer-same-window))

  ;; Add /usr/local/bin to the path
  (setq exec-path (append exec-path '("/usr/local/bin")))

  ;; Turn on line numbers
  ;; (global-display-line-numbers-mode)
  ;;(menu-bar-display-line-numbers-mode 'relative)

  ;; Hook line numbers to only when files are opened, also use linum-mode for emacs-version< 26
  (if (version< emacs-version "26")
      (global-linum-mode)
    (add-hook 'text-mode-hook #'display-line-numbers-mode)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode))

  ;; Always hightlight current line
  (global-hl-line-mode t)

  ;; Y or n is enough for me
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Font
  (set-face-attribute 'default nil
                      :family config-font-family
                      :height config-font-height)

  ;; Parenthesis
  (show-paren-mode 1)

  ;; Wrap selection with (, [, ", etc...
  (electric-pair-mode 1)

  ;; Enable narrow to region functionality
  (put 'narrow-to-region 'disabled nil)

  ;; Frequently accessed files (C-x r j <letter>)
  ;; jump-to-register
  (set-register ?i '(file . "~/.emacs.d/settings.org"))
  (set-register ?o '(file . "~/org/agenda/organizer.org"))
  (set-register ?w '(file . "~/org/wiki/index.org"))

  ;; Colorize compilation-mode
  (defun my-colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
          (ansi-color-apply-on-region compilation-filter-start (point-max))))

  (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer)

  ;; When on OSX, change meta to cmd key
  ;; Amethyst, an OSX app I use is mucking around with Option-Shift
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil))

  ;; indent whole buffer
  (defun iwb ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))
  ;; (global-set-key (kbd "C-c n") 'iwb)

  ;; Use a hook so the message doesn't get clobbered by other messages.
  ;; (add-hook 'emacs-startup-hook
  ;;           (lambda ()
  ;;             (message "Emacs ready in %s with %d garbage collections."
  ;;                      (format "%.2f seconds"
  ;;                              (float-time
  ;;                               (time-subtract after-init-time before-init-time)))
  ;;                      gcs-done)))
#+END_SRC
** Minor-mode activation
I use some minor modes based on some filetypes. This package is an helper which facilitates these
activations.

#+begin_src emacs-lisp
  (use-package auto-minor-mode
    :ensure t)
#+end_src
** 2048 game
#+BEGIN_SRC emacs-lisp
(use-package 2048-game
  :commands (2048-game))
#+END_SRC
** Encoding
#+BEGIN_SRC emacs-lisp
  (set-language-environment 'Chinese-GB)
  (set-default buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (setq-default pathname-coding-system 'euc-cn)
  (setq file-name-coding-system 'euc-cn)
  ;; 另外建议按下面的先后顺序来设置中文编码识别方式。
  ;; 重要提示:写在最后一行的，实际上最优先使用; 最前面一行，反而放到最后才识别。
  ;; utf-16le-with-signature 相当于 Windows 下的 Unicode 编码，这里也可写成
  ;; utf-16 (utf-16 实际上还细分为 utf-16le, utf-16be, utf-16le-with-signature等多种)
  (prefer-coding-system 'cp950)
  (prefer-coding-system 'gb2312)
  (prefer-coding-system 'cp936)
  ;;(prefer-coding-system 'gb18030)
  ;(prefer-coding-system 'utf-16le-with-signature)
  (prefer-coding-system 'utf-16)
  ;; 新建文件使用utf-8-unix方式
  ;; 如果不写下面两句，只写
  ;; (prefer-coding-system 'utf-8)
  ;; 这一句的话，新建文件以utf-8编码，行末结束符平台相关
  (prefer-coding-system 'utf-8-dos)
  (prefer-coding-system 'utf-8-unix)
  ;; 说明：使用此配置，新建文件会采用UTF-8(无BOM)格式编码，行末以unix方式("\n")结尾，打开已有的文件，修改，保存还是按原有编码方式保存。
#+END_SRC

* Global packages
** Global
#+BEGIN_SRC emacs-lisp
  ;; Diminish, a feature that removes certain minor modes from mode-line.
  (use-package diminish
    :ensure t)

  ;; Rainbow mode - displays color codes in their color
  (use-package rainbow-mode
    :delight)

  ;; Parenthesis
  (use-package highlight-parentheses
    :diminish 'highlight-parentheses-mode
    :config
    (add-hook 'prog-mode-hook #'highlight-parentheses-mode))

  ;; Undo-tree
  (use-package undo-tree
    :config
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-auto-save-history t)
    ;; save all undo histories to this location
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (defadvice undo-tree-make-history-save-file-name
        (after undo-tree activate)
      (setq ad-return-value (concat ad-return-value ".gz")))
    (global-undo-tree-mode)
    :defer t
    :diminish 'undo-tree-mode)

  ;; Show the argument list of a function in the echo area
  (use-package eldoc
    :diminish eldoc-mode
    :commands turn-on-eldoc-mode
    :defer t)

  ;; Highlight numbers for prog modes
  (use-package highlight-numbers
    :defer t
    :init
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))

  ;; Respect editor configs
  (use-package editorconfig
    :diminish editorconfig-mode
    :config
    (editorconfig-mode 1))

  ;; Syntax highlighting for docker files
  (use-package dockerfile-mode
    :defer t)

  ;; Edit text area in chrome with emacs
  (use-package atomic-chrome
    :config
    (atomic-chrome-start-server)
    (setq atomic-chrome-buffer-open-style 'frame))

  ;; Display used hotkeys in another window
  (use-package command-log-mode
    :diminish command-log-mode)

  ;;I use some minor modes based on some filetypes.
  ;; This package is an helper which facilitates these activations.
  (use-package auto-minor-mode
    :ensure t)

  ;; Minor mode for dealing with pairs, such as quotes
  (use-package smartparens-config
    :ensure smartparens
    :config
    (show-smartparens-global-mode t))
#+END_SRC

** Recent file
Opening recent files is always an easy and fast shortcut. Some files should be ignored though. That
leads to this configuration

#+begin_src emacs-lisp
  ;; Builds a list of recently opened files
  (use-package recentf
    :config
    (setq recentf-max-saved-items 14
          recentf-max-menu-items 5
          recentf-save-file (concat user-emacs-directory ".cache/recentf")
          recentf-auto-cleanup 'never)
    (recentf-mode 1)

    (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
    (add-to-list 'recentf-exclude (expand-file-name (concat user-emacs-directory ".cache/")))
    (add-hook 'delete-terminal-functions (lambda (terminal) (recentf-save-list))))
#+END_SRC

** Backup files
This section is dedicated to deal with backups. The main logic is to exlude some specific files
(either because of they are sensitive, either because they are just results of a process). For the
other ones, I want to have an easy way to navigate in it.

*** Global backup configuration
This the global backup configuration. For that I adapted a little bit the wonderful
snapshot-timemachine package.

#+begin_src emacs-lisp
  (use-package snapshot-timemachine
    :ensure t
    :init

    ;; Default Backup directory
    (defvar backup-directory "~/.emacs.d/backups/")
    (setq backup-directory-alist `((".*" . ,backup-directory)))

    (when (not (file-exists-p backup-directory))
      (make-directory backup-directory t))

    ;; Auto-save
    (defvar auto-save-directory "~/.emacs.d/auto-save/")
    (setq auto-save-file-name-transforms `((".*" ,auto-save-directory t)))

    (when (not (file-exists-p auto-save-directory))
      (make-directory auto-save-directory t))

    ;; Tramp backup
    (defvar tramp-backup-directory "~/.emacs.d/tramp-backups/")
    (setq tramp-backup-directory-alist `((".*" . ,tramp-backup-directory)))

    (when (not (file-exists-p tramp-backup-directory))
      (make-directory tramp-backup-directory t))

    (setq make-backup-files t               ; backup of a file the first time it is saved.
          backup-by-copying t               ; don't clobber symlinks
          version-control t                 ; version numbers for backup files
          delete-old-versions t             ; delete excess backup files silently
          delete-by-moving-to-trash t
          kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
          kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
          auto-save-default t               ; auto-save every buffer that visits a file
          auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
          auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
          )

    :config

    (defun snapshot-timemachine-backup-finder (file)
      "Find snapshots of FILE in rsnapshot backups."
      (let* ((file (expand-file-name file))
             (file-adapted (replace-regexp-in-string "/" "!" file))
             (backup-files(directory-files backup-directory t (format "%s.*" file-adapted))))
        (seq-map-indexed (lambda (backup-file index)
                           (make-snapshot :id index
                                          :name (format "%d" index)
                                          :file backup-file
                                          :date (nth 5 (file-attributes backup-file))))
                         backup-files)))

    (setq snapshot-timemachine-snapshot-finder #'snapshot-timemachine-backup-finder))
#+end_src

*** Sensitive mode
There are some files which are not desired to be backed up. This part goal is to setup this
"avoiding saving" spécificities.

#+begin_src emacs-lisp
  (define-minor-mode sensitive-mode
    "For sensitive files like password lists.
  It disables backup creation and auto saving.

  With no argument, this command toggles the mode.
  Non-null prefix argument turns on the mode.
  Null prefix argument turns off the mode."
    ;; The initial value.
    nil
    ;; The indicator for the mode line.
    " Sensitive"
    ;; The minor mode bindings.
    nil
    (if (symbol-value sensitive-mode)
        (progn
          ;; disable backups
          (set (make-local-variable 'backup-inhibited) t)
          ;; disable auto-save
          (if auto-save-default
              (auto-save-mode -1)))
                                          ;resort to default value of backup-inhibited
      (kill-local-variable 'backup-inhibited)
                                          ;resort to default auto save setting
      (if auto-save-default
          (auto-save-mode 1))))


  (add-to-list 'auto-minor-mode-alist '("\\.git/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("emacs\\.d/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("emacs\\.d/emms/.*\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("Calendars/.*.org\\'" . sensitive-mode))
  (add-to-list 'auto-minor-mode-alist '("\\.gpg\\'" . sensitive-mode))
#+end_src

** Copy/Pasted
Baseline configuration for copy/pasting, nothing fancy.

#+begin_src emacs-lisp
  (setq mouse-drag-copy-region nil
        select-enable-primary nil
        select-enable-clipboard t
        select-active-regions t)
#+end_src

** Language checking
Writing a text is difficult enough, having some helpers to check and correct the language is necessary for me.

*** Spelling
Configuration of the (fly) spelling for emacs. For spelling, I am using aspell.

#+begin_src emacs-lisp
  ;; Flyspell
;;  (use-package flyspell
;;    :config
;;    (setq flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))
;;    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
;;    :diminish 'flyspell-mode)
  ;; Correct the misspelled word in a popup menu
;;  (use-package flyspell-popup
;;    :config
;;    (define-key flyspell-mode-map (kbd "C-;") #'flyspell-popup-correct)
;;    (define-key popup-menu-keymap (kbd "C-j") 'popup-next)
;;    (define-key popup-menu-keymap (kbd "C-k") 'popup-previous)
;;    (define-key popup-menu-keymap (kbd "C-l") 'popup-select))

  (use-package flyspell
    :ensure t
    :config

    ;; Set programms
    (setq-default ispell-program-name "aspell")
    (setq-default ispell-list-command "--list")

    ;; Some skipping
    (add-to-list 'ispell-skip-region-alist '("^#+begin_src" . "^#+end_src"))

    ;; Refresh flyspell after directory change
    (defun flyspell-buffer-after-pdict-save (&rest _)
      (flyspell-buffer))
    (advice-add 'ispell-pdict-save :after #'flyspell-buffer-after-pdict-save)

    ;; Popup
    (defun flyspell-emacs-popup-textual (event poss word)
      "A textual flyspell popup menu."
      (require 'popup)
      (let* ((corrects (if flyspell-sort-corrections
                           (sort (car (cdr (cdr poss))) 'string<)
                         (car (cdr (cdr poss)))))
             (cor-menu (if (consp corrects)
                           (mapcar (lambda (correct)
                                     (list correct correct))
                                   corrects)
                         '()))
             (affix (car (cdr (cdr (cdr poss)))))
             show-affix-info
             (base-menu  (let ((save (if (and (consp affix) show-affix-info)
                                         (list
                                          (list (concat "Save affix: " (car affix))
                                                'save)
                                          '("Accept (session)" session)
                                          '("Accept (buffer)" buffer))
                                       '(("Save word" save)
                                         ("Accept (session)" session)
                                         ("Accept (buffer)" buffer)))))
                           (if (consp cor-menu)
                               (append cor-menu (cons "" save))
                             save)))
             (menu (mapcar
                    (lambda (arg) (if (consp arg) (car arg) arg))
                    base-menu)))
        (cadr (assoc (popup-menu* menu :scroll-bar t) base-menu))))


    (defun flyspell-emacs-popup-choose (org-fun event poss word)
      (if (window-system)
          (funcall org-fun event poss word)
        (flyspell-emacs-popup-textual event poss word)))

    (eval-after-load "flyspell"
      '(progn
         (advice-add 'flyspell-emacs-popup :around #'flyspell-emacs-popup-choose)))
    )
#+end_src
*** English checking
lang-tool is actually supported by emacs through a dedicated mode which allows to have syntax and
typography checking.
$ sudo pacman -S languagetool
To check current buffer and show warnings.
M-x langtool-check
To finish checking. All langtool marker is removed.
M-x langtool-check-done
#+BEGIN_SRC emacs-lisp
  (use-package langtool
    :ensure quelpa
    :quelpa (langtool :fetcher github :repo "mhayashi1120/Emacs-langtool")
    :init
    (setq langtool-java-classpath
          "/usr/share/languagetool:/usr/share/java/languagetool/*"))
    ;;(setq langtool-language-tool-server-jar "~/work/tools/src/languagetool/languagetool/languagetool-server.jar"))
#+END_SRC
** edit
#+BEGIN_SRC emacs-lisp
 ;; Hungry deletion
  (use-package hungry-delete
    :diminish
    :hook (after-init . global-hungry-delete-mode)
    :config (setq-default hungry-delete-chars-to-skip " \t\f\v"))

  ;; Automatically reload files was modified by external program
  (use-package autorevert
    :ensure nil
    :diminish
    :hook (after-init . global-auto-revert-mode))

  ;; Expand selected region by semantic units
  (use-package expand-region
    :config
    (pending-delete-mode t)
    :bind ("C-=" . er/expand-region))

  ;; Edit multiple regions simultaneously in a buffer or a region
  ;;(use-package iedit
  ;;  :ensure t
  ;;  :config
  ;;  (delete-selection-mode t))

  ;; Multiple cursors
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c"   . mc/edit-lines)
           ("C->"           . mc/mark-next-like-this)
           ("C-<"           . mc/mark-previous-like-this)
           ("C-c C-<"       . mc/mark-all-like-this)
           ("C-M->"         . mc/skip-to-next-like-this)
           ("C-M-<"         . mc/skip-to-previous-like-this)
           ("s-<mouse-1>"   . mc/add-cursor-on-click)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click)
           :map mc/keymap
           ("C-|" . mc/vertical-align-with-space)))
  ;; Smartly select region, rectangle, multi cursors
  (use-package smart-region
    :hook (after-init . smart-region-on))
#+END_SRC
** Evil Nerd Commenter
Evil Nerd Commenter, a tool that helps you comment code efficiently.
#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter
  :bind
  (("C-c M-;" . c-toggle-comment-style)
   ("M-;" . evilnc-comment-or-uncomment-lines)))
#+END_SRC
** chinese input
#+BEGIN_SRC emacs-lisp
  (use-package pyim
    :ensure nil
    :demand t
    :config
    ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
    (use-package pyim-basedict
      :ensure nil
      :config (pyim-basedict-enable))

    (setq default-input-method "pyim")

    ;; 我使用全拼
    ;;(setq pyim-default-scheme 'quanpin)

    ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
    ;; 我自己使用的中英文动态切换规则是：
    ;; 1. 光标只有在注释里面时，才可以输入中文。
    ;; 2. 光标前是汉字字符时，才能输入中文。
    ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
    (setq-default pyim-english-input-switch-functions
                  '(pyim-probe-dynamic-english
                    pyim-probe-isearch-mode
                    pyim-probe-program-mode
                    pyim-probe-org-structure-template))

    (setq-default pyim-punctuation-half-width-functions
                  '(pyim-probe-punctuation-line-beginning
                    pyim-probe-punctuation-after-punctuation))

    ;; 开启拼音搜索功能
    (pyim-isearch-mode 1)

    ;; 使用 pupup-el 来绘制选词框, 如果用 emacs26, 建议设置
    ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
    ;; 手动安装 posframe 包。
    (setq pyim-page-tooltip 'popup)

    ;; 选词框显示5个候选词
    (setq pyim-page-length 5)

    :bind
    (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
     ("C-;" . pyim-delete-word-from-personal-buffer)))
#+END_SRC
** Navigation
This part is dedicated to the configuration for buffer (even large) navigation.
*** Scrolling (and fast please !)
#+begin_src emacs-lisp
  (use-package fast-scroll
    :ensure t
    :hook
    (fast-scroll-start      . (lambda () (flycheck-mode -1)))
    (fast-scroll-end        . (lambda () (flycheck-mode 1)))

    :config
    (fast-scroll-config)
    (fast-scroll-mode 1))
#+end_src
*** Preview
First, instead of jumping we simply can preview the jump.

#+BEGIN_SRC emacs-lisp
  (use-package goto-line-preview
    :ensure t
    :commands (goto-line-preview)
    :bind
    (("M-g g" . goto-line-preview)))
#+END_SRC
*** Ace jump
#+BEGIN_SRC emacs-lisp
  ;; Windows management: Quickly switch windows in Emacs
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreguound :height 3.0 :foreground "deep sky blue")))))
      ))
  (use-package ace-jump-mode
    :ensure t
    :config
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+END_SRC
*** Remember last jump
Also, I tend to jump a lot for quick modification. So remembering the jump is absolute crucial in my
workflow.

#+BEGIN_SRC emacs-lisp
  (use-package goto-last-point
    :ensure t
    :functions (goto-last-point-mode)
    ;;:bind ("C-<" . goto-last-point)
    :config (goto-last-point-mode))
#+END_SRC
** Buffers
Some buffer specificities configuration like how to deal with trailing whitespaces or the
fill-column for example.

#+begin_src emacs-lisp
  ;; Open Large file
  (use-package vlf
    :ensure t
    :config
    (require 'vlf-setup))

  ;; 保存时自动清除行尾空格及文件结尾空行
  (add-hook 'before-save-hook 'delete-trailing-whitespace)


  ;; Unify the buffer name style
  (eval-after-load "uniquify"
    '(progn
       (setq uniquify-buffer-name-style 'forward)))

  ;; Redefine fill-column as my screen is not 80 chars :D
  ;; (setq-default fill-column 100)
#+end_src

*** format-all
We can globally reformat the buffer relying on external tool. =format-all= is here for this.

#+begin_src emacs-lisp
  (use-package format-all
    :ensure t
    :commands (format-all-buffer format-all-mode))
  (setq clang-format-style-option "google")
#+end_src

*** Specific mode cleaning helper
I define a facilities for some specific buffers. For now, it disables only the smartparens but it
could be modified to be more general.

#+begin_src emacs-lisp
  (defun disable-global-facilities ()
    "Function to disable some utilities globally activated for current buffer"
    (interactive)
    (smartparens-mode 0)
    ;; (nlinum-mode 0)
    )
#+end_src
** Searching
Double-saber is really helpful to reduce the result of a search after the search itself.

#+BEGIN_SRC emacs-lisp
  (use-package double-saber
    :ensure t
    :config
    (with-eval-after-load "ripgrep"
      (add-hook 'ripgrep-search-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Ripgrep finished"))))

    (with-eval-after-load "grep"
      (add-hook 'grep-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Grep finished"))))

    (with-eval-after-load "ggtags"
      (add-hook 'ggtags-global-mode-hook
                (lambda ()
                  (double-saber-mode)
                  (setq-local double-saber-start-line 5)
                  (setq-local double-saber-end-text "Global found")))))

  (with-eval-after-load "ivy"
    (add-hook 'ivy-occur-grep-mode-hook
              (lambda ()
                (double-saber-mode)
                (setq-local double-saber-start-line 5))))
#+END_SRC



* Completion
This part focuses on completion configuration. Language specific configurations are not done here
but in the dedicate language configuration part. This section is just for global configuration.

** Compdef
#+begin_src emacs-lisp
(use-package compdef :ensure t)
#+end_src
** Ivy/swipper/counsel
I do prefer vertical completion, which is why I use extensively Ivy and extensions.

#+begin_src emacs-lisp
;; Generic completion frontend
(use-package counsel
  :ensure t
  :bind
  (("M-x" . counsel-M-x)
   ("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
;; Enhance M-x
(use-package amx
  :init (setq amx-history-length 20))

(global-set-key (kbd "C-x C-f") #'counsel-find-file)
(global-set-key (kbd "C-c r") #'counsel-recentf)

(use-package flx)
(use-package ivy-hydra)
(use-package ivy
  :diminish 'ivy-mode
  :config
  (ivy-mode t)
  (setq ivy-display-style 'fancy
        ivy-use-virtual-buffers t
        enable-recursive-minibuffers t
        ivy-use-selectable-prompt t)
  ;; make everything fuzzy except swiper
  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
          (t . ivy--regex-fuzzy))))

(global-set-key (kbd "C-r") #'swiper)
(global-set-key (kbd "C-s") #'swiper)

  (use-package ivy-rich
    :ensure t
    :config
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src
** Helm
I use Helm for some specific cases which requires an important visibility space completion.

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :functions helm-show-completion-default-display-function
    :config
    (setq helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
          helm-quick-update t ; do not display invisible candidates
          helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
          helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
          helm-show-completion-display-function #'helm-show-completion-default-display-function
          helm-split-window-default-side 'below ;; open helm buffer in another window
          helm-split-window-inside-p t ;; open helm buffer inside current window, not occupy whole other window
          helm-candidate-number-limit 200 ; limit the number of displayed canidates
          helm-move-to-line-cycle-in-source nil ; move to end or beginning of source when reaching top or bottom of source.
          )
    )
#+end_src
** Company
In order to have inline completion, really important for coding, I use company. However I adapted
some facing attributes. Each language is also adding its backend when needed. Therefore, only global
configuration here.

#+begin_src emacs-lisp
  ;; Company mode
;;  (use-package company
;;    :diminish 'company-mode
;;    :config
;;    (setq company-tooltip-align-annotations t)
;;    (add-hook 'after-init-hook 'global-company-mode))

  (use-package company
    :ensure t
    :hook
    (emacs-lisp-mode . (lambda () (add-to-list (make-local-variable 'company-backends) '(company-elisp))))
    :config

    ;; Global
    (setq company-idle-delay 1
          company-minimum-prefix-length 1
          company-show-numbers t
          company-tooltip-limit 20)

    ;; Facing
    (unless (face-attribute 'company-tooltip :background)
      (set-face-attribute 'company-tooltip nil :background "black" :foreground "gray40")
      (set-face-attribute 'company-tooltip-selection nil :inherit 'company-tooltip :background "gray15")
      (set-face-attribute 'company-preview nil :background "black")
      (set-face-attribute 'company-preview-common nil :inherit 'company-preview :foreground "gray40")
      (set-face-attribute 'company-scrollbar-bg nil :inherit 'company-tooltip :background "gray20")
      (set-face-attribute 'company-scrollbar-fg nil :background "gray40"))

    ;; Default backends
    (setq company-backends '(company-capf company-files))

    ;; Activating globally
    (global-company-mode t))

  (use-package company-quickhelp
    :ensure t
    :after company
    :config
    (company-quickhelp-mode 1))
#+end_src
** Templating
I use templates for 2 use cases: the buffer edition and the file specific templates. Both are relying on *yasnippet*.

*** Edition templates
The default configuration of yasnippet consists of activating it and plugging it with company.
Ivy-yasnippet is used for snippet discovery.
#+BEGIN_SRC emacs-lisp
  ;; Yasnippet, a template system for emacs
;;  (use-package yasnippet
;;    :ensure t
;;    :config
    ;; Adding yasnippet support to company
;;    (add-to-list 'company-backends '(company-yasnippet))
;;    :init
;;    (yas-global-mode 1))

;;  (use-package yasnippet-snippets
;;    :ensure t)
;;  (use-package yasnippet-classic-snippets
;;    :ensure t)
;;  (use-package ivy-yasnippet
;;    :ensure t)
  (use-package yasnippet
    :ensure t
    :config

    ;; Adding yasnippet support to company
    (eval-after-load 'company
      '(lambda ()
         (add-to-list 'company-backends 'company-yasnippet)))

    ;; Add third parties snippets
    (defvar third-parties-snippet-dir (format "%s/third_parties/snippets" user-emacs-directory)
      "Directory containing my own snippets")

    (defun third-parties-snippets-initialize ()
      (add-to-list 'yas-snippet-dirs 'third-parties-snippet-dir t)
      (yas-load-directory third-parties-snippet-dir t))

    (eval-after-load 'yasnippet '(third-parties-snippets-initialize))

    ;; Activate global
    (yas-global-mode))

  ;; Load official snippets
  (use-package yasnippet-snippets
    :ensure t)
  (use-package yasnippet-classic-snippets
    :ensure t)

  ;; Connect with ivy to have a list on demand
  (use-package ivy-yasnippet
    :ensure t)

#+END_SRC
*** Filetype templates
This part is using yatemplate (an over-layer of yasnippet) coupled with auto-insert to have a set of
file type dedicated templates. The templates are available in =third_parties/templates= directory.
=M-x auto-insert= will put some predefined text at the beginning of the buffer.

#+begin_src emacs-lisp
  (use-package yatemplate
    :after yasnippet
    :config

    ;; Define template directory
    (setq yatemplate-dir (concat user-emacs-directory "/third_parties/templates"))

    ;; Coupling with auto-insert
    (setq auto-insert-alist nil)
    (yatemplate-fill-alist)
    ;; (add-hook 'find-file-hook 'auto-insert)
    )
#+end_src
** Prescient
Prescient helps to sort candidates by last used first and then sorting by length.

#+begin_src emacs-lisp
  (use-package prescient
    :ensure t
    :config (prescient-persist-mode))

  (use-package ivy-prescient
    :ensure t
    :config (ivy-prescient-mode))

  (use-package company-prescient
    :ensure t
    :config (company-prescient-mode))
#+end_src
* Compilation
I develop with emacs, so compiling is actually a big part of my life. Therefore, I modified baseline
compilation mechanisms as well as fly checking.

** Baseline compilation
I just modify a little bit the default compilation to be a little more "user friendly".

#+begin_src emacs-lisp
  (defun my-compile-autoclose (buffer string)
    "Auto close compile log if there are no errors"
    (when (string-match "finished" string)
          (delete-window (get-buffer-window buffer t))
          (bury-buffer-internal buffer)))

  (use-package compile
    :defer
    :diminish compilation-in-progress
    :init
    (setq compilation-scroll-output t)
    :config
    (defun my-colorize-compilation-buffer ()
          (read-only-mode 'toggle)
          (ansi-color-apply-on-region compilation-filter-start (point))
          (read-only-mode 'toggle))
    (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer)
    (add-to-list 'compilation-finish-functions #'my-compile-autoclose)

    (setq compilation-always-kill t)
    (setq compilation-ask-about-save nil)
    (setq compilation-scroll-output 'first-error)

    ;; the next-error function weirdly stops at "In file included from
    ;; config.cpp:14:0:". Stop that:
    ;; http://stackoverflow.com/questions/15489319/how-can-i-skip-in-file-included-from-in-emacs-c-compilation-mode
    (setcar (nthcdr 5 (assoc 'gcc-include compilation-error-regexp-alist-alist)) 0)
    )
#+end_src

** Flychecking
For the fly checking, I use flycheck instead of flymake. So I adapted it for my needs by also adding proselint support.

#+begin_src emacs-lisp
  ;; Disable checking doc
  (use-package flycheck
    :ensure t
    :commands (flycheck-error-list-set-filter flycheck-next-error flycheck-previous-error flycheck-first-error)
    :hydra
    (hydra-flycheck (:pre (progn (setq hydra-hint-display-type t) (flycheck-list-errors))
                     :post (progn (setq hydra-hint-display-type nil) (quit-windows-on "*Flycheck errors*"))
                     :color teal :hint nil)
                    "Errors"
                    ("f"  flycheck-error-list-set-filter                            "Filter")
                    ("j"  flycheck-next-error                                       "Next")
                    ("k"  flycheck-previous-error                                   "Previous")
                    ("gg" flycheck-first-error                                      "First")
                    ("G"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
                    ("<" hydra-project/body "back")
                    ("q"   nil "cancel" :color blue))

    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))

    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message) line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))
    )
#+end_src

** Task runner
#+begin_src emacs-lisp
  (use-package taskrunner
    :ensure t)

  (use-package ivy-taskrunner
    :ensure quelpa
    :quelpa (ivy-taskrunner :fetcher "github" :repo "emacs-taskrunner/ivy-taskrunner")
    :bind ("C-c C-g b" . ivy-taskrunner))
#+end_src
* Personal keymap
#+BEGIN_SRC emacs-lisp
;; Unbind unneeded keys
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key (kbd "M-/") nil)

(global-set-key (kbd "<f5>") #'revert-buffer)
(global-set-key (kbd "C-c C-.") #'helpful-at-point)
(global-set-key (kbd "C-h b") #'describe-bindings)
(global-set-key (kbd "C-h f") #'helpful-callable)
(global-set-key (kbd "C-h k") #'helpful-key)
(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-x C-b") #'ibuffer)
(global-set-key (kbd "C-x C-e") #'pp-eval-last-sexp)

(global-set-key (kbd "M-i") #'imenu)

(global-set-key (kbd "C-x k") 'kill-this-buffer)

;;opening new lines can be finichy
(defun open-line-below()
    "open line below."
    (interactive)
    (end-of-line)
    (newline)
    (indent-for-tab-command))
(defun open-line-above()
    "open line above."
    (interactive)
    (beginning-of-line)
    (newline)
    (forword-line -1)
    (indent-for-tab-command))
(global-set-key (kbd "<C-return>") 'open-line-below)
(global-set-key (kbd "<C-S-return>") 'open-line-above)

(defun scroll-half-page-down ()
  "scroll down half the page"
  (interactive)
  (scroll-down (/ (window-body-height) 2)))

(defun scroll-half-page-up ()
  "scroll up half the page"
  (interactive)
  (scroll-up (/ (window-body-height) 2)))

(global-set-key "\M-n" 'scroll-half-page-up)
(global-set-key "\M-p" 'scroll-half-page-down)

(global-set-key (kbd "C-S-n")
                (lambda()
                  (interactive)
                  (ignore-errors (next-line 5))))
(global-set-key (kbd "C-S-p")
                (lambda()
                  (interactive)
                  (ignore-errors (previous-line 5))))
(global-set-key (kbd "C-S-f")
                (lambda()
                  (interactive)
                  (ignore-errors (forword-char 5))))
(global-set-key (kbd "C-S-b")
                (lambda()
                  (interactive)
                  (ignore-errors (backward-char 5))))
;;
;; Copy or Cut one line if no content selected
;;
;; copy region or whole line
(global-set-key "\M-w"
(lambda ()
  (interactive)
  (if mark-active
      (kill-ring-save (region-beginning)
      (region-end))
    (progn
     (kill-ring-save (line-beginning-position)
     (line-end-position))
     (message "copied line")))))

;; kill region or whole line
(global-set-key "\C-w"
(lambda ()
  (interactive)
  (if mark-active
      (kill-region (region-beginning)
   (region-end))
    (progn
     (kill-region (line-beginning-position)
  (line-end-position))
     (message "killed line")))))

#+END_SRC



* org
<s TAB : insert source block
M-x org-edit-src-code : edit source block
** The org package
#+BEGIN_SRC emacs-lisp
;; Org mode, for keeping notes, todo lists, etc... in plain text
(use-package org
  :config
  (setq org-todo-keywords '("TODO" "STARTED" "WAITING" "DONE"))
  (setq org-agenda-include-diary t)
  (setq org-src-fontify-natively t)
  (setq org-default-notes-file "~/org/agenda/organizer.org")

  ;; Prettify UI
  (use-package org-bullets
    :if (char-displayable-p ?◉)
    :hook (org-mode . org-bullets-mode))

  (use-package org-fancy-priorities
    :diminish
    :defines org-fancy-priorities-list
    :hook (org-mode . org-fancy-priorities-mode)
    :config
    (unless (char-displayable-p ?❗)
      (setq org-fancy-priorities-list '("HIGH" "MID" "LOW" "OPTIONAL")))))
  ;; Indentation
  (use-package highlight-indent-guides
    :ensure t
    :commands (highlight-indent-guides-mode)
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'column))
  ;; Show current function
  (which-function-mode 1)
  ;;Faces/Colors
  (use-package rainbow-mode
    :ensure t
    :commands (rainbow-mode))
#+END_SRC
** Agenda and capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/org/agenda"
                               "~/org/agenda/projects/"))
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+END_SRC
* PDF
** Global
  #+begin_src emacs-lisp
    (use-package pdf-tools
      :functions
      (pdf-history-backward
       pdf-history-forward
       pdf-links-action-perfom
       pdf-links-isearch-link
       pdf-view-enlarge
       pdf-view-shrink
       pdf-view-scale-reset
       pdf-view-fit-height-to-window
       pdf-view-fit-width-to-window
       pdf-view-fit-page-to-window
       pdf-view-next-page-command
       pdf-view-previous-page-command
       pdf-view-dark-minor-mode)


      :hook
      (pdf-view-mode . (lambda ()
                         (pdf-misc-size-indication-minor-mode)
                         (pdf-links-minor-mode)
                         (pdf-isearch-minor-mode)
                         (cua-mode 0)))

      :bind
      (:map pdf-view-mode-map
            ("/" . hydra-pdftools/body)
            ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
            ("<C-s>" . isearch-forward)
            ("g"  . pdf-view-first-page)
            ("G"  . pdf-view-last-page)
            ("l"  . image-forward-hscroll)
            ("h"  . image-backward-hscroll)
            ("j"  . pdf-view-next-page)
            ("k"  . pdf-view-previous-page)
            ("e"  . pdf-view-goto-page)
            ("u"  . pdf-view-revert-buffer)
            ("al" . pdf-annot-list-annotations)
            ("ad" . pdf-annot-delete)
            ("aa" . pdf-annot-attachment-dired)
            ("am" . pdf-annot-add-markup-annotation)
            ("at" . pdf-annot-add-text-annotation)
            ("y"  . pdf-view-kill-ring-save)
            ("i"  . pdf-misc-display-metadata)
            ("s"  . pdf-occur)
            ("b"  . pdf-view-set-slice-from-bounding-box)
            ("r"  . pdf-view-reset-slice))

      :hydra
      (hydra-pdftools (:color blue :hint nil)
                      "
                PDF tools

             Move  History   Scale/Fit                  Annotations     Search/Link     Do
          ------------------------------------------------------------------------------------------------
               ^^_g_^^      _B_    ^↧^    _+_    ^ ^     _al_: list    _s_: search    _u_: revert buffer
               ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   _am_: markup  _o_: outline   _i_: info
               ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     _at_: text    _F_: link      _d_: dark mode
               ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   _ad_: delete  _f_: search link
          _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     _aa_: dired
               ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   _y_:  yank
               ^^_n_^^      ^ ^  _r_eset slice box
               ^^^↓^^^
               ^^_G_^^
          "
                      ("<ESC>" nil "quit")
                      ("al" pdf-annot-list-annotations)
                      ("ad" pdf-annot-delete)
                      ("aa" pdf-annot-attachment-dired)
                      ("am" pdf-annot-add-markup-annotation)
                      ("at" pdf-annot-add-text-annotation)
                      ("y"  pdf-view-kill-ring-save)
                      ("+" pdf-view-enlarge :color red)
                      ("-" pdf-view-shrink :color red)
                      ("0" pdf-view-scale-reset)
                      ("H" pdf-view-fit-height-to-window)
                      ("W" pdf-view-fit-width-to-window)
                      ("P" pdf-view-fit-page-to-window)
                      ("n" pdf-view-next-page-command :color red)
                      ("p" pdf-view-previous-page-command :color red)
                      ("d" pdf-view-dark-minor-mode)
                      ("b" pdf-view-set-slice-from-bounding-box)
                      ("r" pdf-view-reset-slice)
                      ("g" pdf-view-first-page)
                      ("G" pdf-view-last-page)
                      ("e" pdf-view-goto-page)
                      ("o" pdf-outline)
                      ("s" pdf-occur)
                      ("i" pdf-misc-display-metadata)
                      ("u" pdf-view-revert-buffer)
                      ("F" pdf-links-action-perfom)
                      ("f" pdf-links-isearch-link)
                      ("B" pdf-history-backward :color red)
                      ("N" pdf-history-forward :color red)
                      ("l" image-forward-hscroll :color red)
                      ("h" image-backward-hscroll :color red))

      :magic ("%PDF" . pdf-view-mode)

      :config
      ;; Install what need to be installed !
      (pdf-tools-install t t t)

      ;; open pdfs scaled to fit page
      (setq-default pdf-view-display-size 'fit-page)

      ;; automatically annotate highlights
      (setq pdf-annot-activate-created-annotations t)

      ;; more fine-grained zooming
      (setq pdf-view-resize-factor 1.1))

    (use-package pdf-view-restore
      :ensure t
      :after pdf-tools
      :hook
      (pdf-view-mode-hook . pdf-view-restore-mode))
  #+end_src
** Grepping
#+BEGIN_SRC emacs-lisp
  (use-package pdfgrep
    :config
    (pdfgrep-mode))
#+END_SRC
* ibuffer
#+BEGIN_SRC emacs-lisp
(defun ibuffer-clean ()
  "Clean automatically created buffers"
  (interactive)
  (ibuffer-unmark-all ?*)
  (ibuffer-mark-by-mode 'help-mode)
  (ibuffer-mark-by-mode 'magit-mode)
  (ibuffer-mark-by-mode 'occur-mode)
  (ibuffer-mark-by-mode 'grep-mode)
  (ibuffer-mark-by-mode 'dired-mode)
  (ibuffer-mark-by-mode 'completion-list-mode)
  (ibuffer-mark-by-mode 'compilation-mode)
  (ibuffer-mark-by-mode 'Man-mode)
  (ibuffer-mark-by-mode 'browse-kill-ring-mode)
  (ibuffer-mark-by-name-regexp "*anything*")
  (ibuffer-mark-by-name-regexp "*ESS*")
  (ibuffer-mark-by-name-regexp "*Shell Command Output*")
  (ibuffer-mark-by-name-regexp "*Compile-Log*")
  (ibuffer-mark-by-name-regexp "*vc-diff*")
  (ibuffer-do-delete))
#+END_SRC

* Eshell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :ensure nil
  :defines (compilation-last-buffer eshell-prompt-function)
  :commands (eshell/alias
             eshell-send-input eshell-flatten-list
             eshell-interactive-output-p eshell-parse-command)
  :hook (eshell-mode . (lambda ()
                         (bind-key "C-l" 'eshell/clear eshell-mode-map)
                         (eshell/alias "f" "find-file $1")
                         (eshell/alias "fo" "find-file-other-window $1")
                         (eshell/alias "d" "dired $1")
                         (eshell/alias "ll" "ls -l")
                         (eshell/alias "la" "ls -al")))
  :preface
  (defun eshell/clear ()
    "Clear the eshell buffer."
    (interactive)
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))

  (defun eshell/emacs (&rest args)
    "Open a file (ARGS) in Emacs.  Some habits die hard."
    (if (null args)
        ;; If I just ran "emacs", I probably expect to be launching
        ;; Emacs, which is rather silly since I'm already in Emacs.
        ;; So just pretend to do what I ask.
        (bury-buffer)
      ;; We have to expand the file names or else naming a directory in an
      ;; argument causes later arguments to be looked for in that directory,
      ;; not the starting directory
      (mapc #'find-file (mapcar #'expand-file-name (eshell-flatten-list (reverse args))))))

  (defalias 'eshell/e 'eshell/emacs)

  (defun eshell/ec (&rest args)
    "Compile a file (ARGS) in Emacs.  Use `compile' to do background make."
    (if (eshell-interactive-output-p)
        (let ((compilation-process-setup-function
               (list 'lambda nil
                     (list 'setq 'process-environment
                           (list 'quote (eshell-copy-environment))))))
          (compile (eshell-flatten-and-stringify args))
          (pop-to-buffer compilation-last-buffer))
      (throw 'eshell-replace-command
             (let ((l (eshell-stringify-list (eshell-flatten-list args))))
               (eshell-parse-command (car l) (cdr l))))))
  (put 'eshell/ec 'eshell-no-numeric-conversions t)

  (defun eshell-view-file (file)
    "View FILE.  A version of `view-file' which properly rets the eshell prompt."
    (interactive "fView file: ")
    (unless (file-exists-p file) (error "%s does not exist" file))
    (let ((buffer (find-file-noselect file)))
      (if (eq (get (buffer-local-value 'major-mode buffer) 'mode-class)
              'special)
          (progn
            (switch-to-buffer buffer)
            (message "Not using View mode because the major mode is special"))
        (let ((undo-window (list (window-buffer) (window-start)
                                 (+ (window-point)
                                    (length (funcall eshell-prompt-function))))))
          (switch-to-buffer buffer)
          (view-mode-enter (cons (selected-window) (cons nil undo-window))
                           'kill-buffer)))))

  (defun eshell/less (&rest args)
    "Invoke `view-file' on a file (ARGS).  \"less +42 foo\" will go to line 42 in the buffer for foo."
    (while args
      (if (string-match "\\`\\+\\([0-9]+\\)\\'" (car args))
          (let* ((line (string-to-number (match-string 1 (pop args))))
                 (file (pop args)))
            (eshell-view-file file)
            (forward-line line))
        (eshell-view-file (pop args)))))

  (defalias 'eshell/more 'eshell/less)
  :config
  ;;  Display extra information for prompt
  (use-package eshell-prompt-extras
    :after esh-opt
    :defines eshell-highlight-prompt
    :commands (epe-theme-lambda epe-theme-dakrone epe-theme-pipeline)
    :init (setq eshell-highlight-prompt nil
                eshell-prompt-function 'epe-theme-lambda))

  ;; Fish-like history autosuggestions
  (use-package esh-autosuggest
    :defines ivy-display-functions-alist
    :preface
    (defun setup-eshell-ivy-completion ()
      (setq-local ivy-display-functions-alist
                  (remq (assoc 'ivy-completion-in-region ivy-display-functions-alist)
                        ivy-display-functions-alist)))
    :bind (:map eshell-mode-map
           ([remap eshell-pcomplete] . completion-at-point))
    :hook ((eshell-mode . esh-autosuggest-mode)
           (eshell-mode . setup-eshell-ivy-completion)))

  ;; Eldoc support
  (use-package esh-help
    :init (setup-esh-help-eldoc))

  ;; `cd' to frequent directory in eshell
  (use-package eshell-z
    :hook (eshell-mode
           .
           (lambda () (require 'eshell-z)))))
#+END_SRC

* Project management
** Configuration projectile
The commands are based on http://endlessparentheses.com/improving-projectile-with-extra-commands.html?source=rss
#+BEGIN_SRC emacs-lisp
;; ripgrep
(use-package rg)

;; A project interaction library
(use-package projectile
  :after (rg)
  :config
  (setq projectile-project-search-path '("~/dev"))
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (projectile-global-mode)
  :init
  (setq projectile-cache-file (concat user-emacs-directory ".cache/projectile.cache")
        projectile-known-projects-file (concat user-emacs-directory
                                               ".cache/projectile-bookmarks.eld"))
  (add-hook 'find-file-hook (lambda ()
                              (unless recentf-mode (recentf-mode)
                                      (recentf-track-opened-file))))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :bind
  (:map projectile-mode-map ("C-c p s p" . rg-project))
  :diminish 'projectile-mode)
#+END_SRC
** Completion
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :after projectile
    :functions
    (counsel-projectile-find-file-in-directory
     counsel-projectile-ibuffer
     counsel-projectile-kill-buffers
     counsel-projectile-multi-occur
     counsel-projectile-recentf
     counsel-projectile-remove-known-project
     counsel-projectile-cleanup-known-projects
     counsel-projectile-cache-current-file
     counsel-projectile-invalidate-cache
     ggtags-update-tags ;; FIXME: a require should be put somewhere maybe
     )

    :hydra
    (hydra-projectile (:color teal :hint nil)
                      "
         PROJECTILE: %(projectile-project-root)

         Find File            Search/Tags          Buffers                Cache
    ------------------------------------------------------------------------------------------
    _s-f_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
     _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
     _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
      _r_: recent file                                               ^^^^_z_: cache current
      _d_: dir

    "
                      ("<ESC>" nil "quit")
                      ("<" hydra-project/body "back")
                      ("a"   counsel-projectile-ag)
                      ("b"   counsel-projectile-switch-to-buffer)
                      ("c"   counsel-projectile-invalidate-cache)
                      ("d"   counsel-projectile-find-dir)
                      ("s-f" counsel-projectile-find-file)
                      ("ff"  counsel-projectile-find-file-dwim)
                      ("fd"  counsel-projectile-find-file-in-directory)
                      ("g"   ggtags-update-tags)
                      ("s-g" ggtags-update-tags)
                      ("i"   counsel-projectile-ibuffer)
                      ("K"   counsel-projectile-kill-buffers)
                      ("s-k" counsel-projectile-kill-buffers)
                      ("m"   counsel-projectile-multi-occur)
                      ("o"   counsel-projectile-multi-occur)
                      ("s-p" counsel-projectile-switch-project "switch project")
                      ("p"   counsel-projectile-switch-project)
                      ("s"   counsel-projectile-switch-project)
                      ("r"   counsel-projectile-recentf)
                      ("x"   counsel-projectile-remove-known-project)
                      ("X"   counsel-projectile-cleanup-known-projects)
                      ("z"   counsel-projectile-cache-current-file)
                      ("q"   nil "cancel" :color blue)))
;;(use-package counsel-projectile
;;  :config
;;  (counsel-projectile-mode t)
;;  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
* Version control
#+BEGIN_SRC emacs-lisp
;; A git interface for emacs
(use-package magit
  :config
  (setq magit-refresh-status-buffer nil)
  :diminish 'auto-revert-mode
  :defer t)

(global-set-key (kbd "C-x g") #'magit-status)
(global-set-key (kbd "C-x M-g") #'magit-dispatch)

;; Show diffs in the gutter
(use-package diff-hl
  :config
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (global-diff-hl-mode t)
  (diff-hl-flydiff-mode t))
#+END_SRC

* File/Directory management
** Diff
*** Global
#+begin_src emacs-lisp
  (use-package ediff
    :config
    (autoload 'diff-mode "diff-mode" "Diff major mode" t)
    (setq diff-switches "-u"
          ediff-auto-refine-limit (* 2 14000)
          ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function
          (lambda (&optional arg)
            (if (> (frame-width) 160)
                (split-window-horizontally arg)
              (split-window-vertically arg)))))
#+end_src
*** Helpers for region diff
#+begin_src emacs-lisp
  (defun diff-region ()
    "Select a region to compare"
    (interactive)
    (when (use-region-p) ; there is a region
      (let (buf)
        (setq buf (get-buffer-create "*Diff-regionA*"))
        (save-current-buffer
          (set-buffer buf)
          (erase-buffer))
        (append-to-buffer buf (region-beginning) (region-end)))
      )
    (message "Now select other region to compare and run `diff-region-now`"))

  (defun diff-region-now ()
    "Compare current region with region already selected by `diff-region`"
    (interactive)
    (when (use-region-p)
      (let (bufa bufb)
        (setq bufa (get-buffer-create "*Diff-regionA*"))
        (setq bufb (get-buffer-create "*Diff-regionB*"))
        (save-current-buffer
          (set-buffer bufb)
          (erase-buffer))
        (append-to-buffer bufb (region-beginning) (region-end))
        (ediff-buffers bufa bufb))
      ))
#+end_src
** Tramp
#+begin_src emacs-lisp
  (use-package tramp
    :defer t
    :custom (tramp-default-method "ssh"
             password-cache-expiry 60
             tramp-verbose 1
             tramp-auto-save-directory temporary-file-directory)
          ;; ;; Debug
          ;; tramp-verbose 9
          ;; tramp-debug-buffer t)
  )
#+end_src
** Trash
#+begin_src emacs-lisp
  ;; Ask confirmation only once and move to trash
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)

  (defun empty-trash()
    "Command to empty the trash (for now gnome/linux specific)"
    (interactive)
    (shell-command "rm -rf ~/.local/share/Trash/*"))

  (defun open-trash-dir()
    "Command to open the trash dir"
    (interactive)
    (find-file "~/.local/share/Trash/files"))
#+end_src
** Treemacs
*** Global
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind (:map global-map
                ([f8]        . treemacs))
    :functions (treemacs-follow-mode treemacs-filewatch-mode)

    :config
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-integration               t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t))
#+end_src
*** Projectile
#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :ensure t
    :functions treemacs-projectile-create-header
    :after treemacs projectile
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header))
#+end_src
*** Magit
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+end_src
*** Icons
#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :ensure t
    :commands (treemacs-icons-dired-mode)
    :hook
    (dired-mode . treemacs-icons-dired-mode))
#+end_src


* Language cpp
#+BEGIN_SRC emacs-lisp
  ;; C/C++ Mode
  (use-package cc-mode
    :ensure nil
    :bind (:map c-mode-base-map
           ("C-c c" . compile))
    :hook (c-mode-common . (lambda ()
                             (c-set-style "linux")
                             (setq tab-width 4)
                             (setq c-basic-offset 4))))

  (use-package modern-cpp-font-lock
    :diminish
    :init (modern-c++-font-lock-global-mode t))

  ;; Emacs frontend to GNU GLobal source code tagging system
  (use-package ggtags
    :init
    (ggtags-mode 1)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                  (ggtags-mode 1))))
    :config
    (dolist (map (list ggtags-mode-map dired-mode-map))
      (define-key map (kbd "C-c g s") 'ggtags-find-other-symbol)
      (define-key map (kbd "C-c g h") 'ggtags-view-tag-history)
      (define-key map (kbd "C-c g r") 'ggtags-find-reference)
      (define-key map (kbd "C-c g f") 'ggtags-find-file)
      (define-key map (kbd "C-c g c") 'ggtags-create-tags)
      (define-key map (kbd "C-c g u") 'ggtags-update-tags)
      (define-key map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
      (define-key map (kbd "M-.") 'ggtags-find-tag-dwim)
      (define-key map (kbd "M-,") 'pop-tag-mark)
      (define-key map (kbd "C-c <") 'ggtags-prev-mark)
      (define-key map (kbd "C-c >") 'ggtags-next-mark)))

  ;; A client for Language Server Protocol servers
  ;;(use-package eglot
    ;;:hook (prog-mode . eglot-ensure))

  ;; Emacs client for the Language Server Protocol
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :custom
    (lsp-auto-guess-root nil)
    :config
    (setq lsp-prefer-flymake nil) ;; Prefer using lsp-ui (flycheck) over flymake.
    ;; `-background-index' requires clangd v8+!
    ;; It tells clangd that it can use 4 concurrent jobs and to make a complete background index on disk.
    (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))
    :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
;;    :bind (:map lsp-mode-map ("C-c C-d" . lsp-describe-thing-at-point))
    :hook ((c-mode c++-mode go-mode) . lsp))

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  ;; flycheck -- syntax checking
  (use-package lsp-ui
    :after lsp-mode
    :requires lsp-mode flycheck
    :diminish
    :commands lsp-ui-mode
    :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references)
                ("C-c u" . lsp-ui-imenu))
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-use-childeframe t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    (lsp-ui-flycheck-enable t)
    (lsp-ui-flycheck-list-position 'right)
    (lsp-ui-flycheck-live-reporting t)
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-list-width 60)
    (lsp-ui-peek-list-height 25)

     :config
     (add-to-list 'lsp-ui-doc-frame-parameters '(right-fringe . 8))

     ;; `C-g'to close doc
     (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

     ;; Reset `lsp-ui-doc-background' after loading theme
     (add-hook 'after-load-theme-hook
               (lambda ()
                 (setq lsp-ui-doc-border (face-foreground 'default))
                 (set-face-background 'lsp-ui-doc-background
                                      (face-background 'tooltip))))

    :config
    ;; Use lsp-ui-doc-webkit only in GUI
    (setq lsp-ui-doc-use-webkit t)
    ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
    ;; https://github.com/emacs-lsp/lsp-ui/issues/243
    (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
      (setq mode-line-format nil)))

   ;; C/C++/Objective-C support
;;   (use-package ccls
;;     :defines projectile-project-root-files-top-down-recurring
;;     :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda ()
;;                                                      (require 'ccls)
;;                                                      (lsp-deferred)))
;;     :config
;;     (with-eval-after-load 'projectile
;;       (setq projectile-project-root-files-top-down-recurring
;;             (append '("compile_commands.json"
;;                       ".ccls")
;;                     projectile-project-root-files-top-down-recurring))))

  ;; Code completion
  (use-package company-lsp
    :requires company
    :config
    (push 'company-lsp company-backends) ;; add company-lsp as a backend

     ;; Disable client-side cache because the LSP server does a better job.
    (setq company-transformers nil
          company-lsp-async t
          company-lsp-cache-candidates nil))

#+END_SRC

* Language elisp
#+BEGIN_SRC emacs-lisp
;; String manipulation routines for emacs lisp
(use-package s
  :ensure t)

;; Minor mode for performing structured editing of S-expression data
(use-package paredit
  :init
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  :bind (("C-c d" . paredit-forward-down))
  :config
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round))

;; Ensure paredit is used EVERYWHERE!
(use-package paredit-everywhere
  :ensure t
  :diminish paredit-everywhere-mode
  :config
  (add-hook 'list-mode-hook #'paredit-everywhere-mode))

(use-package highlight-parentheses
  :ensure t
  :diminish highlight-parentheses-mode
  :config
  (add-hook 'emacs-lisp-mode-hook
            (lambda()
              (highlight-parentheses-mode)
              )))

(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'lisp-mode-hook
            (lambda()
              (rainbow-delimiters-mode)
              )))

(global-highlight-parentheses-mode)
#+END_SRC

* Language scheme
#+BEGIN_SRC emacs-lisp
(use-package geiser
  :config
  (setq geiser-active-implementations '(mit guile)))
#+END_SRC

* Language javascript
#+BEGIN_SRC emacs-lisp
(defun configure-web-mode-flycheck-checkers ()
    (flycheck-mode)

    ;; See if there is a node_modules directory
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (or (and root
                            ;; Try the locally installed eslint
                            (expand-file-name "node_modules/eslint/bin/eslint.js" root))

                       ;; Try the global installed eslint
                       (concat (string-trim (shell-command-to-string "npm config get prefix")) "/bin/eslint"))))

      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint)))

    (flycheck-select-checker 'javascript-eslint))

(defun setup-javascript ()
  (tide-setup)
  (configure-web-mode-flycheck-checkers)
  (yas-minor-mode)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))

(defun setup-js2 ()
  (setq js-switch-indent-offset 2)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (setup-javascript))

(defun setup-typescript ()
  (flycheck-add-mode 'javascript-eslint 'typescript-mode)
  (setup-javascript))

;; TypeScript Interactive Development Environment
(use-package tide
  :config
  :hook (typescript-mode . setup-typescript))

;; JavaScript editing mode
(use-package js2-mode
  :mode ("\\.js\\'" . js2-mode)
  :config
  :hook (js2-mode . setup-js2))

(use-package rjsx-mode)
#+END_SRC

* Language HTML, css
** Global web configuration
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    ("\\.phtml\\'" "\\.tpl\\.php\\'" "\\.[agj]sp\\'" "\\.as[cp]x\\'"
    "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.html?\\'")

    :init
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2

          web-mode-enable-auto-pairing t
          web-mode-enable-auto-expanding t
          web-mode-enable-css-colorization t)

    :config
    ;; Template
    (setq web-mode-engines-alist
          '(("php"    . "\\.phtml\\'")
            ("blade"  . "\\.blade\\."))
          )

    )

  (use-package web-beautify
    :ensure t
    :commands (web-beautify-css
               web-beautify-css-buffer
               web-beautify-html
               web-beautify-html-buffer
               web-beautify-js
               web-beautify-js-buffer))

  (use-package web-completion-data
    :ensure t)

  (use-package web-mode-edit-element
    :ensure t)
#+end_src
** EMMET
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :diminish (emmet-mode . "ε")
    :bind* (("C-)" . emmet-next-edit-point)
            ("C-(" . emmet-prev-edit-point))
    :commands (emmet-mode
               emmet-next-edit-point
               emmet-prev-edit-point)
    :hook
    ((sgml-mode-hook . emmet-mode)
     (html-mode . emmet-mode)
     (web-mode . emmet-mode))
    :init
    (setq emmet-indentation 2
          emmet-move-cursor-between-quotes t))
#+end_src
** Completion
#+begin_src emacs-lisp
  (use-package company-web
    :ensure t
    :compdef (web-mode)
    :company (company-web-html))
#+end_src
* Language markdown
** Global
#+begin_src emacs-lisp
;; Major mode for editing Markdown formatted text
  (use-package markdown-mode
    :defer t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "/usr/bin/pandoc"))

  (use-package markdown-mode+
    :ensure t
    :after markdown-mode)
#+end_src
** Syntax highlight in block
#+begin_src emacs-lisp
  (use-package poly-markdown
    :ensure t
    :disabled t)
#+end_src
** Visualize GFM rendering
#+begin_src emacs-lisp
  (use-package grip-mode
    :ensure t
    :commands (grip-mode)
    :bind (:map markdown-mode-command-map
           ("g" . grip-mode)))
#+end_src

* Language Latex
** Global
#+begin_src emacs-lisp
  (use-package tex-site
    :ensure auctex
    :after (tex latex)
    :hook
    (LaTeX-mode . turn-off-auto-fill)
    (LaTeX-mode . (lambda () (TeX-fold-mode t)))
    (LaTeX-mode . flyspell-mode)
    (LaTeX-mode . LaTeX-math-mode)
    (LaTeX-mode . outline-minor-mode)
    (LaTeX-mode . TeX-source-correlate-mode)

    :config

    ;; Spelling
    (setq ispell-tex-skip-alists
          '((
             ;;("%\\[" . "%\\]") ; AMStex block comment...
             ;; All the standard LaTeX keywords from L. Lamport's guide:
             ;; \cite, \hspace, \hspace*, \hyphenation, \include, \includeonly
             ;; \input, \label, \nocite, \rule (in ispell - rest included here)
             ("\\\\addcontentsline"              ispell-tex-arg-end 2)
             ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end)
             ("\\\\\\([aA]lph\\|arabic\\)"   ispell-tex-arg-end)
             ("\\\\author"                         ispell-tex-arg-end)
             ;; New regexps here --- kjh
             ("\\\\\\(text\\|paren\\)cite" ispell-tex-arg-end)
             ("\\\\cite\\(t\\|p\\|year\\|yearpar\\)" ispell-tex-arg-end)
             ("\\\\bibliographystyle"                ispell-tex-arg-end)
             ("\\\\makebox"                  ispell-tex-arg-end 0)
             ("\\\\e?psfig"                  ispell-tex-arg-end)
             ("\\\\document\\(class\\|style\\)" .
              "\\\\begin[ \t\n]*{[ \t\n]*document[ \t\n]*}"))
            (
             ;; delimited with \begin.  In ispell: displaymath, eqnarray,
             ;; eqnarray*, equation, minipage, picture, tabular,
             ;; tabular* (ispell)
             ("\\(figure\\|table\\)\\*?"     ispell-tex-arg-end 0)
             ("\\(equation\\|eqnarray\\)\\*?"     ispell-tex-arg-end 0)
             ("list"                                 ispell-tex-arg-end 2)
             ("program" . "\\\\end[ \t\n]*{[ \t\n]*program[ \t\n]*}")
             ("verbatim\\*?"."\\\\end[ \t\n]*{[ \t\n]*verbatim\\*?[ \t\n]*}")
             ("lstlisting\\*?"."\\\\end[ \t\n]*{[ \t\n]*lstlisting\\*?[ \t\n]*}"))))

    ;; Pdf activated by default
    (TeX-global-PDF-mode 1)

    ;; Diverse
    (setq-default TeX-master nil)
    (setq TeX-parse-self t
          TeX-auto-save t)

    ;; Minor helpers for comment and quotes
    (add-to-list 'LaTeX-verbatim-environments "comment")
    (setq TeX-open-quote "\enquote{"
          TeX-close-quote "}")

    ;; Indentation
    (setq LaTeX-indent-level 4
          LaTeX-item-indent 0
          TeX-brace-indent-level 4
          TeX-newline-function 'newline-and-indent)


    (defadvice LaTeX-fill-region-as-paragraph (around LaTeX-sentence-filling)
      "Start each sentence on a new line."
      (let ((from (ad-get-arg 0))
            (to-marker (set-marker (make-marker) (ad-get-arg 1)))
            tmp-end)
        (while (< from (marker-position to-marker))
          (forward-sentence)
          ;; might have gone beyond to-marker --- use whichever is smaller:
          (ad-set-arg 1 (setq tmp-end (min (point) (marker-position to-marker))))
          ad-do-it
          (ad-set-arg 0 (setq from (point)))
          (unless (or
                   (bolp)
                   (looking-at "\\s *$"))
            (LaTeX-newline)))
        (set-marker to-marker nil)))
    (ad-activate 'LaTeX-fill-region-as-paragraph)



    ;; PDF/Tex correlation
    (setq TeX-source-correlate-method 'synctex)


    ;; Keys
    (define-key LaTeX-mode-map (kbd "C-c C-=") 'align-current))
#+end_src
** Bibtex
*** Global
#+begin_src emacs-lisp
  (use-package bibtex
    :config
    (defun bibtex-generate-autokey ()
      (let* ((bibtex-autokey-names nil)
             (bibtex-autokey-year-length 2)
             (bibtex-autokey-name-separator "\0")
             (names (split-string (bibtex-autokey-get-names) "\0"))
             (year (bibtex-autokey-get-year))
             (name-char (cond ((= (length names) 1) 4)
                              ((= (length names) 2) 2)
                              (t 1)))
             (existing-keys (bibtex-parse-keys))
             key)
        (setq names (mapconcat (lambda (x)
                                 (substring x 0 name-char))
                               names
                               ""))
        (setq key (format "%s%s" names year))
        (let ((ret key))
          (loop for c from ?a to ?z
                while (assoc ret existing-keys)
                do (setq ret (format "%s%c" key c)))
          ret)))

    (setq bibtex-align-at-equal-sign t
          bibtex-autokey-name-year-separator ""
          bibtex-autokey-year-title-separator ""
          bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
          bibtex-autokey-titleword-length 100
          bibtex-autokey-titlewords 1))
#+end_src
*** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package bibclean-format
    :ensure t
    :hook
    (bibtex-mode . bibclean-format-on-save-mode)

    :commands (bibclean-format)

    :bind
    (:map bibtex-mode-map
          ("C-c f" . bibclean-format))
    :config
    (setq bibclean-format-args '("--max-width" "0" "--align-equal")))
#+END_SRC
** Completion
#+begin_src emacs-lisp
  ;; Completion
  (setq TeX-auto-global (format "%s/auctex/style" user-emacs-directory))

  (use-package company-auctex
    :ensure t
    :hook
    (latex-mode . (company-auctex-init)))

  (use-package company-bibtex
    :ensure t
    :compdef (latex-mode org-mode)
    :company (company-bibtex))

  (use-package company-reftex
    :ensure t
    :compdef (latex-mode org-mode)
    :company (company-reftex-labels company-reftex-citations))

  (use-package company-math
    :ensure t
    :compdef (latex-mode org-mode)
    :company (company-math-symbols-unicode))
#+end_src
** Compilation
#+begin_src emacs-lisp
  ;; Escape mode
  (defun TeX-toggle-escape nil
    (interactive)
    "Toggle Shell Escape"
    (setq LaTeX-command
          (if (string= LaTeX-command "latex")
              "latex -shell-escape"
            "latex"))
    (message (concat "shell escape "
                     (if (string= LaTeX-command "latex -shell-escape")
                         "enabled"
                       "disabled"))
             )
    )

  (use-package auctex-latexmk
    :ensure t
    :after (tex latex)
    :config
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (auctex-latexmk-setup))

  (setq TeX-show-compilation nil)

  ;; Redine TeX-output-mode to get the color !
  (define-derived-mode TeX-output-mode TeX-special-mode "LaTeX Output"
    "Major mode for viewing TeX output.
    \\{TeX-output-mode-map} "
    :syntax-table nil
    (set (make-local-variable 'revert-buffer-function)
         #'TeX-output-revert-buffer)

    (set (make-local-variable 'font-lock-defaults)
         '((("^!.*" . font-lock-warning-face) ; LaTeX error
            ("^-+$" . font-lock-builtin-face) ; latexmk divider
            ("^\\(?:Overfull\\|Underfull\\|Tight\\|Loose\\).*" . font-lock-builtin-face)
            ;; .....
            )))

    ;; special-mode makes it read-only which prevents input from TeX.
    (setq buffer-read-only nil))
#+end_src
** Reftex
#+begin_src emacs-lisp
  (use-package reftex
    :init
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    :config
    (setq reftex-save-parse-info t
          reftex-enable-partial-scans t
          reftex-use-multiple-selection-buffers t
          reftex-plug-into-AUCTeX t
          reftex-vref-is-default t
          reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\textcite{%l}")
            (?a . "\\autocite[]{%l}")
            (?p . "\\parencite{%l}")
            (?f . "\\footcite[][]{%l}")
            (?F . "\\fullcite[]{%l}")
            (?x . "[]{%l}")
            (?X . "{%l}"))

          font-latex-match-reference-keywords
          '(("cite" "[{")
            ("cites" "[{}]")
            ("footcite" "[{")
            ("footcites" "[{")
            ("parencite" "[{")
            ("textcite" "[{")
            ("fullcite" "[{")
            ("citetitle" "[{")
            ("citetitles" "[{")
            ("headlessfullcite" "[{"))

          reftex-cite-prompt-optional-args nil
          reftex-cite-cleanup-optional-args t))
#+end_src
** Preview
#+begin_src emacs-lisp
  (use-package latex-math-preview
    :ensure t
    :config
    (autoload 'LaTeX-preview-setup "preview")
    (setq preview-scale-function 1.2)
    (add-hook 'LaTeX-mode-hook 'LaTeX-preview-setup))
#+end_src
* Language rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :defer t)

;; rust completion library
(use-package racer
  :after (rust-mode)
  :init
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'rust-mode-hook #'racer-mode))

(use-package flycheck-rust
  :after (rust-mode)
  :init
  (add-hook 'rust-mode-hook #'flycheck-mode))
(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)

;; rust package managment
(use-package cargo
  :after (rust-mode)
  :bind (:map rust-mode-map ("C-c C-c" . cargo-process-clippy)))

(add-hook 'rust-mode-hook #'yas-minor-mode)
  #+END_SRC

* Language clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
  :defer t
  :hook (clojure-mode . enable-paredit-mode))
#+END_SRC

* Language python
** Global configuration
#+begin_src emacs-lisp
  (use-package python
    :mode
    ("\\.py\\'" . python-mode)
    ("\\.wsgi$" . python-mode)

    :init
    (setq-default indent-tabs-mode nil)

    :config
    (setq python-indent-offset 4))
#+end_src
** Lsp (with microsoft language server)
#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :demand
    :hook (python-mode . lsp-deferred)  ; or lsp-deferred
    :init
    (setq lsp-python-ms-dir "/usr/lib"
          lsp-python-ms-executable "/usr/bin/pyls")) ; mspyls ?
#+END_SRC
** Pipenv
#+begin_src emacs-lisp
  (use-package pipenv
    :ensure t
    :hook
    ((python-mode . pipenv-mode))

    :init
    (setq pipenv-projectile-after-switch-function
          #'pipenv-projectile-after-switch-extended))
#+end_src
** Conda
#+begin_src emacs-lisp
  (use-package conda
    :ensure t
    :init
    (setq conda-anaconda-home (expand-file-name "~/.conda"))
    :config
    ;; If you want interactive shell support, include:
    (conda-env-initialize-interactive-shells)
    ;; If you want eshell support, include:
    (conda-env-initialize-eshell)
    ;; If you want auto-activation, include:
    (conda-env-autoactivate-mode t)
    ;; Activate the project/virtual env you want to use.
    ;; Via M-x conda-env-activate RET analyticd-pysystemtrade
    ;; or
    ;; (conda-env-activate "analyticd-pysystemtrade")
    )
#+end_src
** Interpreter configuration
#+begin_src emacs-lisp
  (use-package ein
    :ensure t
    :config

    (cond
     ((eq system-type 'darwin) (setq ein:console-args '("--gui=osx" "--matplotlib=osx" "--colors=Linux")))
     ((eq system-type 'gnu/linux) (setq ein:console-args '("--gui=gtk3" "--matplotlib=gtk3" "--colors=Linux"))))

    (setq ein:query-timeout 1000))
#+end_src
** Sphinx documentation
#+begin_src emacs-lisp
  (use-package sphinx-doc
    :ensure t
    :hook
    (python-mode . (lambda () (sphinx-doc-mode t))))
#+end_src
** Elpy
#+BEGIN_SRC emacs-lisp
;;(use-package elpy
;;  :init
;;  (elpy-enable))
#+END_SRC

* Language Java
*** Global (lsp-java)
#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :hook
    (java-mode . lsp)

    :config
    (setq lsp-java-save-action-organize-imports nil))

  (use-package dap-java :disabled t)
  (use-package lsp-java-treemacs :disabled t)
#+end_src
*** Snippets
#+begin_src emacs-lisp
  (use-package java-snippets
    :ensure t)
#+end_src
*** Javadoc
#+begin_src emacs-lisp
  (use-package javadoc-lookup
    :ensure t
    :config
    (when (file-exists-p "/usr/share/doc/openjdk-8-jdk/api")
      (javadoc-add-roots "/usr/share/doc/openjdk-8-jdk/api"))

    (javadoc-add-artifacts [org.lwjgl.lwjgl lwjgl "2.8.2"]
                           [com.nullprogram native-guide "0.2"]
                           [org.apache.commons commons-math3 "3.0"]
                           ;; [de.dfki.lt.jtok jtok-core "1.9.3"]
                           ))

#+end_src

* Language go
Go code helpers. [[https://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/][see also]]

#+begin_src shell :tangle no
go get -u github.com/nsf/gocode
go get -u github.com/rogpeppe/godef
go get -u golang.org/x/tools/cmd/guru
go get -u golang.org/x/tools/cmd/goimports
#+end_src

Completion
#+begin_src emacs-lisp

#+end_src

Go uses tabs, so lets set the indent to a sane mode

#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src

Packages that you need for a nice Go setup

#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :bind (("C-c t t" . go-test-current-test)
           ("C-c t p" . go-test-current-project)
           ("C-c t c" . go-test-current-coverage)
           ("C-c t f" . go-test-current-file))
    :config
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save))

  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-copy-env "GOPATH")
    (exec-path-from-shell-copy-env "GOPROXY")
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  (use-package go-guru
    :ensure t)

  (use-package go-errcheck
    :ensure t)

  ;; Yasnippets
  (use-package go-snippets
    :ensure t)

  ;; eldoc integration
  (use-package go-eldoc
    :ensure t)

  ;; (use-package gocode
  ;;   :ensure t)

  ;; (use-package godef
  ;;   :ensure t)

  (use-package gotest
    :ensure t)

  (use-package flycheck-golangci-lint
    :ensure t
    :hook (go-mode . flycheck-golangci-lint-setup))
#+end_src
* Documentation
** Emacs
*** Key binding
#+begin_src emacs-lisp
  (use-package helm-descbinds
    :ensure t
    :commands (helm-descbinds)
    :bind
    ("C-h b" . helm-descbinds))
#+end_src
*** Apropos
#+begin_src emacs-lisp
  (use-package apropos-fn+var
    :ensure t
    :disabled t
    :config
    (setq apropos-do-all t))
#+end_src
*** Info
#+begin_src emacs-lisp
  (use-package info-buffer
    :ensure t)

  (use-package info+
    :ensure t
    :disabled t)
#+end_src
*** Help
#+begin_src emacs-lisp
  ;; A better "help" buffer
  (use-package helpful
    :ensure t)
#+end_src
** Diverse
*** Man
#+begin_src emacs-lisp
  (use-package man
    :ensure t
    :config
    (setq Man-notify-method 'pushy)
    (setq woman-manpath
          `(
            "/usr/share/man/" "/usr/local/man/" ;; System
            ,(format "%s/local/man" user-emacs-directory) ;; Private environment
            )))
#+end_src


* Daemon mode
Now that we are ready to actually configure emacs properly, let's first start the server!

#+begin_src emacs-lisp
  (server-start)
#+end_src
